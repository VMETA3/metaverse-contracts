{
  "address": "0x0c8F49e53E12Da57a43E987669Aa7e807DcCa5FC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "signRequired",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "vm3",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdt",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalVM3",
          "type": "uint256"
        }
      ],
      "name": "BuyVM3",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "opHash",
          "type": "bytes32"
        }
      ],
      "name": "OperationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limitAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SaleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "added",
          "type": "bool"
        }
      ],
      "name": "SetWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawVM3",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "opHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "AddOpHashToPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MONTH",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VM3",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vm3Price",
          "type": "uint256"
        }
      ],
      "name": "canGotVM3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        }
      ],
      "name": "canWithdrawVM3",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBuy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBuy",
          "type": "uint256"
        },
        {
          "internalType": "uint64[3]",
          "name": "times",
          "type": "uint64[3]"
        },
        {
          "internalType": "uint32",
          "name": "releaseTotalMonths",
          "type": "uint32"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "createSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableWhiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        }
      ],
      "name": "getUserAssetInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "latestWithdrawTime",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "withdrawnMonths",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "releaseTotalMonths",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumOwners",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "operationsStatus",
      "outputs": [
        {
          "internalType": "enum SafeOwnable.OpStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address[6]",
          "name": "",
          "type": "address[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "paymentTokenMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "saleInfoMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "limitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "soldAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "releaseStartTime",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "releaseTotalMonths",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "maxBuy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBuy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "saleNumberList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "setEnableWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "setSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "releaseTotalMonths",
          "type": "uint32"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "setUserReleaseMonths",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "setUserReleaseStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "added",
          "type": "bool"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "setWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signRequired",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userAssetInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "saleNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "latestWithdrawTime",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "withdrawnMonths",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "releaseTotalMonths",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "withdrawAllSaleVM3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receipt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "withdrawSaleVolume",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "saleNumbers",
          "type": "uint64[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawVM3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9cbf23739d910c67cac91a656dbc4b86e09d4cae85b71a83dae821aa8ffb54c8",
  "receipt": {
    "to": null,
    "from": "0x26afa95c73A2EACF9a1C25D55430d0fE4C685e29",
    "contractAddress": "0x0c8F49e53E12Da57a43E987669Aa7e807DcCa5FC",
    "transactionIndex": 10,
    "gasUsed": "4160149",
    "logsBloom": "0x
    "blockHash": "0x52aabcac9eb7bc7e17ad44010b9b46c9eb9fcbe0915d6b5281d20b46794ca787",
    "transactionHash": "0x9cbf23739d910c67cac91a656dbc4b86e09d4cae85b71a83dae821aa8ffb54c8",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 29232637,
        "transactionHash": "0x9cbf23739d910c67cac91a656dbc4b86e09d4cae85b71a83dae821aa8ffb54c8",
        "address": "0x0c8F49e53E12Da57a43E987669Aa7e807DcCa5FC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000068bdf7ad77c0ff511f5724b5140c0ed08fc970ea"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x52aabcac9eb7bc7e17ad44010b9b46c9eb9fcbe0915d6b5281d20b46794ca787"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 29232637,
        "transactionHash": "0x9cbf23739d910c67cac91a656dbc4b86e09d4cae85b71a83dae821aa8ffb54c8",
        "address": "0x0c8F49e53E12Da57a43E987669Aa7e807DcCa5FC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000032bd4e4587f4507d19391ea45f1043d0a3eb44ac"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x52aabcac9eb7bc7e17ad44010b9b46c9eb9fcbe0915d6b5281d20b46794ca787"
      }
    ],
    "blockNumber": 29232637,
    "cumulativeGasUsed": "5641250",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x68BdF7aD77c0FF511F5724B5140C0eD08fC970Ea",
      "0x32Bd4E4587f4507D19391Ea45F1043d0A3EB44aC"
    ],
    2,
    "0xFC04fA99eBdd826788EE98062d607b31C8069029",
    "0x337610d27c682E347C9cD60BD4b3b107C9d34dDd"
  ],
  "numDeployments": 3,
  "solcInputHash": "cbfe65fb486d5021261b67f4e1ede71a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"signRequired\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"vm3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVM3\",\"type\":\"uint256\"}],\"name\":\"BuyVM3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"opHash\",\"type\":\"bytes32\"}],\"name\":\"OperationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"SetWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawVM3\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"opHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"AddOpHashToPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTH\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VM3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vm3Price\",\"type\":\"uint256\"}],\"name\":\"canGotVM3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"}],\"name\":\"canWithdrawVM3\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint64[3]\",\"name\":\"times\",\"type\":\"uint64[3]\"},{\"internalType\":\"uint32\",\"name\":\"releaseTotalMonths\",\"type\":\"uint32\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"createSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"}],\"name\":\"getUserAssetInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"latestWithdrawTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"withdrawnMonths\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"releaseTotalMonths\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumOwners\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"operationsStatus\",\"outputs\":[{\"internalType\":\"enum SafeOwnable.OpStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address[6]\",\"name\":\"\",\"type\":\"address[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentTokenMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saleInfoMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"releaseStartTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"releaseTotalMonths\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saleNumberList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"setEnableWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"setSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"releaseTotalMonths\",\"type\":\"uint32\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"setUserReleaseMonths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setUserReleaseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signRequired\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAssetInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"saleNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"latestWithdrawTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"withdrawnMonths\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"releaseTotalMonths\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"withdrawAllSaleVM3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"withdrawSaleVolume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"saleNumbers\",\"type\":\"uint64[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawVM3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buy(uint256,address,uint256)\":{\"details\":\"buy VM3\",\"params\":{\"amount\":\"amount of token you pay to buy VM3\",\"paymentToken\":\"which token user want to pay\",\"saleNumber\":\"number of sale\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAllSaleVM3(bytes[])\":{\"details\":\"manager take out VM3\"},\"withdrawSaleVolume(address,address,bytes[])\":{\"details\":\"manager take out sale volume\"},\"withdrawVM3(uint64[],address)\":{\"details\":\"user take out VM3\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrivateSale/PrivateSale.sol\":\"PrivateSale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/Abstract/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// support multiple owners to manager\\nabstract contract SafeOwnable is Context {\\n    using ECDSA for bytes32;\\n    enum OpStatus {\\n        OpDefault,\\n        OpPending,\\n        OpExecuted,\\n        OpCancel\\n    }\\n\\n    address[6] private _owners;\\n    mapping(address => uint8) private _ownersIndex; // from 1\\n    uint8 private _numOwners;\\n    uint8 public constant maxNumOwners = 5;\\n    // the number of owners that must confirm before operation run.\\n    uint8 public immutable signRequired;\\n    mapping(bytes32 => OpStatus) public operationsStatus;\\n\\n    uint256 public nonce; //avoid operation hash being the same\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OperationAdded(bytes32 indexed opHash);\\n\\n    constructor(address[] memory ownerList, uint8 signRequired_) {\\n        require(ownerList.length <= maxNumOwners, \\\"SafeOwnable:exceed maximum number owners\\\");\\n        require(signRequired_ != 0, \\\"SafeOwnable: signRequired is zero\\\");\\n\\n        signRequired = signRequired_;\\n        for (uint256 i = 0; i < ownerList.length; i++) {\\n            address owner = ownerList[i];\\n            require(_ownersIndex[owner] == 0, \\\"SafeOwnable: owner already exists\\\");\\n            _owners[++_numOwners] = owner;\\n            _ownersIndex[owner] = _numOwners;\\n\\n            emit OwnershipTransferred(address(0), owner);\\n        }\\n\\n        require(signRequired <= _numOwners, \\\"SafeOwnable: owners less than signRequired\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_ownersIndex[_msgSender()] > 0, \\\"SafeOwnable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyMultipleOwner(bytes32 dataHash, bytes[] memory sigs) {\\n        uint8 confirmed = 0;\\n        bool[maxNumOwners + 1] memory mark;\\n        if (_ownersIndex[_msgSender()] > 0) {\\n            confirmed++;\\n            mark[_ownersIndex[_msgSender()]] = true;\\n        }\\n        for (uint8 i = 0; i < sigs.length; i++) {\\n            address owner = dataHash.recover(sigs[i]);\\n            uint8 ownerIndex = _ownersIndex[owner];\\n            require(ownerIndex > 0, \\\"SafeOwnable: signer is not owner\\\");\\n            if (mark[ownerIndex] == true) {\\n                continue;\\n            }\\n            mark[ownerIndex] = true;\\n            confirmed++;\\n        }\\n\\n        require(confirmed >= signRequired, \\\"SafeOwnable: no enough confirms\\\");\\n        nonce++;\\n        _;\\n    }\\n\\n    modifier onlyOperationPendding(bytes32 opHash) {\\n        require(operationsStatus[opHash] == OpStatus.OpPending, \\\"SafeOwnable: operation not in pending\\\");\\n        operationsStatus[opHash] = OpStatus.OpExecuted;\\n        _;\\n    }\\n\\n    function AddOpHashToPending(bytes32 opHash, bytes[] memory sigs) public onlyMultipleOwner(opHash, sigs) {\\n        require(operationsStatus[opHash] == OpStatus.OpDefault, \\\"SafeOwnable: operation was not submitted yet\\\");\\n        operationsStatus[opHash] = OpStatus.OpPending;\\n        emit OperationAdded(opHash);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"SafeOwnable: new owner is the zero address\\\");\\n        require(_ownersIndex[newOwner] == 0, \\\"SafeOwnable: new owner already exists\\\");\\n\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _msgSender();\\n        uint8 oldOwnerIndex = _ownersIndex[oldOwner];\\n        _owners[oldOwnerIndex] = newOwner;\\n        _ownersIndex[oldOwner] = 0;\\n        _ownersIndex[newOwner] = oldOwnerIndex;\\n\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    function owners() public view returns (address[6] memory) {\\n        return _owners;\\n    }\\n}\\n\",\"keccak256\":\"0xf7bd9d5ce26099eac608859e9e5798459f9cac9189d907ccab2123feb327553b\",\"license\":\"MIT\"},\"contracts/PrivateSale/PrivateSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport {SafeOwnable} from \\\"../Abstract/SafeOwnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IERC20 {\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ncontract PrivateSale is SafeOwnable, ReentrancyGuard {\\n    /*\\n     * constant\\n     */\\n    uint64 public constant MONTH = 60 * 60 * 24 * 30;\\n\\n    /*\\n     * events\\n     */\\n    event SaleCreated(address from, uint256 indexed saleNumber, uint256 limitAmount, uint256 price);\\n    event BuyVM3(\\n        address indexed from,\\n        uint256 indexed saleNumber,\\n        address paymentToken,\\n        uint256 amount,\\n        uint256 totalVM3\\n    );\\n    event WithdrawVM3(address indexed recipient, uint256 indexed saleNumber, uint256 amount);\\n    event SetWhiteList(uint256 indexed saleNumber, address[] users, bool added);\\n\\n    /*\\n     * custom struct\\n     */\\n    struct SaleInfo {\\n        uint256 number;\\n        // release paused or not\\n        bool paused;\\n        uint256 limitAmount;\\n        uint256 soldAmount;\\n        uint256 price; // USD, decimal is 18\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint64 releaseStartTime;\\n        uint32 releaseTotalMonths;\\n        // who can buy this vm3 sale\\n        mapping(address => bool) whiteList;\\n        // max/min sell vm3 amount for everyone\\n        uint256 maxBuy;\\n        uint256 minBuy;\\n    }\\n    struct AssetInfo {\\n        uint256 saleNumber; // which sale  user buy\\n        // release puased or not\\n        bool paused;\\n        uint256 amount;\\n        uint256 amountWithdrawn;\\n        uint64 latestWithdrawTime;\\n        uint32 withdrawnMonths;\\n        uint32 releaseTotalMonths;\\n    }\\n\\n    /*\\n     * storage\\n     */\\n    address public VM3;\\n    bytes32 public DOMAIN;\\n    // BNB\\uff080x0000000000000000000000000000000000000000\\uff09\\n    // USDT\\uff080x55d398326f99059fF775485246999027B3197955\\uff09\\n    // BUSD\\uff080xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\\uff09\\n    // WBNB\\uff080xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\\uff09\\n    // ETH\\uff080x2170Ed0880ac9A755fd29B2688956BD959F933F8\\uff09\\n    mapping(address => bool) public paymentTokenMap;\\n    mapping(uint256 => SaleInfo) public saleInfoMap;\\n    uint256[] public saleNumberList;\\n    //  user=>saleNumber=>AssetInfo\\n    mapping(address => mapping(uint256 => AssetInfo)) public userAssetInfos;\\n    bool public enableWhiteList = true;\\n\\n    constructor(\\n        address[] memory owners,\\n        uint8 signRequired,\\n        address vm3,\\n        address usdt\\n    ) SafeOwnable(owners, signRequired) {\\n        DOMAIN = keccak256(\\n            abi.encode(keccak256(\\\"Domain(uint256 chainId,address verifyingContract)\\\"), block.chainid, address(this))\\n        );\\n\\n        VM3 = vm3;\\n\\n        //initialize payment token\\n        paymentTokenMap[usdt] = true;\\n    }\\n\\n    modifier onlyAssetExist(address user, uint256 saleNumber) {\\n        require(userAssetInfos[user][saleNumber].saleNumber > 0, \\\"PrivateSale: Asset is not exist\\\");\\n        _;\\n    }\\n    modifier onlySaleExist(uint256 saleNumber) {\\n        require(saleInfoMap[saleNumber].number > 0, \\\"PrivateSale: Sale is not exist\\\");\\n        _;\\n    }\\n    modifier onlySupportedPaymentToken(address paymentToken) {\\n        require(paymentTokenMap[paymentToken], \\\"PrivateSale:PaymentToken is not supported\\\");\\n        _;\\n    }\\n    modifier onlySaleInProgress(uint256 saleNumber) {\\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\\n        require(\\n            _blockTimestamp() >= saleInfo.startTime && _blockTimestamp() <= saleInfo.endTime,\\n            \\\"PrivateSale: Sale is not in progress\\\"\\n        );\\n        _;\\n    }\\n    modifier onlyInWhiteList(uint256 saleNumber) {\\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\\n        require(saleInfo.whiteList[msg.sender] || !enableWhiteList, \\\"PrivateSale:user not in whiteList\\\");\\n        _;\\n    }\\n    modifier onlySaleNotPuased(uint256 saleNumber) {\\n        require(!saleInfoMap[saleNumber].paused, \\\"PrivateSale:sale paused\\\");\\n        _;\\n    }\\n    modifier onlyUserReleaseNotPaused(address user, uint256 saleNumber) {\\n        require(!userAssetInfos[user][saleNumber].paused, \\\"PrivateSale:user asset paused\\\");\\n        _;\\n    }\\n    modifier onlySaleReleaseStart(uint256 saleNumber) {\\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\\n        require(saleInfo.releaseStartTime < _blockTimestamp(), \\\"PrivateSale:sale release not start\\\");\\n        _;\\n    }\\n\\n    function createSale(\\n        uint256 saleNumber,\\n        uint256 limitAmount,\\n        uint256 price,\\n        uint256 maxBuy,\\n        uint256 minBuy,\\n        uint64[3] memory times, // startTime, endTime, releaseStartTime\\n        uint32 releaseTotalMonths,\\n        bytes[] memory sigs\\n    )\\n        external\\n        onlyMultipleOwner(\\n            _hashToSign(\\n                keccak256(\\n                    abi.encodePacked(\\n                        DOMAIN,\\n                        keccak256(\\n                            \\\"createSale(uint256 saleNumber,uint256 limitAmount,uint256 price,uint256 maxBuy,uint256 minBuy,uint64 startTime,uint64 endTime,uint64 releaseStartTime,uint32 releaseTotalMonths)\\\"\\n                        ),\\n                        saleNumber,\\n                        limitAmount,\\n                        price,\\n                        maxBuy,\\n                        minBuy,\\n                        times[0],\\n                        times[1],\\n                        times[2],\\n                        releaseTotalMonths,\\n                        nonce\\n                    )\\n                )\\n            ),\\n            sigs\\n        )\\n    {\\n        require(saleNumber > 0 && saleInfoMap[saleNumber].number == 0);\\n\\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\\n        saleInfo.number = saleNumber;\\n        saleInfo.limitAmount = limitAmount;\\n        saleInfo.price = price;\\n        saleInfo.maxBuy = maxBuy;\\n        saleInfo.minBuy = minBuy;\\n        saleInfo.startTime = times[0];\\n        saleInfo.endTime = times[1];\\n        saleInfo.releaseStartTime = times[2];\\n        saleInfo.releaseTotalMonths = releaseTotalMonths;\\n\\n        saleNumberList.push(saleNumber);\\n        emit SaleCreated(msg.sender, saleNumber, limitAmount, price);\\n    }\\n\\n    ///@dev buy VM3\\n    ///@param saleNumber number of sale\\n    ///@param paymentToken which token user want to pay\\n    ///@param amount amount of token you pay to buy VM3\\n    function buy(\\n        uint256 saleNumber,\\n        address paymentToken,\\n        uint256 amount\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        onlySaleExist(saleNumber)\\n        onlyInWhiteList(saleNumber)\\n        onlySaleInProgress(saleNumber)\\n        onlySupportedPaymentToken(paymentToken)\\n        onlySaleNotPuased(saleNumber)\\n    {\\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\\n        if (paymentToken == address(0)) {\\n            amount = msg.value;\\n        } else {\\n            IERC20(paymentToken).transferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        uint256 gotVM3 = _canGotVM3(paymentToken, amount, saleInfo.price);\\n        require(gotVM3 + saleInfo.soldAmount < saleInfo.limitAmount, \\\"PrivateSale: Exceed sale limit\\\");\\n        require(gotVM3 > saleInfo.minBuy);\\n        saleInfo.soldAmount += gotVM3;\\n\\n        //modify user asset\\n        AssetInfo storage assetInfo = userAssetInfos[msg.sender][saleNumber];\\n        if (assetInfo.saleNumber == 0) {\\n            assetInfo.saleNumber = saleNumber;\\n            assetInfo.releaseTotalMonths = saleInfo.releaseTotalMonths;\\n        }\\n        assetInfo.amount += gotVM3;\\n        require(assetInfo.amount < saleInfo.maxBuy);\\n        emit BuyVM3(msg.sender, saleNumber, paymentToken, amount, gotVM3);\\n    }\\n\\n    ///@dev user take out VM3\\n    function withdrawVM3(uint64[] memory saleNumbers, address recipient) external nonReentrant {\\n        for (uint64 i = 0; i < saleNumbers.length; i++) {\\n            _witdrawVM3(saleNumbers[i], recipient);\\n        }\\n    }\\n\\n    ///@dev manager take out VM3\\n    function withdrawAllSaleVM3(\\n        bytes[] memory sigs\\n    )\\n        external\\n        onlyMultipleOwner(\\n            _hashToSign(keccak256(abi.encodePacked(DOMAIN, keccak256(\\\"withdrawAllSaleVM3()\\\"), nonce))),\\n            sigs\\n        )\\n    {\\n        uint256 amount = IERC20(VM3).balanceOf(address(this));\\n        IERC20(VM3).transferFrom(address(this), msg.sender, amount);\\n    }\\n\\n    ///@dev manager take out sale volume\\n    function withdrawSaleVolume(\\n        address receipt,\\n        address tokenAddress,\\n        bytes[] memory sigs\\n    )\\n        external\\n        onlyMultipleOwner(\\n            _hashToSign(\\n                keccak256(\\n                    abi.encodePacked(DOMAIN, keccak256(\\\"withdrawSaleVolume(address receipt,address token)\\\"), nonce)\\n                )\\n            ),\\n            sigs\\n        )\\n    {\\n        if (tokenAddress == address(0)) {\\n            (bool sent, ) = receipt.call{value: address(this).balance}(\\\"\\\");\\n            require(sent);\\n            return;\\n        }\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transferFrom(address(this), receipt, token.balanceOf(address(this)));\\n    }\\n\\n    //settings\\n    function setSaleStatus(\\n        uint256 saleNumber,\\n        bool paused, // true pused; false not paused\\n        bytes[] memory sigs\\n    )\\n        external\\n        onlyMultipleOwner(\\n            _hashToSign(\\n                keccak256(\\n                    abi.encodePacked(\\n                        DOMAIN,\\n                        keccak256(\\\"setSaleStatus(uint256 saleNumber,bool paused)\\\"),\\n                        saleNumber,\\n                        paused,\\n                        nonce\\n                    )\\n                )\\n            ),\\n            sigs\\n        )\\n        onlySaleExist(saleNumber)\\n    {\\n        saleInfoMap[saleNumber].paused = paused;\\n    }\\n\\n    function setUserReleaseStatus(\\n        uint256 saleNumber,\\n        bool paused // true pused; false not paused\\n    ) external onlyAssetExist(msg.sender, saleNumber) {\\n        userAssetInfos[msg.sender][saleNumber].paused = paused;\\n    }\\n\\n    function setWhiteList(\\n        uint256 saleNumber,\\n        address[] memory users,\\n        bool added, // true add; false remove\\n        bytes[] memory sigs\\n    )\\n        external\\n        onlySaleExist(saleNumber)\\n        onlyMultipleOwner(\\n            _hashToSign(\\n                keccak256(\\n                    abi.encodePacked(\\n                        DOMAIN,\\n                        keccak256(\\\"setWhiteList(uint256 saleNumber,address[] users,bool added)\\\"),\\n                        saleNumber,\\n                        users,\\n                        added,\\n                        nonce\\n                    )\\n                )\\n            ),\\n            sigs\\n        )\\n    {\\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\\n        for (uint256 i = 0; i < users.length; i++) {\\n            saleInfo.whiteList[users[i]] = added;\\n        }\\n        emit SetWhiteList(saleNumber, users, added);\\n    }\\n\\n    function setUserReleaseMonths(\\n        address user,\\n        uint256 saleNumber,\\n        uint32 releaseTotalMonths,\\n        bytes[] memory sigs\\n    )\\n        external\\n        onlyMultipleOwner(\\n            _hashToSign(\\n                keccak256(\\n                    abi.encodePacked(\\n                        DOMAIN,\\n                        keccak256(\\\"setUserReleaseMonths(address user,uint256 saleNumber,uint32 releaseTotalMonths)\\\"),\\n                        user,\\n                        saleNumber,\\n                        releaseTotalMonths,\\n                        nonce\\n                    )\\n                )\\n            ),\\n            sigs\\n        )\\n        onlyAssetExist(user, saleNumber)\\n    {\\n        require(userAssetInfos[user][saleNumber].withdrawnMonths < releaseTotalMonths);\\n        userAssetInfos[user][saleNumber].releaseTotalMonths = releaseTotalMonths;\\n    }\\n\\n    function setEnableWhiteList(\\n        bool enable,\\n        bytes[] memory sigs\\n    )\\n        external\\n        onlyMultipleOwner(\\n            _hashToSign(\\n                keccak256(abi.encodePacked(DOMAIN, keccak256(\\\"setEnableWhiteList(bool enable)\\\"), enable, nonce))\\n            ),\\n            sigs\\n        )\\n    {\\n        enableWhiteList = enable;\\n    }\\n\\n    function setPaymentToken(\\n        address paymentToken,\\n        bool enable,\\n        bytes[] memory sigs\\n    )\\n        external\\n        onlyMultipleOwner(\\n            _hashToSign(\\n                keccak256(\\n                    abi.encodePacked(\\n                        DOMAIN,\\n                        keccak256(\\\"setPaymentToken(address paymentToken,bool enable)\\\"),\\n                        paymentToken,\\n                        enable,\\n                        nonce\\n                    )\\n                )\\n            ),\\n            sigs\\n        )\\n    {\\n        paymentTokenMap[paymentToken] = enable;\\n    }\\n\\n    /// dev calculate how many VM3 user can got if he pay amount paymentToken.\\n    function _canGotVM3(address paymentToken, uint256 payAmount, uint256 vm3Price) internal view returns (uint256) {\\n        uint8 paymentTokenDecimals = 18;\\n        if (paymentToken != address(0)) {\\n            paymentTokenDecimals = IERC20(paymentToken).decimals();\\n        }\\n\\n        if (paymentTokenDecimals < 18) {\\n            payAmount *= 10 ** (18 - paymentTokenDecimals);\\n        } else if (paymentTokenDecimals > 18) {\\n            payAmount /= 10 ** (paymentTokenDecimals - 18);\\n        }\\n\\n        uint256 gotVM3 = (payAmount * 10 ** 18) / vm3Price;\\n        require(gotVM3 > 0, \\\"PrivateSale: buy zero VM3\\\");\\n\\n        return gotVM3;\\n    }\\n\\n    ///@dev user release VM3 to his account\\n    function _witdrawVM3(\\n        uint256 saleNumber,\\n        address user\\n    )\\n        internal\\n        onlyAssetExist(user, saleNumber)\\n        onlySaleNotPuased(saleNumber)\\n        onlyUserReleaseNotPaused(user, saleNumber)\\n        onlySaleReleaseStart(saleNumber)\\n    {\\n        (uint16 canWithdrawMonths, uint256 withdrawAmount) = _canWithdrawVM3(user, saleNumber);\\n        IERC20(VM3).transferFrom(address(this), user, withdrawAmount);\\n\\n        AssetInfo storage assetInfo = userAssetInfos[user][saleNumber];\\n        assetInfo.amountWithdrawn += withdrawAmount;\\n        assetInfo.latestWithdrawTime = _blockTimestamp();\\n        assetInfo.withdrawnMonths += canWithdrawMonths;\\n    }\\n\\n    function _canWithdrawVM3(\\n        address user,\\n        uint256 saleNumber\\n    ) internal view returns (uint16 canWithdrawMonths, uint256 withdrawAmount) {\\n        AssetInfo memory assetInfo = userAssetInfos[user][saleNumber];\\n        if (assetInfo.latestWithdrawTime > 0) {\\n            require(_blockTimestamp() - assetInfo.latestWithdrawTime > MONTH, \\\"PrivateSale: has withdraw recently\\\");\\n        }\\n\\n        if (assetInfo.latestWithdrawTime == 0) {\\n            canWithdrawMonths = uint16((_blockTimestamp() - saleInfoMap[saleNumber].releaseStartTime) / MONTH);\\n        } else {\\n            canWithdrawMonths = uint16((_blockTimestamp() - assetInfo.latestWithdrawTime) / MONTH);\\n        }\\n\\n        withdrawAmount =\\n            ((assetInfo.amount - assetInfo.amountWithdrawn) /\\n                (assetInfo.releaseTotalMonths - assetInfo.withdrawnMonths)) *\\n            canWithdrawMonths;\\n    }\\n\\n    function _hashToSign(bytes32 data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", data));\\n    }\\n\\n    /// @dev Returns the block timestamp truncated to 64 bits, i.e. mod 2**64. This method is overridden in tests.\\n    function _blockTimestamp() internal view virtual returns (uint64) {\\n        return uint64(block.timestamp); // truncation is desired\\n    }\\n\\n    /*\\n     * query\\n     */\\n    function totalSale() external view returns (uint256) {\\n        return (saleNumberList.length);\\n    }\\n\\n    function canGotVM3(address paymentToken, uint256 payAmount, uint256 vm3Price) external view returns (uint256) {\\n        return _canGotVM3(paymentToken, payAmount, vm3Price);\\n    }\\n\\n    function canWithdrawVM3(address user, uint256 saleNumber) external view returns (uint16, uint256) {\\n        return _canWithdrawVM3(user, saleNumber);\\n    }\\n\\n    function getUserAssetInfo(\\n        address user,\\n        uint256 saleNumber\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 amountWithdrawn,\\n            uint64 latestWithdrawTime,\\n            uint32 withdrawnMonths,\\n            uint32 releaseTotalMonths\\n        )\\n    {\\n        amount = userAssetInfos[user][saleNumber].amount;\\n        amountWithdrawn = userAssetInfos[user][saleNumber].amountWithdrawn;\\n        latestWithdrawTime = userAssetInfos[user][saleNumber].latestWithdrawTime;\\n        withdrawnMonths = userAssetInfos[user][saleNumber].withdrawnMonths;\\n        releaseTotalMonths = userAssetInfos[user][saleNumber].releaseTotalMonths;\\n    }\\n}\\n\",\"keccak256\":\"0xcb98b4c764c94a71504429603203ac13098ac895ce93bb321d5d20c35cb554b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c8063affe39c1116100f7578063d60c016c11610095578063ecd53f1611610064578063ecd53f161461071c578063ee3f43181461073c578063f2fde38b146107ff578063f54363941461081f57600080fd5b8063d60c016c146105be578063dc9646a9146105de578063e609d15a146105fe578063ea4ce2391461070757600080fd5b8063ca84fe23116100d1578063ca84fe2314610511578063cc54585414610531578063ce0d0ca014610551578063d5999a5c1461058e57600080fd5b8063affe39c11461049f578063affed0e0146104c1578063bbc620ed146104d757600080fd5b80633b586c7a1161016f5780637a29349d1161013e5780637a29349d1461040b5780638b5a21431461043f578063a2f256ee1461045f578063a3227a671461047f57600080fd5b80633b586c7a1461037d57806352a9674b146103ab578063539b2ba4146103c15780635841858a146103eb57600080fd5b80632afaca20116101ab5780632afaca20146102f2578063333bf7b6146103055780633635d7e81461032557806338433a531461034557600080fd5b80630b1e74f8146101d25780630c3515ba146102a957806327d70469146102d0575b600080fd5b3480156101de57600080fd5b5061025c6101ed366004613ad7565b601060209081526000928352604080842090915290825290208054600182015460028301546003840154600490940154929360ff9092169290919067ffffffffffffffff81169063ffffffff6801000000000000000082048116916c0100000000000000000000000090041687565b60408051978852951515602088015294860193909352606085019190915267ffffffffffffffff16608084015263ffffffff90811660a08401521660c082015260e0015b60405180910390f35b3480156102b557600080fd5b506102be600581565b60405160ff90911681526020016102a0565b3480156102dc57600080fd5b506102f06102eb366004613c97565b61084f565b005b6102f0610300366004613cf0565b610bac565b34801561031157600080fd5b506102f0610320366004613d25565b611115565b34801561033157600080fd5b506102f0610340366004613d83565b611386565b34801561035157600080fd5b50600b54610365906001600160a01b031681565b6040516001600160a01b0390911681526020016102a0565b34801561038957600080fd5b5061039d610398366004613e2d565b611447565b6040519081526020016102a0565b3480156103b757600080fd5b5061039d600c5481565b3480156103cd57600080fd5b506011546103db9060ff1681565b60405190151581526020016102a0565b3480156103f757600080fd5b506102f0610406366004613e60565b61145c565b34801561041757600080fd5b506102be7f000000000000000000000000000000000000000000000000000000000000000081565b34801561044b57600080fd5b506102f061045a366004613e8e565b6116fd565b34801561046b57600080fd5b5061039d61047a366004613ebf565b6119e1565b34801561048b57600080fd5b506102f061049a366004613eec565b611a02565b3480156104ab57600080fd5b506104b4611e8e565b6040516102a09190613fc1565b3480156104cd57600080fd5b5061039d60095481565b3480156104e357600080fd5b506104f76104f2366004613ad7565b611ed3565b6040805161ffff90931683526020830191909152016102a0565b34801561051d57600080fd5b506102f061052c366004613ffb565b611eec565b34801561053d57600080fd5b506102f061054c366004614063565b6122b5565b34801561055d57600080fd5b5061058161056c366004613ebf565b60086020526000908152604090205460ff1681565b6040516102a091906140a5565b34801561059a57600080fd5b506105a562278d0081565b60405167ffffffffffffffff90911681526020016102a0565b3480156105ca57600080fd5b506102f06105d93660046140cd565b6126bf565b3480156105ea57600080fd5b506102f06105f9366004614102565b612a2c565b34801561060a57600080fd5b506106a2610619366004613ebf565b600e6020526000908152604090208054600182015460028301546003840154600485015460058601546007870154600890970154959660ff9095169593949293919267ffffffffffffffff80831693680100000000000000008404821693700100000000000000000000000000000000810490921692600160c01b90920463ffffffff1691908b565b604080519b8c5299151560208c0152988a01979097526060890195909552608088019390935267ffffffffffffffff91821660a0880152811660c08701521660e085015263ffffffff16610100840152610120830152610140820152610160016102a0565b34801561071357600080fd5b50600f5461039d565b34801561072857600080fd5b506102f0610737366004614132565b612ac7565b34801561074857600080fd5b506107c2610757366004613ad7565b6001600160a01b039190911660009081526010602090815260408083209383529290522060028101546003820154600490920154909267ffffffffffffffff82169163ffffffff6801000000000000000082048116926c010000000000000000000000009092041690565b60408051958652602086019490945267ffffffffffffffff9092169284019290925263ffffffff918216606084015216608082015260a0016102a0565b34801561080b57600080fd5b506102f061081a366004614203565b612e28565b34801561082b57600080fd5b506103db61083a366004614203565b600d6020526000908152604090205460ff1681565b600c546009546040805160208101939093527f4bb849d20bc1839434620b7570c23445880910bc5227961342a99a74fb7b429a908301526060820185905283151560f81b608083015260818201526109059060a1015b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b816000610910613a9d565b3360009081526006602052604090205460ff161561097b57816109328161423b565b925050600181600660006109433390565b6001600160a01b0316815260208101919091526040016000205460ff16600681106109705761097061425b565b911515602090920201525b60005b83518160ff161015610a9a5760006109bb858360ff16815181106109a4576109a461425b565b602002602001015187612fc390919063ffffffff16565b6001600160a01b03811660009081526006602052604090205490915060ff1680610a2c5760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e657260448201526064015b60405180910390fd5b838160ff1660068110610a4157610a4161425b565b6020020151151560011415610a57575050610a88565b6001848260ff1660068110610a6e57610a6e61425b565b9115156020909202015284610a828161423b565b95505050505b80610a928161423b565b91505061097e565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff161015610b115760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a23565b60098054906000610b2183614271565b90915550506000878152600e60205260409020548790610b835760405162461bcd60e51b815260206004820152601e60248201527f5072697661746553616c653a2053616c65206973206e6f7420657869737400006044820152606401610a23565b50505060009485525050600e602052506040909120600101805460ff1916911515919091179055565b6002600a541415610bff5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a23565b6002600a556000838152600e60205260409020548390610c615760405162461bcd60e51b815260206004820152601e60248201527f5072697661746553616c653a2053616c65206973206e6f7420657869737400006044820152606401610a23565b6000848152600e60209081526040808320338452600681019092529091205485919060ff1680610c94575060115460ff16155b610d065760405162461bcd60e51b815260206004820152602160248201527f5072697661746553616c653a75736572206e6f7420696e2077686974654c697360448201527f74000000000000000000000000000000000000000000000000000000000000006064820152608401610a23565b6000868152600e60205260409020600581015487919067ffffffffffffffff164267ffffffffffffffff1610158015610d635750600581015468010000000000000000900467ffffffffffffffff164267ffffffffffffffff1611155b610dd45760405162461bcd60e51b8152602060048201526024808201527f5072697661746553616c653a2053616c65206973206e6f7420696e2070726f6760448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a23565b6001600160a01b0387166000908152600d6020526040902054879060ff16610e645760405162461bcd60e51b815260206004820152602960248201527f5072697661746553616c653a5061796d656e74546f6b656e206973206e6f742060448201527f737570706f7274656400000000000000000000000000000000000000000000006064820152608401610a23565b6000898152600e6020526040902060010154899060ff1615610ec85760405162461bcd60e51b815260206004820152601760248201527f5072697661746553616c653a73616c65207061757365640000000000000000006044820152606401610a23565b60008a8152600e602052604090206001600160a01b038a16610eec57349850610f74565b6040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038b16906323b872dd90606401602060405180830381600087803b158015610f3a57600080fd5b505af1158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f72919061428c565b505b6000610f858b8b8460040154612fe9565b90508160020154826003015482610f9c91906142a9565b10610fe95760405162461bcd60e51b815260206004820152601e60248201527f5072697661746553616c653a204578636565642073616c65206c696d697400006044820152606401610a23565b81600801548111610ff957600080fd5b8082600301600082825461100d91906142a9565b90915550503360009081526010602090815260408083208f845290915290208054611086578c815560058301546004820180547fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16600160c01b90920463ffffffff166c01000000000000000000000000029190911790555b8181600201600082825461109a91906142a9565b909155505060078301546002820154106110b357600080fd5b604080516001600160a01b038e168152602081018d90529081018390528d9033907f4476e7b9e8e8eba2125547546ea0a1f2633cbcba05fe66963fcf23295f41cdd69060600160405180910390a350506001600a555050505050505050505050565b600c546009546040805160208101939093527f31d4e9b062ab12930b434c41865bd0b9db314ad7997ee7d368586e763e18a6f39083015283151560f81b60608301526061820152611168906081016108a5565b816000611173613a9d565b3360009081526006602052604090205460ff16156111de57816111958161423b565b925050600181600660006111a63390565b6001600160a01b0316815260208101919091526040016000205460ff16600681106111d3576111d361425b565b911515602090920201525b60005b83518160ff1610156112e1576000611207858360ff16815181106109a4576109a461425b565b6001600160a01b03811660009081526006602052604090205490915060ff16806112735760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a23565b838160ff16600681106112885761128861425b565b602002015115156001141561129e5750506112cf565b6001848260ff16600681106112b5576112b561425b565b91151560209092020152846112c98161423b565b95505050505b806112d98161423b565b9150506111e1565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff1610156113585760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a23565b6009805490600061136883614271565b90915550506011805460ff1916961515969096179095555050505050565b6002600a5414156113d95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a23565b6002600a5560005b82518167ffffffffffffffff16101561143d5761142b838267ffffffffffffffff16815181106114135761141361425b565b602002602001015167ffffffffffffffff168361314c565b80611435816142c1565b9150506113e1565b50506001600a5550565b6000611454848484612fe9565b949350505050565b600c546009546040805160208101939093527fd6ec5693c25ca31f279b9ce5c67cb7da2405c43ba2ead26df21f815587f7a69590830152606085811b6bffffffffffffffffffffffff19169083015283151560f81b607483015260758201526114c7906095016108a5565b8160006114d2613a9d565b3360009081526006602052604090205460ff161561153d57816114f48161423b565b925050600181600660006115053390565b6001600160a01b0316815260208101919091526040016000205460ff16600681106115325761153261425b565b911515602090920201525b60005b83518160ff161015611640576000611566858360ff16815181106109a4576109a461425b565b6001600160a01b03811660009081526006602052604090205490915060ff16806115d25760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a23565b838160ff16600681106115e7576115e761425b565b60200201511515600114156115fd57505061162e565b6001848260ff16600681106116145761161461425b565b91151560209092020152846116288161423b565b95505050505b806116388161423b565b915050611540565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff1610156116b75760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a23565b600980549060006116c783614271565b909155505050506001600160a01b03949094166000908152600d60205260409020805460ff191693151593909317909255505050565b81816000611709613a9d565b3360009081526006602052604090205460ff1615611774578161172b8161423b565b9250506001816006600061173c3390565b6001600160a01b0316815260208101919091526040016000205460ff16600681106117695761176961425b565b911515602090920201525b60005b83518160ff16101561187757600061179d858360ff16815181106109a4576109a461425b565b6001600160a01b03811660009081526006602052604090205490915060ff16806118095760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a23565b838160ff166006811061181e5761181e61425b565b6020020151151560011415611834575050611865565b6001848260ff166006811061184b5761184b61425b565b911515602090920201528461185f8161423b565b95505050505b8061186f8161423b565b915050611777565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff1610156118ee5760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a23565b600980549060006118fe83614271565b909155505060008681526008602052604081205460ff1660038111156119265761192661408f565b146119995760405162461bcd60e51b815260206004820152602c60248201527f536166654f776e61626c653a206f7065726174696f6e20776173206e6f74207360448201527f75626d69747465642079657400000000000000000000000000000000000000006064820152608401610a23565b600086815260086020526040808220805460ff191660011790555187917f33775024b20f211f019e50305c897b2105edc4642384143897ac170fb37f54a191a2505050505050565b600f81815481106119f157600080fd5b600091825260209091200154905081565b600c5483516020808601516040808801516009548251948501969096527fc6808e4b4873d1eb8ef8a741d339073b86ac0cfe3c4c0ce6de503894796749de91840191909152606083018d9052608083018c905260a083018b905260c08084018b905260e08085018b905294811b7fffffffffffffffff00000000000000000000000000000000000000000000000090811661010086015292811b83166101088501521b166101108201529084901b7fffffffff000000000000000000000000000000000000000000000000000000001661011882015261011c810191909152611aee9061013c016108a5565b816000611af9613a9d565b3360009081526006602052604090205460ff1615611b645781611b1b8161423b565b92505060018160066000611b2c3390565b6001600160a01b0316815260208101919091526040016000205460ff1660068110611b5957611b5961425b565b911515602090920201525b60005b83518160ff161015611c67576000611b8d858360ff16815181106109a4576109a461425b565b6001600160a01b03811660009081526006602052604090205490915060ff1680611bf95760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a23565b838160ff1660068110611c0e57611c0e61425b565b6020020151151560011415611c24575050611c55565b6001848260ff1660068110611c3b57611c3b61425b565b9115156020909202015284611c4f8161423b565b95505050505b80611c5f8161423b565b915050611b67565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff161015611cde5760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a23565b60098054906000611cee83614271565b919050555060008c118015611d0f575060008c8152600e6020526040902054155b611d1857600080fd5b60008c8152600e602090815260408083208f8155600281018f9055600481018e9055600781018d9055600881018c90558a516005820180548d8601518e86015163ffffffff8f16600160c01b027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff92831670010000000000000000000000000000000002169282166801000000000000000002919095167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090931692909217919091177fffffffff000000000000000000000000ffffffffffffffffffffffffffffffff1617919091179055600f805460018101825594527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8029093018f905580513381529182018e90528181018d9052518e917f2cd2dfcdeb2b58c4b80527e9df5e12da537fa4f6c958a4fb623a83ab74eeab63919081900360600190a250505050505050505050505050565b611e96613a9d565b6040805160c08101918290529060009060069082845b81546001600160a01b03168152600190910190602001808311611eac575050505050905090565b600080611ee084846134b2565b915091505b9250929050565b600c546009546040805160208101939093527fd9e78fb04d6ac18c0fdf2548d0d0269d5309657d9b28d6539514a9a4c2b9103a90830152606086811b6bffffffffffffffffffffffff1916908301526074820185905260e084901b7fffffffff000000000000000000000000000000000000000000000000000000001660948301526098820152611f7f9060b8016108a5565b816000611f8a613a9d565b3360009081526006602052604090205460ff1615611ff55781611fac8161423b565b92505060018160066000611fbd3390565b6001600160a01b0316815260208101919091526040016000205460ff1660068110611fea57611fea61425b565b911515602090920201525b60005b83518160ff1610156120f857600061201e858360ff16815181106109a4576109a461425b565b6001600160a01b03811660009081526006602052604090205490915060ff168061208a5760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a23565b838160ff166006811061209f5761209f61425b565b60200201511515600114156120b55750506120e6565b6001848260ff16600681106120cc576120cc61425b565b91151560209092020152846120e08161423b565b95505050505b806120f08161423b565b915050611ff8565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff16101561216f5760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a23565b6009805490600061217f83614271565b90915550506001600160a01b03881660009081526010602090815260408083208a8452909152902054889088906121f85760405162461bcd60e51b815260206004820152601f60248201527f5072697661746553616c653a204173736574206973206e6f74206578697374006044820152606401610a23565b6001600160a01b038a1660009081526010602090815260408083208c845290915290206004015463ffffffff808a1668010000000000000000909204161061223f57600080fd5b5050506001600160a01b03909616600090815260106020908152604080832097835296905294909420600401805463ffffffff9094166c01000000000000000000000000027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff9094169390931790925550505050565b600c546009546040805160208101939093527fb9ac1db50394938a38c7b8f7e8cac5412ca4ecbf9978c4d856aeeae611bdba7f9083015260608201526122fd906080016108a5565b816000612308613a9d565b3360009081526006602052604090205460ff1615612373578161232a8161423b565b9250506001816006600061233b3390565b6001600160a01b0316815260208101919091526040016000205460ff16600681106123685761236861425b565b911515602090920201525b60005b83518160ff16101561247657600061239c858360ff16815181106109a4576109a461425b565b6001600160a01b03811660009081526006602052604090205490915060ff16806124085760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a23565b838160ff166006811061241d5761241d61425b565b6020020151151560011415612433575050612464565b6001848260ff166006811061244a5761244a61425b565b911515602090920201528461245e8161423b565b95505050505b8061246e8161423b565b915050612376565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff1610156124ed5760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a23565b600980549060006124fd83614271565b90915550506001600160a01b038616612576576000876001600160a01b03164760405160006040518083038185875af1925050503d806000811461255d576040519150601f19603f3d011682016040523d82523d6000602084013e612562565b606091505b505090508061257057600080fd5b506126b6565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820181905287916001600160a01b038316916323b872dd918b9084906370a082319060240160206040518083038186803b1580156125dc57600080fd5b505afa1580156125f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261491906142e9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561267b57600080fd5b505af115801561268f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b3919061428c565b50505b50505050505050565b600c546009546040805160208101939093527fc842808f6a0a12c87980fcfcfe351cca86c5d3e03171763c77de756773de52d8908301526060820152612707906080016108a5565b816000612712613a9d565b3360009081526006602052604090205460ff161561277d57816127348161423b565b925050600181600660006127453390565b6001600160a01b0316815260208101919091526040016000205460ff16600681106127725761277261425b565b911515602090920201525b60005b83518160ff1610156128805760006127a6858360ff16815181106109a4576109a461425b565b6001600160a01b03811660009081526006602052604090205490915060ff16806128125760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a23565b838160ff16600681106128275761282761425b565b602002015115156001141561283d57505061286e565b6001848260ff16600681106128545761285461425b565b91151560209092020152846128688161423b565b95505050505b806128788161423b565b915050612780565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff1610156128f75760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a23565b6009805490600061290783614271565b9091555050600b546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561296957600080fd5b505afa15801561297d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a191906142e9565b600b546040516323b872dd60e01b8152306004820152336024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156129f457600080fd5b505af1158015612a08573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b6919061428c565b3360008181526010602090815260408083208684529091529020548390612a955760405162461bcd60e51b815260206004820152601f60248201527f5072697661746553616c653a204173736574206973206e6f74206578697374006044820152606401610a23565b505033600090815260106020908152604080832094835293905291909120600101805460ff1916911515919091179055565b6000848152600e60205260409020548490612b245760405162461bcd60e51b815260206004820152601e60248201527f5072697661746553616c653a2053616c65206973206e6f7420657869737400006044820152606401610a23565b612b66600c547f06f12d83abc74702e7c4901277bc58a0fef8947f04a332a375a4fe81749ff7d18787876009546040516020016108a596959493929190614302565b826000612b71613a9d565b3360009081526006602052604090205460ff1615612bdc5781612b938161423b565b92505060018160066000612ba43390565b6001600160a01b0316815260208101919091526040016000205460ff1660068110612bd157612bd161425b565b911515602090920201525b60005b83518160ff161015612cdf576000612c05858360ff16815181106109a4576109a461425b565b6001600160a01b03811660009081526006602052604090205490915060ff1680612c715760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a23565b838160ff1660068110612c8657612c8661425b565b6020020151151560011415612c9c575050612ccd565b6001848260ff1660068110612cb357612cb361425b565b9115156020909202015284612cc78161423b565b95505050505b80612cd78161423b565b915050612bdf565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff161015612d565760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a23565b60098054906000612d6683614271565b90915550506000898152600e60205260408120905b8951811015612de157888260060160008c8481518110612d9d57612d9d61425b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580612dd981614271565b915050612d7b565b50897f9f032cae28e793a96efaf9c8bb2c95e9263460eadbab1a96970adc68107d87168a8a604051612e14929190614363565b60405180910390a250505050505050505050565b3360009081526006602052604090205460ff16612eac5760405162461bcd60e51b8152602060048201526024808201527f536166654f776e61626c653a2063616c6c6572206973206e6f7420746865206f60448201527f776e6572000000000000000000000000000000000000000000000000000000006064820152608401610a23565b6001600160a01b038116612f285760405162461bcd60e51b815260206004820152602a60248201527f536166654f776e61626c653a206e6577206f776e657220697320746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610a23565b6001600160a01b03811660009081526006602052604090205460ff1615612fb75760405162461bcd60e51b815260206004820152602560248201527f536166654f776e61626c653a206e6577206f776e657220616c7265616479206560448201527f78697374730000000000000000000000000000000000000000000000000000006064820152608401610a23565b612fc0816136c4565b50565b6000806000612fd2858561377c565b91509150612fdf816137bf565b5090505b92915050565b600060126001600160a01b0385161561307057846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561303557600080fd5b505afa158015613049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306d91906143b7565b90505b60128160ff1610156130a3576130878160126143da565b61309290600a6144e1565b61309c90856144f0565b93506130d2565b60128160ff1611156130d2576130ba6012826143da565b6130c590600a6144e1565b6130cf9085614525565b93505b6000836130e786670de0b6b3a76400006144f0565b6130f19190614525565b9050600081116131435760405162461bcd60e51b815260206004820152601960248201527f5072697661746553616c653a20627579207a65726f20564d33000000000000006044820152606401610a23565b95945050505050565b6001600160a01b0381166000908152601060209081526040808320858452909152902054819083906131c05760405162461bcd60e51b815260206004820152601f60248201527f5072697661746553616c653a204173736574206973206e6f74206578697374006044820152606401610a23565b6000848152600e6020526040902060010154849060ff16156132245760405162461bcd60e51b815260206004820152601760248201527f5072697661746553616c653a73616c65207061757365640000000000000000006044820152606401610a23565b6001600160a01b03841660009081526010602090815260408083208884529091529020600101548490869060ff161561329f5760405162461bcd60e51b815260206004820152601d60248201527f5072697661746553616c653a75736572206173736574207061757365640000006044820152606401610a23565b6000878152600e60205260409020600581015488919067ffffffffffffffff428116700100000000000000000000000000000000909204161061334a5760405162461bcd60e51b815260206004820152602260248201527f5072697661746553616c653a73616c652072656c65617365206e6f742073746160448201527f72740000000000000000000000000000000000000000000000000000000000006064820152608401610a23565b6000806133578a8c6134b2565b600b546040516323b872dd60e01b81523060048201526001600160a01b038e811660248301526044820184905293955091935091909116906323b872dd90606401602060405180830381600087803b1580156133b257600080fd5b505af11580156133c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ea919061428c565b506001600160a01b038a1660009081526010602090815260408083208e84529091528120600381018054919284926134239084906142a9565b90915550506004810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000164267ffffffffffffffff161780825561ffff8516919060089061348690849068010000000000000000900463ffffffff16614539565b92506101000a81548163ffffffff021916908363ffffffff160217905550505050505050505050505050565b6001600160a01b03821660009081526010602090815260408083208484528252808320815160e08101835281548152600182015460ff16151593810193909352600281015491830191909152600381015460608301526004015467ffffffffffffffff81166080830181905263ffffffff680100000000000000008304811660a08501526c0100000000000000000000000090920490911660c0830152829190156135e857608081015162278d009061356b9042614561565b67ffffffffffffffff16116135e85760405162461bcd60e51b815260206004820152602260248201527f5072697661746553616c653a2068617320776974686472617720726563656e7460448201527f6c790000000000000000000000000000000000000000000000000000000000006064820152608401610a23565b608081015167ffffffffffffffff1661364c576000848152600e602052604090206005015462278d0090700100000000000000000000000000000000900467ffffffffffffffff164261363b9190614561565b613645919061458a565b9250613673565b62278d00816080015161365c4290565b6136669190614561565b613670919061458a565b92505b8261ffff168160a001518260c0015161368c91906145b1565b63ffffffff16826060015183604001516136a691906145ce565b6136b09190614525565b6136ba91906144f0565b9150509250929050565b33600081815260066020819052604082205460ff16918491839081106136ec576136ec61425b565b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03928316179055828116600081815260066020526040808220805460ff19908116909155938716808352818320805490951660ff871617909455517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a3505050565b6000808251604114156137b35760208301516040840151606085015160001a6137a7878285856139b0565b94509450505050611ee5565b50600090506002611ee5565b60008160048111156137d3576137d361408f565b14156137dc5750565b60018160048111156137f0576137f061408f565b141561383e5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a23565b60028160048111156138525761385261408f565b14156138a05760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a23565b60038160048111156138b4576138b461408f565b14156139285760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610a23565b600481600481111561393c5761393c61408f565b1415612fc05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610a23565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156139e75750600090506003613a94565b8460ff16601b141580156139ff57508460ff16601c14155b15613a105750600090506004613a94565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613a64573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613a8d57600060019250925050613a94565b9150600090505b94509492505050565b6040518060c001604052806006906020820280368337509192915050565b80356001600160a01b0381168114613ad257600080fd5b919050565b60008060408385031215613aea57600080fd5b613af383613abb565b946020939093013593505050565b8015158114612fc057600080fd5b8035613ad281613b01565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715613b5357613b53613b1a565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613b8257613b82613b1a565b604052919050565b600067ffffffffffffffff821115613ba457613ba4613b1a565b5060051b60200190565b6000601f8381840112613bc057600080fd5b82356020613bd5613bd083613b8a565b613b59565b82815260059290921b85018101918181019087841115613bf457600080fd5b8287015b84811015613c8b57803567ffffffffffffffff80821115613c195760008081fd5b818a0191508a603f830112613c2e5760008081fd5b85820135604082821115613c4457613c44613b1a565b613c5588601f198c85011601613b59565b92508183528c81838601011115613c6c5760008081fd5b8181850189850137506000908201870152845250918301918301613bf8565b50979650505050505050565b600080600060608486031215613cac57600080fd5b833592506020840135613cbe81613b01565b9150604084013567ffffffffffffffff811115613cda57600080fd5b613ce686828701613bae565b9150509250925092565b600080600060608486031215613d0557600080fd5b83359250613d1560208501613abb565b9150604084013590509250925092565b60008060408385031215613d3857600080fd5b8235613d4381613b01565b9150602083013567ffffffffffffffff811115613d5f57600080fd5b6136ba85828601613bae565b803567ffffffffffffffff81168114613ad257600080fd5b60008060408385031215613d9657600080fd5b823567ffffffffffffffff811115613dad57600080fd5b8301601f81018513613dbe57600080fd5b80356020613dce613bd083613b8a565b82815260059290921b83018101918181019088841115613ded57600080fd5b938201935b83851015613e1257613e0385613d6b565b82529382019390820190613df2565b9550613e219050868201613abb565b93505050509250929050565b600080600060608486031215613e4257600080fd5b613e4b84613abb565b95602085013595506040909401359392505050565b600080600060608486031215613e7557600080fd5b613e7e84613abb565b92506020840135613cbe81613b01565b60008060408385031215613ea157600080fd5b82359150602083013567ffffffffffffffff811115613d5f57600080fd5b600060208284031215613ed157600080fd5b5035919050565b803563ffffffff81168114613ad257600080fd5b600080600080600080600080610140898b031215613f0957600080fd5b883597506020808a0135975060408a0135965060608a0135955060808a013594508a60bf8b0112613f3957600080fd5b613f41613b30565b806101008c018d811115613f5457600080fd5b60a08d015b81811015613f7757613f6a81613d6b565b8452928401928401613f59565b50819650613f8481613ed8565b95505050505061012089013567ffffffffffffffff811115613fa557600080fd5b613fb18b828c01613bae565b9150509295985092959890939650565b60c08101818360005b6006811015613ff25781516001600160a01b0316835260209283019290910190600101613fca565b50505092915050565b6000806000806080858703121561401157600080fd5b61401a85613abb565b93506020850135925061402f60408601613ed8565b9150606085013567ffffffffffffffff81111561404b57600080fd5b61405787828801613bae565b91505092959194509250565b60008060006060848603121561407857600080fd5b61408184613abb565b9250613cbe60208501613abb565b634e487b7160e01b600052602160045260246000fd5b60208101600483106140c757634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156140df57600080fd5b813567ffffffffffffffff8111156140f657600080fd5b61145484828501613bae565b6000806040838503121561411557600080fd5b82359150602083013561412781613b01565b809150509250929050565b6000806000806080858703121561414857600080fd5b8435935060208086013567ffffffffffffffff8082111561416857600080fd5b818801915088601f83011261417c57600080fd5b813561418a613bd082613b8a565b81815260059190911b8301840190848101908b8311156141a957600080fd5b938501935b828510156141ce576141bf85613abb565b825293850193908501906141ae565b97506141df91505060408901613b0f565b945060608801359250808311156141f557600080fd5b505061405787828801613bae565b60006020828403121561421557600080fd5b61421e82613abb565b9392505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81141561425257614252614225565b60010192915050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561428557614285614225565b5060010190565b60006020828403121561429e57600080fd5b815161421e81613b01565b600082198211156142bc576142bc614225565b500190565b600067ffffffffffffffff808316818114156142df576142df614225565b6001019392505050565b6000602082840312156142fb57600080fd5b5051919050565b86815260006020878184015286604084015260608301865182880160005b828110156143455781516001600160a01b031684529284019290840190600101614320565b50505094151560f81b85525050506001820152602101949350505050565b604080825283519082018190526000906020906060840190828701845b828110156143a55781516001600160a01b031684529284019290840190600101614380565b50505093151592019190915250919050565b6000602082840312156143c957600080fd5b815160ff8116811461421e57600080fd5b600060ff821660ff8416808210156143f4576143f4614225565b90039392505050565b600181815b8085111561443857816000190482111561441e5761441e614225565b8085161561442b57918102915b93841c9390800290614402565b509250929050565b60008261444f57506001612fe3565b8161445c57506000612fe3565b8160018114614472576002811461447c57614498565b6001915050612fe3565b60ff84111561448d5761448d614225565b50506001821b612fe3565b5060208310610133831016604e8410600b84101617156144bb575081810a612fe3565b6144c583836143fd565b80600019048211156144d9576144d9614225565b029392505050565b600061421e60ff841683614440565b600081600019048311821515161561450a5761450a614225565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826145345761453461450f565b500490565b600063ffffffff80831681851680830382111561455857614558614225565b01949350505050565b600067ffffffffffffffff8381169083168181101561458257614582614225565b039392505050565b600067ffffffffffffffff808416806145a5576145a561450f565b92169190910492915050565b600063ffffffff8381169083168181101561458257614582614225565b6000828210156145e0576145e0614225565b50039056fea2646970667358221220228be3d1e6e1f38a42dbc5c5387a7d5fb3b44f092eef52323d17ad98ad067e8064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buy(uint256,address,uint256)": {
        "details": "buy VM3",
        "params": {
          "amount": "amount of token you pay to buy VM3",
          "paymentToken": "which token user want to pay",
          "saleNumber": "number of sale"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAllSaleVM3(bytes[])": {
        "details": "manager take out VM3"
      },
      "withdrawSaleVolume(address,address,bytes[])": {
        "details": "manager take out sale volume"
      },
      "withdrawVM3(uint64[],address)": {
        "details": "user take out VM3"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 694,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)6_storage"
      },
      {
        "astId": 698,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "_ownersIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 700,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "_numOwners",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 710,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "operationsStatus",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_enum(OpStatus)690)"
      },
      {
        "astId": 712,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "nonce",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 10,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1190,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "VM3",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1192,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "DOMAIN",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 1196,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "paymentTokenMap",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1201,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "saleInfoMap",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(SaleInfo)1173_storage)"
      },
      {
        "astId": 1204,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "saleNumberList",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1211,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "userAssetInfos",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(AssetInfo)1188_storage))"
      },
      {
        "astId": 1214,
        "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
        "label": "enableWhiteList",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)6_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(OpStatus)690": {
        "encoding": "inplace",
        "label": "enum SafeOwnable.OpStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(AssetInfo)1188_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PrivateSale.AssetInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(AssetInfo)1188_storage)"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_bytes32,t_enum(OpStatus)690)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum SafeOwnable.OpStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(OpStatus)690"
      },
      "t_mapping(t_uint256,t_struct(AssetInfo)1188_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrivateSale.AssetInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetInfo)1188_storage"
      },
      "t_mapping(t_uint256,t_struct(SaleInfo)1173_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrivateSale.SaleInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SaleInfo)1173_storage"
      },
      "t_struct(AssetInfo)1188_storage": {
        "encoding": "inplace",
        "label": "struct PrivateSale.AssetInfo",
        "members": [
          {
            "astId": 1175,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "saleNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1177,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "paused",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1179,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1181,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "amountWithdrawn",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1183,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "latestWithdrawTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          },
          {
            "astId": 1185,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "withdrawnMonths",
            "offset": 8,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1187,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "releaseTotalMonths",
            "offset": 12,
            "slot": "4",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SaleInfo)1173_storage": {
        "encoding": "inplace",
        "label": "struct PrivateSale.SaleInfo",
        "members": [
          {
            "astId": 1148,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1150,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "paused",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1152,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "limitAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1154,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "soldAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1156,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1158,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 1160,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "endTime",
            "offset": 8,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 1162,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "releaseStartTime",
            "offset": 16,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 1164,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "releaseTotalMonths",
            "offset": 24,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 1168,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "whiteList",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1170,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "maxBuy",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1172,
            "contract": "contracts/PrivateSale/PrivateSale.sol:PrivateSale",
            "label": "minBuy",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
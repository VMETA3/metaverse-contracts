{
  "address": "0x12f57B0aE2cFa2104645905240929DEA68da5Ee8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "opHash",
          "type": "bytes32"
        }
      ],
      "name": "OperationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "opHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "AddOpHashToPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC20Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activityEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activityStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "cleanLevelArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cleanLevelArrayAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vip.LatestList[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLevelArray",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vip.Level[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "signRequred",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumOwners",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "operationsStatus",
      "outputs": [
        {
          "internalType": "enum SafeOwnableUpgradeable.OpStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address[6]",
          "name": "",
          "type": "address[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setActivityEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setActivityStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp_",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentNumber",
          "type": "uint256"
        }
      ],
      "name": "setLevelArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "levels_",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "thresholds_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "numberLimits_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "currentNumbers_",
          "type": "uint256[]"
        }
      ],
      "name": "setLevelArrayAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        }
      ],
      "name": "setSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signRequired",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "14058cf7abe88b17ae0e57128b3e2585",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"opHash\",\"type\":\"bytes32\"}],\"name\":\"OperationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"opHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"AddOpHashToPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activityEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activityStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"cleanLevelArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanLevelArrayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"internalType\":\"struct Vip.LatestList[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLevelArray\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Vip.Level[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"signRequred\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumOwners\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"operationsStatus\",\"outputs\":[{\"internalType\":\"enum SafeOwnableUpgradeable.OpStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address[6]\",\"name\":\"\",\"type\":\"address[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setActivityEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setActivityStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp_\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentNumber\",\"type\":\"uint256\"}],\"name\":\"setLevelArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"levels_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"thresholds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numberLimits_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentNumbers_\",\"type\":\"uint256[]\"}],\"name\":\"setLevelArrayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"setSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signRequired\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Investment/Vip.sol\":\"Vip\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/Abstract/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// support multiple owners to manager\\nabstract contract SafeOwnableUpgradeable is Initializable, ContextUpgradeable {\\n    using ECDSA for bytes32;\\n    enum OpStatus {\\n        OpDefault,\\n        OpPending,\\n        OpExecuted,\\n        OpCancel\\n    }\\n\\n    address[6] private _owners;\\n    mapping(address => uint8) private _ownersIndex; // from 1\\n    uint8 private _numOwners;\\n    uint8 public constant maxNumOwners = 5;\\n    // the number of owners that must confirm before operation run.\\n    uint8 public signRequired;\\n    mapping(bytes32 => OpStatus) public operationsStatus;\\n\\n    uint256 public nonce; //avoid operation hash being the same\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OperationAdded(bytes32 indexed opHash);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address[] memory ownerList, uint8 signRequired_) internal onlyInitializing {\\n        require(ownerList.length <= maxNumOwners, \\\"SafeOwnableUpgradeable:exceed maximum number owners\\\");\\n        require(signRequired_ != 0, \\\"SafeOwnableUpgradeable: signRequired is zero\\\");\\n\\n        signRequired = signRequired_;\\n        for (uint256 i = 0; i < ownerList.length; i++) {\\n            address owner = ownerList[i];\\n            require(_ownersIndex[owner] == 0, \\\"SafeOwnableUpgradeable: owner already exists\\\");\\n            _owners[++_numOwners] = owner;\\n            _ownersIndex[owner] = _numOwners;\\n\\n            emit OwnershipTransferred(address(0), owner);\\n        }\\n\\n        require(signRequired <= _numOwners, \\\"SafeOwnableUpgradeable: owners less than signRequired\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_ownersIndex[_msgSender()] > 0, \\\"SafeOwnableUpgradeable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyMultipleOwner(bytes32 dataHash, bytes[] memory sigs) {\\n        uint8 confirmed = 0;\\n        bool[maxNumOwners + 1] memory mark;\\n        if (_ownersIndex[_msgSender()] > 0) {\\n            confirmed++;\\n            mark[_ownersIndex[_msgSender()]] = true;\\n        }\\n        for (uint8 i = 0; i < sigs.length; i++) {\\n            address owner = dataHash.recover(sigs[i]);\\n            uint8 ownerIndex = _ownersIndex[owner];\\n            require(ownerIndex > 0, \\\"SafeOwnableUpgradeable: signer is not owner\\\");\\n            if (mark[ownerIndex] == true) {\\n                continue;\\n            }\\n            mark[ownerIndex] = true;\\n            confirmed++;\\n        }\\n\\n        require(confirmed >= signRequired, \\\"SafeOwnableUpgradeable: no enough confirms\\\");\\n        nonce++;\\n        _;\\n    }\\n\\n    modifier onlyOperationPendding(bytes32 opHash) {\\n        require(operationsStatus[opHash] == OpStatus.OpPending, \\\"SafeOwnableUpgradeable: operation not in pending\\\");\\n        operationsStatus[opHash] = OpStatus.OpExecuted;\\n        _;\\n    }\\n\\n    function AddOpHashToPending(bytes32 opHash, bytes[] memory sigs) public onlyMultipleOwner(opHash, sigs) {\\n        require(\\n            operationsStatus[opHash] == OpStatus.OpDefault,\\n            \\\"SafeOwnableUpgradeable: operation was not submitted yet\\\"\\n        );\\n        operationsStatus[opHash] = OpStatus.OpPending;\\n        emit OperationAdded(opHash);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"SafeOwnableUpgradeable: new owner is the zero address\\\");\\n        require(_ownersIndex[newOwner] == 0, \\\"SafeOwnableUpgradeable: new owner already exists\\\");\\n\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _msgSender();\\n        uint8 oldOwnerIndex = _ownersIndex[oldOwner];\\n        _owners[oldOwnerIndex] = newOwner;\\n        _ownersIndex[oldOwner] = 0;\\n        _ownersIndex[newOwner] = oldOwnerIndex;\\n\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    function owners() public view returns (address[6] memory) {\\n        return _owners;\\n    }\\n}\\n\",\"keccak256\":\"0x870523db00d30722bfc00baa608bd247cdc4f8fb921be4226f8a3e19fcc8322e\",\"license\":\"MIT\"},\"contracts/Investment/Vip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// Open Zeppelin libraries for controlling upgradability and access.\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../Abstract/SafeOwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Time} from \\\"../Lib/Time.sol\\\";\\n\\ncontract Vip is Initializable, UUPSUpgradeable, SafeOwnableUpgradeable {\\n    IERC20 public ERC20Token;\\n    address public spender;\\n    uint256 public activityStartTime;\\n    uint256 public activityEndTime;\\n    uint256 constant INTERVAL = 30 days;\\n\\n    bytes32 public DOMAIN;\\n\\n    // Control timestamp\\n    using Time for Time.Timestamp;\\n    Time.Timestamp private _timestamp;\\n\\n    struct VipInfo {\\n        uint256 amount;\\n        uint256 startTime;\\n        uint8 level;\\n    }\\n    struct MapVip {\\n        address[] keys;\\n        mapping(address => VipInfo) values;\\n        mapping(address => bool) inserted;\\n    }\\n    MapVip private mapVip;\\n\\n    struct Level {\\n        uint8 level;\\n        uint256 threshold;\\n        uint256 numberLimit;\\n        uint256 currentNumber;\\n    }\\n    Level[] private levelArray;\\n\\n    struct LatestList {\\n        address addr;\\n        uint8 level;\\n    }\\n\\n    event Deposit(address account, uint256 amount);\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual override {}\\n\\n    function initialize(address[] memory owners, uint8 signRequred) public initializer {\\n        __Ownable_init(owners, signRequred);\\n        __UUPSUpgradeable_init();\\n\\n        DOMAIN = keccak256(\\n            abi.encode(keccak256(\\\"Domain(uint256 chainId,address verifyingContract)\\\"), block.chainid, address(this))\\n        );\\n    }\\n\\n    function deposit(uint256 amount) external {\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function depositTo(address to, uint256 amount) external {\\n        _deposit(to, amount);\\n    }\\n\\n    function _deposit(address to, uint256 amount) internal {\\n        uint256 time = _timestamp._getCurrentTime();\\n        require(time > activityStartTime, \\\"Vip: The activity has not started\\\");\\n        require(time < activityEndTime, \\\"Vip: The activity has ended\\\");\\n\\n        uint256 levelIndex;\\n        if (mapVip.inserted[to]) {\\n            VipInfo memory info = mapVip.values[to];\\n            uint256 newAmount = info.amount + amount;\\n            require(time - info.startTime < INTERVAL, \\\"Vip: Upgrade must be within 30 days\\\");\\n\\n            levelIndex = _handle(newAmount);\\n            require(levelIndex > _get_level_index(info.level), \\\"Vip: level threshold not reached\\\");\\n\\n            info.amount = newAmount;\\n            info.level = levelArray[levelIndex].level;\\n            mapVip.values[to] = info;\\n        } else {\\n            levelIndex = _handle(amount);\\n            mapVip.values[to] = VipInfo(amount, time, levelArray[levelIndex].level);\\n            mapVip.inserted[to] = true;\\n            mapVip.keys.push(to);\\n        }\\n        ERC20Token.transferFrom(to, spender, amount);\\n        emit Deposit(to, amount);\\n    }\\n\\n    function _handle(uint256 amount) internal returns (uint256 levelIndex) {\\n        levelIndex = _calculation_level_index(amount);\\n        Level memory currentLevel = levelArray[levelIndex];\\n        require(currentLevel.currentNumber < currentLevel.numberLimit, \\\"Vip: exceed the number of people limit\\\");\\n        levelArray[levelIndex].currentNumber += 1;\\n    }\\n\\n    function _get_level_index(uint256 level) internal view returns (uint256 levelIndex) {\\n        for (uint8 i = 0; i < levelArray.length; ++i) {\\n            if (levelArray[i].level == level) {\\n                levelIndex = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _calculation_level_index(uint256 amount) internal view returns (uint256 levelIndex) {\\n        uint256 lv1Index;\\n        uint256 lv2Index;\\n        uint256 lv3Index;\\n        for (uint8 i = 0; i < levelArray.length; ++i) {\\n            if (levelArray[i].level == 1) {\\n                lv1Index = i;\\n            }\\n            if (levelArray[i].level == 2) {\\n                lv2Index = i;\\n            }\\n            if (levelArray[i].level == 3) {\\n                lv3Index = i;\\n            }\\n        }\\n\\n        if (amount >= levelArray[lv3Index].threshold) {\\n            return lv3Index;\\n        } else if (amount >= levelArray[lv2Index].threshold && amount < levelArray[lv3Index].threshold) {\\n            return lv2Index;\\n        } else if (amount >= levelArray[lv1Index].threshold && amount < levelArray[lv2Index].threshold) {\\n            return lv1Index;\\n        } else {\\n            require(false, \\\"Vip: level threshold not reached\\\");\\n        }\\n    }\\n\\n    function getLatestList() external view returns (LatestList[] memory) {\\n        LatestList[] memory list = new LatestList[](mapVip.keys.length);\\n        for (uint256 i = 0; i < mapVip.keys.length; ++i) {\\n            address key = mapVip.keys[i];\\n            list[i] = LatestList(key, mapVip.values[key].level);\\n        }\\n        return list;\\n    }\\n\\n    function getLevel(address target) external view returns (uint8 level) {\\n        return mapVip.values[target].level;\\n    }\\n\\n    function setERC20(address token) public onlyOwner {\\n        ERC20Token = IERC20(token);\\n    }\\n\\n    function setSpender(address spender_) public onlyOwner {\\n        spender = spender_;\\n    }\\n\\n    function setActivityStartTime(uint256 time) external onlyOwner {\\n        activityStartTime = time;\\n    }\\n\\n    function setActivityEndTime(uint256 time) external onlyOwner {\\n        activityEndTime = time;\\n    }\\n\\n    function setCurrentTime(uint256 timestamp_) external onlyOwner {\\n        _timestamp._setCurrentTime(timestamp_);\\n    }\\n\\n    function getCurrentTime() external view returns (uint256) {\\n        return _timestamp._getCurrentTime();\\n    }\\n\\n    function setLevelArray(\\n        uint8 level,\\n        uint256 threshold,\\n        uint256 numberLimit,\\n        uint256 currentNumber\\n    ) external onlyOwner {\\n        _setLevelArray(level, threshold, numberLimit, currentNumber);\\n    }\\n\\n    function setLevelArrayAll(\\n        uint8[] memory levels_,\\n        uint256[] memory thresholds_,\\n        uint256[] memory numberLimits_,\\n        uint256[] memory currentNumbers_\\n    ) external onlyOwner {\\n        uint256 len = levels_.length;\\n        require(\\n            (thresholds_.length == len && numberLimits_.length == len && currentNumbers_.length == len),\\n            \\\"Vip: length of the data is different\\\"\\n        );\\n        for (uint256 i = 0; i < len; ++i) {\\n            _setLevelArray(levels_[i], thresholds_[i], numberLimits_[i], currentNumbers_[i]);\\n        }\\n    }\\n\\n    function _setLevelArray(\\n        uint8 level,\\n        uint256 threshold,\\n        uint256 numberLimit,\\n        uint256 currentNumber\\n    ) internal {\\n        levelArray.push(Level(level, threshold, numberLimit, currentNumber));\\n    }\\n\\n    function cleanLevelArray(uint256 number) external onlyOwner {\\n        _cleanLevelArray(number);\\n    }\\n\\n    function cleanLevelArrayAll() external onlyOwner {\\n        for (uint256 i = 0; i < levelArray.length; ++i) {\\n            levelArray.pop();\\n        }\\n    }\\n\\n    function _cleanLevelArray(uint256 number) private {\\n        uint256 last = levelArray.length - 1;\\n        if (number != last) {\\n            for (uint256 i = number; i < last; ++i) {\\n                levelArray[i] = levelArray[i + 1];\\n            }\\n        }\\n        levelArray.pop();\\n    }\\n\\n    function getLevelArray() external view returns (Level[] memory) {\\n        return levelArray;\\n    }\\n}\\n\",\"keccak256\":\"0xc6e84c463a696b63423598f439f4bddf0a82b3e49ce047498968c799ae7f81e9\",\"license\":\"MIT\"},\"contracts/Lib/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Control the current timestamp for easy debugging\\n * @author Stone (@Vmeta3 Labs)\\n * @dev If it is not in development mode, please do not modify the current time\\n */\\nlibrary Time {\\n    struct Timestamp {\\n        uint256 _current_time;\\n    }\\n\\n    function _getCurrentTime(Timestamp storage timestamp) internal view returns (uint256) {\\n        if (timestamp._current_time > 0) {\\n            return timestamp._current_time;\\n        } else {\\n            return block.timestamp;\\n        }\\n    }\\n\\n    function _setCurrentTime(Timestamp storage timestamp, uint256 time_map) internal {\\n        timestamp._current_time = time_map;\\n    }\\n}\\n\",\"keccak256\":\"0x9bc2a747c41f3366a6a908e8ebb52194b6b3b5ab159a646ea48bb8ae381adae8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161371961004c6000396000818161087c0152818161091201528181610d2d01528181610dc30152610eb501526137196000f3fe6080604052600436106101d85760003560e01c80637a29349d11610102578063c29a6fda11610095578063e8edc81611610064578063e8edc81614610557578063f02aae1314610577578063f2fde38b14610599578063ffaad6a5146105b957600080fd5b8063c29a6fda146104ba578063cb615dce146104da578063ce0d0ca0146104fa578063ded5d2451461053757600080fd5b80639e9f1af2116100d15780639e9f1af214610442578063affe39c114610462578063affed0e014610484578063b6b55f251461049a57600080fd5b80637a29349d1461038f5780637a80760e146103ae578063817c8966146103e65780638b5a21431461042257600080fd5b80633ceb5de51161017a57806352d1902d1161014957806352d1902d1461032d57806355f99da7146103425780635f20e6ba1461035757806362f45f091461036d57600080fd5b80633ceb5de5146102c457806344439209146102e45780634f1ef2861461030457806352a9674b1461031757600080fd5b806329cb924d116101b657806329cb924d1461024b5780632bbdea4e1461026e578063307db0301461028e5780633659cfe6146102a457600080fd5b80630c3515ba146101dd57806314c129ab1461020957806322f8e5661461022b575b600080fd5b3480156101e957600080fd5b506101f2600581565b60405160ff90911681526020015b60405180910390f35b34801561021557600080fd5b50610229610224366004612f6a565b6105d9565b005b34801561023757600080fd5b50610229610246366004612f6a565b61065a565b34801561025757600080fd5b506102606106de565b604051908152602001610200565b34801561027a57600080fd5b50610229610289366004613016565b6106ef565b34801561029a57600080fd5b5061026060a35481565b3480156102b057600080fd5b506102296102bf3660046130c5565b610871565b3480156102d057600080fd5b506102296102df366004613146565b610a03565b3480156102f057600080fd5b506102296102ff3660046130c5565b610c7c565b6102296103123660046132bf565b610d22565b34801561032357600080fd5b5061026060a55481565b34801561033957600080fd5b50610260610ea8565b34801561034e57600080fd5b50610229610f6d565b34801561036357600080fd5b5061026060a45481565b34801561037957600080fd5b50610382611043565b604051610200919061330d565b34801561039b57600080fd5b50609e546101f290610100900460ff1681565b3480156103ba57600080fd5b5060a1546103ce906001600160a01b031681565b6040516001600160a01b039091168152602001610200565b3480156103f257600080fd5b506101f26104013660046130c5565b6001600160a01b0316600090815260a8602052604090206002015460ff1690565b34801561042e57600080fd5b5061022961043d366004613368565b611148565b34801561044e57600080fd5b5061022961045d366004612f6a565b611477565b34801561046e57600080fd5b506104776114f7565b6040516102009190613425565b34801561049057600080fd5b5061026060a05481565b3480156104a657600080fd5b506102296104b5366004612f6a565b61153c565b3480156104c657600080fd5b506102296104d53660046130c5565b611546565b3480156104e657600080fd5b506102296104f536600461345f565b6115ec565b34801561050657600080fd5b5061052a610515366004612f6a565b609f6020526000908152604090205460ff1681565b60405161020091906134ae565b34801561054357600080fd5b50610229610552366004612f6a565b61174b565b34801561056357600080fd5b5060a2546103ce906001600160a01b031681565b34801561058357600080fd5b5061058c6117c7565b60405161020091906134d6565b3480156105a557600080fd5b506102296105b43660046130c5565b61184b565b3480156105c557600080fd5b506102296105d4366004613530565b6119d6565b336000908152609d602052604090205460ff166106555760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b60648201526084015b60405180910390fd5b60a455565b336000908152609d602052604090205460ff166106d15760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b6106db60a6829055565b50565b60006106ea60a66119e0565b905090565b600054610100900460ff161580801561070f5750600054600160ff909116105b806107295750303b158015610729575060005460ff166001145b61079b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161064c565b6000805460ff1916600117905580156107be576000805461ff0019166101001790555b6107c883836119fb565b6107d0611d8d565b604080517f20a714382505729b6977051cb17e2cd66b3149e150240124aa4917fe7f2189906020820152469181019190915230606082015260800160408051601f19818403018152919052805160209091012060a555801561086c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109105760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161064c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661096b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109e75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161064c565b604080516000808252602082019092526106db91839190611e0c565b336000908152609d602052604090205460ff16610a7a5760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b8351835181148015610a8c5750808351145b8015610a985750808251145b610b095760405162461bcd60e51b8152602060048201526024808201527f5669703a206c656e677468206f6620746865206461746120697320646966666560448201527f72656e7400000000000000000000000000000000000000000000000000000000606482015260840161064c565b60005b81811015610c7457610c64868281518110610b2957610b2961355a565b6020026020010151868381518110610b4357610b4361355a565b6020026020010151868481518110610b5d57610b5d61355a565b6020026020010151868581518110610b7757610b7761355a565b60200260200101516040805160808101825260ff9586168152602081019485529081019283526060810191825260aa8054600181018255600091909152905160049091027f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71a810180549290961660ff199092169190911790945591517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71b840155517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71c830155517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71d90910155565b610c6d81613586565b9050610b0c565b505050505050565b336000908152609d602052604090205460ff16610cf35760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b60a2805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610dc15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161064c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e1c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610e985760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161064c565b610ea482826001611e0c565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f485760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161064c565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b336000908152609d602052604090205460ff16610fe45760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b60005b60aa548110156106db5760aa805480611002576110026135a1565b600082815260208120600460001990930192830201805460ff19168155600181018290556002810182905560030155905561103c81613586565b9050610fe7565b60a75460609060009067ffffffffffffffff81111561106457611064612f83565b6040519080825280602002602001820160405280156110a957816020015b60408051808201909152600080825260208201528152602001906001900390816110825790505b50905060005b60a75481101561114257600060a760000182815481106110d1576110d161355a565b60009182526020808320909101546040805180820182526001600160a01b0390921680835280855260a8845293206002015460ff16918101919091528451919250908490849081106111255761112561355a565b6020026020010181905250508061113b90613586565b90506110af565b50919050565b81816000611154612f4c565b336000908152609d602052604090205460ff16156111bf5781611176816135b7565b925050600181609d60006111873390565b6001600160a01b0316815260208101919091526040016000205460ff16600681106111b4576111b461355a565b911515602090920201525b60005b83518160ff1610156112ff5760006111ff858360ff16815181106111e8576111e861355a565b602002602001015187611fbb90919063ffffffff16565b6001600160a01b0381166000908152609d602052604090205490915060ff16806112915760405162461bcd60e51b815260206004820152602b60248201527f536166654f776e61626c655570677261646561626c653a207369676e6572206960448201527f73206e6f74206f776e6572000000000000000000000000000000000000000000606482015260840161064c565b838160ff16600681106112a6576112a661355a565b60200201511515600114156112bc5750506112ed565b6001848260ff16600681106112d3576112d361355a565b91151560209092020152846112e7816135b7565b95505050505b806112f7816135b7565b9150506111c2565b50609e5460ff610100909104811690831610156113845760405162461bcd60e51b815260206004820152602a60248201527f536166654f776e61626c655570677261646561626c653a206e6f20656e6f756760448201527f6820636f6e6669726d7300000000000000000000000000000000000000000000606482015260840161064c565b60a0805490600061139483613586565b90915550506000868152609f602052604081205460ff1660038111156113bc576113bc613498565b1461142f5760405162461bcd60e51b815260206004820152603760248201527f536166654f776e61626c655570677261646561626c653a206f7065726174696f60448201527f6e20776173206e6f74207375626d697474656420796574000000000000000000606482015260840161064c565b6000868152609f6020526040808220805460ff191660011790555187917f33775024b20f211f019e50305c897b2105edc4642384143897ac170fb37f54a191a2505050505050565b336000908152609d602052604090205460ff166114ee5760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b6106db81611fdf565b6114ff612f4c565b6040805160c08101918290529060979060069082845b81546001600160a01b03168152600190910190602001808311611515575050505050905090565b6106db33826120da565b336000908152609d602052604090205460ff166115bd5760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b60a1805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b336000908152609d602052604090205460ff166116635760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b6040805160808101825260ff8087168252602082018681529282018581526060830185815260aa805460018101825560009190915293517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71a6004909502948501805460ff1916919094161790925592517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71b83015591517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71c82015590517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71d909101555b50505050565b336000908152609d602052604090205460ff166117c25760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b60a355565b606060aa805480602002602001604051908101604052809291908181526020016000905b828210156118425760008481526020908190206040805160808101825260048602909201805460ff1683526001808201548486015260028201549284019290925260030154606083015290835290920191016117eb565b50505050905090565b336000908152609d602052604090205460ff166118c25760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b6001600160a01b03811661193e5760405162461bcd60e51b815260206004820152603560248201527f536166654f776e61626c655570677261646561626c653a206e6577206f776e6560448201527f7220697320746865207a65726f20616464726573730000000000000000000000606482015260840161064c565b6001600160a01b0381166000908152609d602052604090205460ff16156119cd5760405162461bcd60e51b815260206004820152603060248201527f536166654f776e61626c655570677261646561626c653a206e6577206f776e6560448201527f7220616c72656164792065786973747300000000000000000000000000000000606482015260840161064c565b6106db8161256d565b610ea482826120da565b8054600090156119ef57505490565b5042919050565b919050565b600054610100900460ff16611a785760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161064c565b815160051015611af05760405162461bcd60e51b815260206004820152603360248201527f536166654f776e61626c655570677261646561626c653a657863656564206d6160448201527f78696d756d206e756d626572206f776e65727300000000000000000000000000606482015260840161064c565b60ff8116611b665760405162461bcd60e51b815260206004820152602c60248201527f536166654f776e61626c655570677261646561626c653a207369676e5265717560448201527f69726564206973207a65726f0000000000000000000000000000000000000000606482015260840161064c565b609e805461ff00191661010060ff84160217905560005b8251811015611d09576000838281518110611b9a57611b9a61355a565b6020908102919091018101516001600160a01b0381166000908152609d90925260409091205490915060ff1615611c395760405162461bcd60e51b815260206004820152602c60248201527f536166654f776e61626c655570677261646561626c653a206f776e657220616c60448201527f7265616479206578697374730000000000000000000000000000000000000000606482015260840161064c565b609e80548291609791600090611c519060ff166135b7565b91906101000a81548160ff021916908360ff160217905560ff1660068110611c7b57611c7b61355a565b0180546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff19909116179055609e549082166000818152609d6020526040808220805460ff191660ff9095169490941790935591519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080611d0181613586565b915050611b7d565b50609e5460ff808216610100909204161115610ea45760405162461bcd60e51b815260206004820152603560248201527f536166654f776e61626c655570677261646561626c653a206f776e657273206c60448201527f657373207468616e207369676e52657175697265640000000000000000000000606482015260840161064c565b600054610100900460ff16611e0a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161064c565b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611e3f5761086c83612619565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e7857600080fd5b505afa925050508015611ea8575060408051601f3d908101601f19168201909252611ea5918101906135d7565b60015b611f1a5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161064c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611faf5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161064c565b5061086c8383836126e4565b6000806000611fca8585612709565b91509150611fd78161274f565b509392505050565b60aa54600090611ff1906001906135f0565b905080821461209457815b818110156120925760aa612011826001613607565b815481106120215761202161355a565b906000526020600020906004020160aa82815481106120425761204261355a565b600091825260209091208254600490920201805460ff191660ff909216919091178155600180830154908201556002808301549082015560039182015491015561208b81613586565b9050611ffc565b505b60aa8054806120a5576120a56135a1565b600082815260208120600460001990930192830201805460ff1916815560018101829055600281018290556003015590555050565b60006120e660a66119e0565b905060a354811161215f5760405162461bcd60e51b815260206004820152602160248201527f5669703a2054686520616374697669747920686173206e6f742073746172746560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161064c565b60a45481106121b05760405162461bcd60e51b815260206004820152601b60248201527f5669703a205468652061637469766974792068617320656e6465640000000000604482015260640161064c565b6001600160a01b038316600090815260a9602052604081205460ff161561238b576001600160a01b038416600090815260a8602090815260408083208151606081018352815480825260018301549482019490945260029091015460ff16918101919091529190612222908690613607565b905062278d0082602001518561223891906135f0565b106122ab5760405162461bcd60e51b815260206004820152602360248201527f5669703a2055706772616465206d7573742062652077697468696e203330206460448201527f6179730000000000000000000000000000000000000000000000000000000000606482015260840161064c565b6122b481612940565b92506122c6826040015160ff16612a61565b83116123145760405162461bcd60e51b815260206004820181905260248201527f5669703a206c6576656c207468726573686f6c64206e6f742072656163686564604482015260640161064c565b80825260aa80548490811061232b5761232b61355a565b600091825260208083206004929092029091015460ff90811660408681019182526001600160a01b038b16855260a88452909320855181559490910151600185015590516002909301805460ff191693909116929092179091555061247b565b61239483612940565b9050604051806060016040528084815260200183815260200160aa83815481106123c0576123c061355a565b6000918252602080832060049092029091015460ff9081169093526001600160a01b03881680835260a882526040808420865181558684015160018281019190915596820151600290910180549190961660ff199182161790955560a99092529082208054909316841790925560a78054938401815590527fb68792697ed876af8b4858b316f5b54d81f6861191ad2950c1fde6c3dc7b3dea909101805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60a15460a2546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529182166024820152604481018690529116906323b872dd90606401602060405180830381600087803b1580156124ec57600080fd5b505af1158015612500573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612524919061361f565b50604080516001600160a01b0386168152602081018590527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c910160405180910390a150505050565b336000818152609d602052604090205460ff1682609782600681106125945761259461355a565b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790558281166000818152609d6020526040808220805460ff19908116909155938716808352818320805490951660ff871617909455517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a3505050565b6001600160a01b0381163b6126965760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161064c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6126ed83612abe565b6000825111806126fa5750805b1561086c576117458383612afe565b6000808251604114156127405760208301516040840151606085015160001a61273487828585612c09565b94509450505050612748565b506000905060025b9250929050565b600081600481111561276357612763613498565b141561276c5750565b600181600481111561278057612780613498565b14156127ce5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161064c565b60028160048111156127e2576127e2613498565b14156128305760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161064c565b600381600481111561284457612844613498565b14156128b85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161064c565b60048160048111156128cc576128cc613498565b14156106db5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161064c565b600061294b82612cf6565b9050600060aa82815481106129625761296261355a565b6000918252602091829020604080516080810182526004909302909101805460ff16835260018101549383019390935260028301549082018190526003909201546060820181905290925010612a205760405162461bcd60e51b815260206004820152602660248201527f5669703a2065786365656420746865206e756d626572206f662070656f706c6560448201527f206c696d69740000000000000000000000000000000000000000000000000000606482015260840161064c565b600160aa8381548110612a3557612a3561355a565b90600052602060002090600402016003016000828254612a559190613607565b90915550919392505050565b6000805b60aa5460ff82161015611142578260aa8260ff1681548110612a8957612a8961355a565b600091825260209091206004909102015460ff161415612aae578060ff169150611142565b612ab7816135b7565b9050612a65565b612ac781612619565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612b7d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161064c565b600080846001600160a01b031684604051612b98919061366d565b600060405180830381855af49150503d8060008114612bd3576040519150601f19603f3d011682016040523d82523d6000602084013e612bd8565b606091505b5091509150612c0082826040518060600160405280602781526020016136bd60279139612f0c565b95945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612c405750600090506003612ced565b8460ff16601b14158015612c5857508460ff16601c14155b15612c695750600090506004612ced565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612cbd573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612ce657600060019250925050612ced565b9150600090505b94509492505050565b60008060008060005b60aa5460ff82161015612dc75760aa8160ff1681548110612d2257612d2261355a565b600091825260209091206004909102015460ff1660011415612d45578060ff1693505b60aa8160ff1681548110612d5b57612d5b61355a565b600091825260209091206004909102015460ff1660021415612d7e578060ff1692505b60aa8160ff1681548110612d9457612d9461355a565b600091825260209091206004909102015460ff1660031415612db7578060ff1691505b612dc0816135b7565b9050612cff565b5060aa8181548110612ddb57612ddb61355a565b9060005260206000209060040201600101548510612dfb57949350505050565b60aa8281548110612e0e57612e0e61355a565b9060005260206000209060040201600101548510158015612e52575060aa8181548110612e3d57612e3d61355a565b90600052602060002090600402016001015485105b15612e5f57509392505050565b60aa8381548110612e7257612e7261355a565b9060005260206000209060040201600101548510158015612eb6575060aa8281548110612ea157612ea161355a565b90600052602060002090600402016001015485105b15612ec45750909392505050565b60405162461bcd60e51b815260206004820181905260248201527f5669703a206c6576656c207468726573686f6c64206e6f742072656163686564604482015260640161064c565b60608315612f1b575081612f45565b825115612f2b5782518084602001fd5b8160405162461bcd60e51b815260040161064c9190613689565b9392505050565b6040518060c001604052806006906020820280368337509192915050565b600060208284031215612f7c57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612fc257612fc2612f83565b604052919050565b600067ffffffffffffffff821115612fe457612fe4612f83565b5060051b60200190565b80356001600160a01b03811681146119f657600080fd5b803560ff811681146119f657600080fd5b6000806040838503121561302957600080fd5b823567ffffffffffffffff81111561304057600080fd5b8301601f8101851361305157600080fd5b8035602061306661306183612fca565b612f99565b82815260059290921b8301810191818101908884111561308557600080fd5b938201935b838510156130aa5761309b85612fee565b8252938201939082019061308a565b95506130b99050868201613005565b93505050509250929050565b6000602082840312156130d757600080fd5b612f4582612fee565b600082601f8301126130f157600080fd5b8135602061310161306183612fca565b82815260059290921b8401810191818101908684111561312057600080fd5b8286015b8481101561313b5780358352918301918301613124565b509695505050505050565b6000806000806080858703121561315c57600080fd5b843567ffffffffffffffff8082111561317457600080fd5b818701915087601f83011261318857600080fd5b8135602061319861306183612fca565b82815260059290921b8401810191818101908b8411156131b757600080fd5b948201945b838610156131dc576131cd86613005565b825294820194908201906131bc565b985050880135925050808211156131f257600080fd5b6131fe888389016130e0565b9450604087013591508082111561321457600080fd5b613220888389016130e0565b9350606087013591508082111561323657600080fd5b50613243878288016130e0565b91505092959194509250565b600082601f83011261326057600080fd5b813567ffffffffffffffff81111561327a5761327a612f83565b61328d6020601f19601f84011601612f99565b8181528460208386010111156132a257600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156132d257600080fd5b6132db83612fee565b9150602083013567ffffffffffffffff8111156132f757600080fd5b6133038582860161324f565b9150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561335b57815180516001600160a01b0316855286015160ff1686850152928401929085019060010161332a565b5091979650505050505050565b6000806040838503121561337b57600080fd5b8235915060208084013567ffffffffffffffff8082111561339b57600080fd5b818601915086601f8301126133af57600080fd5b81356133bd61306182612fca565b81815260059190911b830184019084810190898311156133dc57600080fd5b8585015b83811015613414578035858111156133f85760008081fd5b6134068c89838a010161324f565b8452509186019186016133e0565b508096505050505050509250929050565b60c08101818360005b60068110156134565781516001600160a01b031683526020928301929091019060010161342e565b50505092915050565b6000806000806080858703121561347557600080fd5b61347e85613005565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052602160045260246000fd5b60208101600483106134d057634e487b7160e01b600052602160045260246000fd5b91905290565b602080825282518282018190526000919060409081850190868401855b8281101561335b578151805160ff1685528681015187860152858101518686015260609081015190850152608090930192908501906001016134f3565b6000806040838503121561354357600080fd5b61354c83612fee565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561359a5761359a613570565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600060ff821660ff8114156135ce576135ce613570565b60010192915050565b6000602082840312156135e957600080fd5b5051919050565b60008282101561360257613602613570565b500390565b6000821982111561361a5761361a613570565b500190565b60006020828403121561363157600080fd5b81518015158114612f4557600080fd5b60005b8381101561365c578181015183820152602001613644565b838111156117455750506000910152565b6000825161367f818460208701613641565b9190910192915050565b60208152600082518060208401526136a8816040850160208701613641565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201b15ac7403a7c4d66bc99704097964db18d96884f495794a24ede6b013ba44c164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80637a29349d11610102578063c29a6fda11610095578063e8edc81611610064578063e8edc81614610557578063f02aae1314610577578063f2fde38b14610599578063ffaad6a5146105b957600080fd5b8063c29a6fda146104ba578063cb615dce146104da578063ce0d0ca0146104fa578063ded5d2451461053757600080fd5b80639e9f1af2116100d15780639e9f1af214610442578063affe39c114610462578063affed0e014610484578063b6b55f251461049a57600080fd5b80637a29349d1461038f5780637a80760e146103ae578063817c8966146103e65780638b5a21431461042257600080fd5b80633ceb5de51161017a57806352d1902d1161014957806352d1902d1461032d57806355f99da7146103425780635f20e6ba1461035757806362f45f091461036d57600080fd5b80633ceb5de5146102c457806344439209146102e45780634f1ef2861461030457806352a9674b1461031757600080fd5b806329cb924d116101b657806329cb924d1461024b5780632bbdea4e1461026e578063307db0301461028e5780633659cfe6146102a457600080fd5b80630c3515ba146101dd57806314c129ab1461020957806322f8e5661461022b575b600080fd5b3480156101e957600080fd5b506101f2600581565b60405160ff90911681526020015b60405180910390f35b34801561021557600080fd5b50610229610224366004612f6a565b6105d9565b005b34801561023757600080fd5b50610229610246366004612f6a565b61065a565b34801561025757600080fd5b506102606106de565b604051908152602001610200565b34801561027a57600080fd5b50610229610289366004613016565b6106ef565b34801561029a57600080fd5b5061026060a35481565b3480156102b057600080fd5b506102296102bf3660046130c5565b610871565b3480156102d057600080fd5b506102296102df366004613146565b610a03565b3480156102f057600080fd5b506102296102ff3660046130c5565b610c7c565b6102296103123660046132bf565b610d22565b34801561032357600080fd5b5061026060a55481565b34801561033957600080fd5b50610260610ea8565b34801561034e57600080fd5b50610229610f6d565b34801561036357600080fd5b5061026060a45481565b34801561037957600080fd5b50610382611043565b604051610200919061330d565b34801561039b57600080fd5b50609e546101f290610100900460ff1681565b3480156103ba57600080fd5b5060a1546103ce906001600160a01b031681565b6040516001600160a01b039091168152602001610200565b3480156103f257600080fd5b506101f26104013660046130c5565b6001600160a01b0316600090815260a8602052604090206002015460ff1690565b34801561042e57600080fd5b5061022961043d366004613368565b611148565b34801561044e57600080fd5b5061022961045d366004612f6a565b611477565b34801561046e57600080fd5b506104776114f7565b6040516102009190613425565b34801561049057600080fd5b5061026060a05481565b3480156104a657600080fd5b506102296104b5366004612f6a565b61153c565b3480156104c657600080fd5b506102296104d53660046130c5565b611546565b3480156104e657600080fd5b506102296104f536600461345f565b6115ec565b34801561050657600080fd5b5061052a610515366004612f6a565b609f6020526000908152604090205460ff1681565b60405161020091906134ae565b34801561054357600080fd5b50610229610552366004612f6a565b61174b565b34801561056357600080fd5b5060a2546103ce906001600160a01b031681565b34801561058357600080fd5b5061058c6117c7565b60405161020091906134d6565b3480156105a557600080fd5b506102296105b43660046130c5565b61184b565b3480156105c557600080fd5b506102296105d4366004613530565b6119d6565b336000908152609d602052604090205460ff166106555760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b60648201526084015b60405180910390fd5b60a455565b336000908152609d602052604090205460ff166106d15760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b6106db60a6829055565b50565b60006106ea60a66119e0565b905090565b600054610100900460ff161580801561070f5750600054600160ff909116105b806107295750303b158015610729575060005460ff166001145b61079b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161064c565b6000805460ff1916600117905580156107be576000805461ff0019166101001790555b6107c883836119fb565b6107d0611d8d565b604080517f20a714382505729b6977051cb17e2cd66b3149e150240124aa4917fe7f2189906020820152469181019190915230606082015260800160408051601f19818403018152919052805160209091012060a555801561086c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109105760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161064c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661096b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109e75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161064c565b604080516000808252602082019092526106db91839190611e0c565b336000908152609d602052604090205460ff16610a7a5760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b8351835181148015610a8c5750808351145b8015610a985750808251145b610b095760405162461bcd60e51b8152602060048201526024808201527f5669703a206c656e677468206f6620746865206461746120697320646966666560448201527f72656e7400000000000000000000000000000000000000000000000000000000606482015260840161064c565b60005b81811015610c7457610c64868281518110610b2957610b2961355a565b6020026020010151868381518110610b4357610b4361355a565b6020026020010151868481518110610b5d57610b5d61355a565b6020026020010151868581518110610b7757610b7761355a565b60200260200101516040805160808101825260ff9586168152602081019485529081019283526060810191825260aa8054600181018255600091909152905160049091027f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71a810180549290961660ff199092169190911790945591517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71b840155517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71c830155517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71d90910155565b610c6d81613586565b9050610b0c565b505050505050565b336000908152609d602052604090205460ff16610cf35760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b60a2805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610dc15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161064c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e1c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610e985760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161064c565b610ea482826001611e0c565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f485760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161064c565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b336000908152609d602052604090205460ff16610fe45760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b60005b60aa548110156106db5760aa805480611002576110026135a1565b600082815260208120600460001990930192830201805460ff19168155600181018290556002810182905560030155905561103c81613586565b9050610fe7565b60a75460609060009067ffffffffffffffff81111561106457611064612f83565b6040519080825280602002602001820160405280156110a957816020015b60408051808201909152600080825260208201528152602001906001900390816110825790505b50905060005b60a75481101561114257600060a760000182815481106110d1576110d161355a565b60009182526020808320909101546040805180820182526001600160a01b0390921680835280855260a8845293206002015460ff16918101919091528451919250908490849081106111255761112561355a565b6020026020010181905250508061113b90613586565b90506110af565b50919050565b81816000611154612f4c565b336000908152609d602052604090205460ff16156111bf5781611176816135b7565b925050600181609d60006111873390565b6001600160a01b0316815260208101919091526040016000205460ff16600681106111b4576111b461355a565b911515602090920201525b60005b83518160ff1610156112ff5760006111ff858360ff16815181106111e8576111e861355a565b602002602001015187611fbb90919063ffffffff16565b6001600160a01b0381166000908152609d602052604090205490915060ff16806112915760405162461bcd60e51b815260206004820152602b60248201527f536166654f776e61626c655570677261646561626c653a207369676e6572206960448201527f73206e6f74206f776e6572000000000000000000000000000000000000000000606482015260840161064c565b838160ff16600681106112a6576112a661355a565b60200201511515600114156112bc5750506112ed565b6001848260ff16600681106112d3576112d361355a565b91151560209092020152846112e7816135b7565b95505050505b806112f7816135b7565b9150506111c2565b50609e5460ff610100909104811690831610156113845760405162461bcd60e51b815260206004820152602a60248201527f536166654f776e61626c655570677261646561626c653a206e6f20656e6f756760448201527f6820636f6e6669726d7300000000000000000000000000000000000000000000606482015260840161064c565b60a0805490600061139483613586565b90915550506000868152609f602052604081205460ff1660038111156113bc576113bc613498565b1461142f5760405162461bcd60e51b815260206004820152603760248201527f536166654f776e61626c655570677261646561626c653a206f7065726174696f60448201527f6e20776173206e6f74207375626d697474656420796574000000000000000000606482015260840161064c565b6000868152609f6020526040808220805460ff191660011790555187917f33775024b20f211f019e50305c897b2105edc4642384143897ac170fb37f54a191a2505050505050565b336000908152609d602052604090205460ff166114ee5760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b6106db81611fdf565b6114ff612f4c565b6040805160c08101918290529060979060069082845b81546001600160a01b03168152600190910190602001808311611515575050505050905090565b6106db33826120da565b336000908152609d602052604090205460ff166115bd5760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b60a1805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b336000908152609d602052604090205460ff166116635760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b6040805160808101825260ff8087168252602082018681529282018581526060830185815260aa805460018101825560009190915293517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71a6004909502948501805460ff1916919094161790925592517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71b83015591517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71c82015590517f550d3de95be0bd28a79c3eb4ea7f05692c60b0602e48b49461e703379b08a71d909101555b50505050565b336000908152609d602052604090205460ff166117c25760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b60a355565b606060aa805480602002602001604051908101604052809291908181526020016000905b828210156118425760008481526020908190206040805160808101825260048602909201805460ff1683526001808201548486015260028201549284019290925260030154606083015290835290920191016117eb565b50505050905090565b336000908152609d602052604090205460ff166118c25760405162461bcd60e51b815260206004820152602f60248201527f536166654f776e61626c655570677261646561626c653a2063616c6c6572206960448201526e39903737ba103a34329037bbb732b960891b606482015260840161064c565b6001600160a01b03811661193e5760405162461bcd60e51b815260206004820152603560248201527f536166654f776e61626c655570677261646561626c653a206e6577206f776e6560448201527f7220697320746865207a65726f20616464726573730000000000000000000000606482015260840161064c565b6001600160a01b0381166000908152609d602052604090205460ff16156119cd5760405162461bcd60e51b815260206004820152603060248201527f536166654f776e61626c655570677261646561626c653a206e6577206f776e6560448201527f7220616c72656164792065786973747300000000000000000000000000000000606482015260840161064c565b6106db8161256d565b610ea482826120da565b8054600090156119ef57505490565b5042919050565b919050565b600054610100900460ff16611a785760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161064c565b815160051015611af05760405162461bcd60e51b815260206004820152603360248201527f536166654f776e61626c655570677261646561626c653a657863656564206d6160448201527f78696d756d206e756d626572206f776e65727300000000000000000000000000606482015260840161064c565b60ff8116611b665760405162461bcd60e51b815260206004820152602c60248201527f536166654f776e61626c655570677261646561626c653a207369676e5265717560448201527f69726564206973207a65726f0000000000000000000000000000000000000000606482015260840161064c565b609e805461ff00191661010060ff84160217905560005b8251811015611d09576000838281518110611b9a57611b9a61355a565b6020908102919091018101516001600160a01b0381166000908152609d90925260409091205490915060ff1615611c395760405162461bcd60e51b815260206004820152602c60248201527f536166654f776e61626c655570677261646561626c653a206f776e657220616c60448201527f7265616479206578697374730000000000000000000000000000000000000000606482015260840161064c565b609e80548291609791600090611c519060ff166135b7565b91906101000a81548160ff021916908360ff160217905560ff1660068110611c7b57611c7b61355a565b0180546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff19909116179055609e549082166000818152609d6020526040808220805460ff191660ff9095169490941790935591519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080611d0181613586565b915050611b7d565b50609e5460ff808216610100909204161115610ea45760405162461bcd60e51b815260206004820152603560248201527f536166654f776e61626c655570677261646561626c653a206f776e657273206c60448201527f657373207468616e207369676e52657175697265640000000000000000000000606482015260840161064c565b600054610100900460ff16611e0a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161064c565b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611e3f5761086c83612619565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e7857600080fd5b505afa925050508015611ea8575060408051601f3d908101601f19168201909252611ea5918101906135d7565b60015b611f1a5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161064c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611faf5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161064c565b5061086c8383836126e4565b6000806000611fca8585612709565b91509150611fd78161274f565b509392505050565b60aa54600090611ff1906001906135f0565b905080821461209457815b818110156120925760aa612011826001613607565b815481106120215761202161355a565b906000526020600020906004020160aa82815481106120425761204261355a565b600091825260209091208254600490920201805460ff191660ff909216919091178155600180830154908201556002808301549082015560039182015491015561208b81613586565b9050611ffc565b505b60aa8054806120a5576120a56135a1565b600082815260208120600460001990930192830201805460ff1916815560018101829055600281018290556003015590555050565b60006120e660a66119e0565b905060a354811161215f5760405162461bcd60e51b815260206004820152602160248201527f5669703a2054686520616374697669747920686173206e6f742073746172746560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161064c565b60a45481106121b05760405162461bcd60e51b815260206004820152601b60248201527f5669703a205468652061637469766974792068617320656e6465640000000000604482015260640161064c565b6001600160a01b038316600090815260a9602052604081205460ff161561238b576001600160a01b038416600090815260a8602090815260408083208151606081018352815480825260018301549482019490945260029091015460ff16918101919091529190612222908690613607565b905062278d0082602001518561223891906135f0565b106122ab5760405162461bcd60e51b815260206004820152602360248201527f5669703a2055706772616465206d7573742062652077697468696e203330206460448201527f6179730000000000000000000000000000000000000000000000000000000000606482015260840161064c565b6122b481612940565b92506122c6826040015160ff16612a61565b83116123145760405162461bcd60e51b815260206004820181905260248201527f5669703a206c6576656c207468726573686f6c64206e6f742072656163686564604482015260640161064c565b80825260aa80548490811061232b5761232b61355a565b600091825260208083206004929092029091015460ff90811660408681019182526001600160a01b038b16855260a88452909320855181559490910151600185015590516002909301805460ff191693909116929092179091555061247b565b61239483612940565b9050604051806060016040528084815260200183815260200160aa83815481106123c0576123c061355a565b6000918252602080832060049092029091015460ff9081169093526001600160a01b03881680835260a882526040808420865181558684015160018281019190915596820151600290910180549190961660ff199182161790955560a99092529082208054909316841790925560a78054938401815590527fb68792697ed876af8b4858b316f5b54d81f6861191ad2950c1fde6c3dc7b3dea909101805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60a15460a2546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529182166024820152604481018690529116906323b872dd90606401602060405180830381600087803b1580156124ec57600080fd5b505af1158015612500573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612524919061361f565b50604080516001600160a01b0386168152602081018590527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c910160405180910390a150505050565b336000818152609d602052604090205460ff1682609782600681106125945761259461355a565b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790558281166000818152609d6020526040808220805460ff19908116909155938716808352818320805490951660ff871617909455517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a3505050565b6001600160a01b0381163b6126965760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161064c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6126ed83612abe565b6000825111806126fa5750805b1561086c576117458383612afe565b6000808251604114156127405760208301516040840151606085015160001a61273487828585612c09565b94509450505050612748565b506000905060025b9250929050565b600081600481111561276357612763613498565b141561276c5750565b600181600481111561278057612780613498565b14156127ce5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161064c565b60028160048111156127e2576127e2613498565b14156128305760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161064c565b600381600481111561284457612844613498565b14156128b85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161064c565b60048160048111156128cc576128cc613498565b14156106db5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161064c565b600061294b82612cf6565b9050600060aa82815481106129625761296261355a565b6000918252602091829020604080516080810182526004909302909101805460ff16835260018101549383019390935260028301549082018190526003909201546060820181905290925010612a205760405162461bcd60e51b815260206004820152602660248201527f5669703a2065786365656420746865206e756d626572206f662070656f706c6560448201527f206c696d69740000000000000000000000000000000000000000000000000000606482015260840161064c565b600160aa8381548110612a3557612a3561355a565b90600052602060002090600402016003016000828254612a559190613607565b90915550919392505050565b6000805b60aa5460ff82161015611142578260aa8260ff1681548110612a8957612a8961355a565b600091825260209091206004909102015460ff161415612aae578060ff169150611142565b612ab7816135b7565b9050612a65565b612ac781612619565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612b7d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161064c565b600080846001600160a01b031684604051612b98919061366d565b600060405180830381855af49150503d8060008114612bd3576040519150601f19603f3d011682016040523d82523d6000602084013e612bd8565b606091505b5091509150612c0082826040518060600160405280602781526020016136bd60279139612f0c565b95945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612c405750600090506003612ced565b8460ff16601b14158015612c5857508460ff16601c14155b15612c695750600090506004612ced565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612cbd573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612ce657600060019250925050612ced565b9150600090505b94509492505050565b60008060008060005b60aa5460ff82161015612dc75760aa8160ff1681548110612d2257612d2261355a565b600091825260209091206004909102015460ff1660011415612d45578060ff1693505b60aa8160ff1681548110612d5b57612d5b61355a565b600091825260209091206004909102015460ff1660021415612d7e578060ff1692505b60aa8160ff1681548110612d9457612d9461355a565b600091825260209091206004909102015460ff1660031415612db7578060ff1691505b612dc0816135b7565b9050612cff565b5060aa8181548110612ddb57612ddb61355a565b9060005260206000209060040201600101548510612dfb57949350505050565b60aa8281548110612e0e57612e0e61355a565b9060005260206000209060040201600101548510158015612e52575060aa8181548110612e3d57612e3d61355a565b90600052602060002090600402016001015485105b15612e5f57509392505050565b60aa8381548110612e7257612e7261355a565b9060005260206000209060040201600101548510158015612eb6575060aa8281548110612ea157612ea161355a565b90600052602060002090600402016001015485105b15612ec45750909392505050565b60405162461bcd60e51b815260206004820181905260248201527f5669703a206c6576656c207468726573686f6c64206e6f742072656163686564604482015260640161064c565b60608315612f1b575081612f45565b825115612f2b5782518084602001fd5b8160405162461bcd60e51b815260040161064c9190613689565b9392505050565b6040518060c001604052806006906020820280368337509192915050565b600060208284031215612f7c57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612fc257612fc2612f83565b604052919050565b600067ffffffffffffffff821115612fe457612fe4612f83565b5060051b60200190565b80356001600160a01b03811681146119f657600080fd5b803560ff811681146119f657600080fd5b6000806040838503121561302957600080fd5b823567ffffffffffffffff81111561304057600080fd5b8301601f8101851361305157600080fd5b8035602061306661306183612fca565b612f99565b82815260059290921b8301810191818101908884111561308557600080fd5b938201935b838510156130aa5761309b85612fee565b8252938201939082019061308a565b95506130b99050868201613005565b93505050509250929050565b6000602082840312156130d757600080fd5b612f4582612fee565b600082601f8301126130f157600080fd5b8135602061310161306183612fca565b82815260059290921b8401810191818101908684111561312057600080fd5b8286015b8481101561313b5780358352918301918301613124565b509695505050505050565b6000806000806080858703121561315c57600080fd5b843567ffffffffffffffff8082111561317457600080fd5b818701915087601f83011261318857600080fd5b8135602061319861306183612fca565b82815260059290921b8401810191818101908b8411156131b757600080fd5b948201945b838610156131dc576131cd86613005565b825294820194908201906131bc565b985050880135925050808211156131f257600080fd5b6131fe888389016130e0565b9450604087013591508082111561321457600080fd5b613220888389016130e0565b9350606087013591508082111561323657600080fd5b50613243878288016130e0565b91505092959194509250565b600082601f83011261326057600080fd5b813567ffffffffffffffff81111561327a5761327a612f83565b61328d6020601f19601f84011601612f99565b8181528460208386010111156132a257600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156132d257600080fd5b6132db83612fee565b9150602083013567ffffffffffffffff8111156132f757600080fd5b6133038582860161324f565b9150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561335b57815180516001600160a01b0316855286015160ff1686850152928401929085019060010161332a565b5091979650505050505050565b6000806040838503121561337b57600080fd5b8235915060208084013567ffffffffffffffff8082111561339b57600080fd5b818601915086601f8301126133af57600080fd5b81356133bd61306182612fca565b81815260059190911b830184019084810190898311156133dc57600080fd5b8585015b83811015613414578035858111156133f85760008081fd5b6134068c89838a010161324f565b8452509186019186016133e0565b508096505050505050509250929050565b60c08101818360005b60068110156134565781516001600160a01b031683526020928301929091019060010161342e565b50505092915050565b6000806000806080858703121561347557600080fd5b61347e85613005565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052602160045260246000fd5b60208101600483106134d057634e487b7160e01b600052602160045260246000fd5b91905290565b602080825282518282018190526000919060409081850190868401855b8281101561335b578151805160ff1685528681015187860152858101518686015260609081015190850152608090930192908501906001016134f3565b6000806040838503121561354357600080fd5b61354c83612fee565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561359a5761359a613570565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600060ff821660ff8114156135ce576135ce613570565b60010192915050565b6000602082840312156135e957600080fd5b5051919050565b60008282101561360257613602613570565b500390565b6000821982111561361a5761361a613570565b500190565b60006020828403121561363157600080fd5b81518015158114612f4557600080fd5b60005b8381101561365c578181015183820152602001613644565b838111156117455750506000910152565b6000825161367f818460208701613641565b9190910192915050565b60208152600082518060208401526136a8816040850160208701613641565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201b15ac7403a7c4d66bc99704097964db18d96884f495794a24ede6b013ba44c164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 395,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 398,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 377,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 674,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 959,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1734,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "_owners",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_address)6_storage"
      },
      {
        "astId": 1738,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "_ownersIndex",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 1740,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "_numOwners",
        "offset": 0,
        "slot": "158",
        "type": "t_uint8"
      },
      {
        "astId": 1745,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "signRequired",
        "offset": 1,
        "slot": "158",
        "type": "t_uint8"
      },
      {
        "astId": 1750,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "operationsStatus",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_bytes32,t_enum(OpStatus)1730)"
      },
      {
        "astId": 1752,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "nonce",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 2127,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "ERC20Token",
        "offset": 0,
        "slot": "161",
        "type": "t_contract(IERC20)1098"
      },
      {
        "astId": 2129,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "spender",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 2131,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "activityStartTime",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 2133,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "activityEndTime",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 2138,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "DOMAIN",
        "offset": 0,
        "slot": "165",
        "type": "t_bytes32"
      },
      {
        "astId": 2145,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "_timestamp",
        "offset": 0,
        "slot": "166",
        "type": "t_struct(Timestamp)2956_storage"
      },
      {
        "astId": 2168,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "mapVip",
        "offset": 0,
        "slot": "167",
        "type": "t_struct(MapVip)2165_storage"
      },
      {
        "astId": 2181,
        "contract": "contracts/Investment/Vip.sol:Vip",
        "label": "levelArray",
        "offset": 0,
        "slot": "170",
        "type": "t_array(t_struct(Level)2177_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)6_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Level)2177_storage)dyn_storage": {
        "base": "t_struct(Level)2177_storage",
        "encoding": "dynamic_array",
        "label": "struct Vip.Level[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1098": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(OpStatus)1730": {
        "encoding": "inplace",
        "label": "enum SafeOwnableUpgradeable.OpStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(VipInfo)2152_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vip.VipInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(VipInfo)2152_storage"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_bytes32,t_enum(OpStatus)1730)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum SafeOwnableUpgradeable.OpStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(OpStatus)1730"
      },
      "t_struct(Level)2177_storage": {
        "encoding": "inplace",
        "label": "struct Vip.Level",
        "members": [
          {
            "astId": 2170,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2172,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "threshold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2174,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "numberLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2176,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "currentNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(MapVip)2165_storage": {
        "encoding": "inplace",
        "label": "struct Vip.MapVip",
        "members": [
          {
            "astId": 2155,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2160,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(VipInfo)2152_storage)"
          },
          {
            "astId": 2164,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "inserted",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Timestamp)2956_storage": {
        "encoding": "inplace",
        "label": "struct Time.Timestamp",
        "members": [
          {
            "astId": 2955,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "_current_time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VipInfo)2152_storage": {
        "encoding": "inplace",
        "label": "struct Vip.VipInfo",
        "members": [
          {
            "astId": 2147,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2149,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2151,
            "contract": "contracts/Investment/Vip.sol:Vip",
            "label": "level",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
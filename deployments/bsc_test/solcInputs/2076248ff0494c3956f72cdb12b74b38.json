{
  "language": "Solidity",
  "sources": {
    "contracts/PrivateSale/PrivateSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport {SafeOwnable} from \"../Abstract/SafeOwnable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../Library/SafeCast.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ninterface IERC20 {\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract PrivateSale is SafeOwnable, ReentrancyGuard {\n    /*\n     * library\n     */\n    using SafeCast for uint256;\n\n    /*\n     * constant\n     */\n    uint64 public constant MONTH = 60 * 60 * 24 * 30;\n\n    /*\n     * events\n     */\n    event SaleCreated(address from, uint256 indexed saleNumber, uint256 limitAmount, uint256 price);\n    event BuyVM3(\n        address indexed from,\n        uint256 indexed saleNumber,\n        address paymentToken,\n        uint256 amount,\n        uint256 totalVM3\n    );\n    event WithdrawVM3(address indexed from, uint256 indexed saleNumber, uint256 amount);\n    event SetWhiteList(uint256 indexed saleNumber, address[] users, bool added);\n\n    /*\n     * custom struct\n     */\n    struct SaleInfo {\n        uint256 number;\n        // release paused or not\n        bool paused;\n        uint256 limitAmount;\n        uint256 soldAmount;\n        uint256 price; // USD, decimal is 18\n        uint64 startTime;\n        uint64 endTime;\n        uint64 releaseStartTime;\n        uint32 releaseTotalMonths;\n        // who can buy this vm3 sale\n        mapping(address => bool) whiteList;\n        // max/min sell vm3 amount for everyone\n        uint256 maxBuy;\n        uint256 minBuy;\n    }\n    struct AssetInfo {\n        uint256 saleNumber; // which sale  user buy\n        // release puased or not\n        bool paused;\n        uint256 amount;\n        uint256 amountWithdrawn;\n        uint64 latestWithdrawTime;\n        uint32 withdrawnMonths;\n        uint32 releaseTotalMonths;\n    }\n\n    /*\n     * storage\n     */\n    address public VM3;\n    bytes32 public DOMAIN;\n    // BNB（0x0000000000000000000000000000000000000000）\n    // USDT（0x55d398326f99059fF775485246999027B3197955）\n    // BUSD（0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56）\n    // WBNB（0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c）\n    // ETH（0x2170Ed0880ac9A755fd29B2688956BD959F933F8）\n    mapping(address => bool) public paymentTokenMap;\n    mapping(uint256 => SaleInfo) public saleInfoMap;\n    uint256[] public saleNumberList;\n    //  user=>saleNumber=>AssetInfo\n    mapping(address => mapping(uint256 => AssetInfo)) public userAssetInfos;\n    bool public enableWhiteList = true;\n\n    constructor(\n        address[] memory owners,\n        uint8 signRequired,\n        address vm3,\n        address usdt,\n        address busd\n    ) SafeOwnable(owners, signRequired) {\n        DOMAIN = keccak256(\n            abi.encode(keccak256(\"Domain(uint256 chainId,address verifyingContract)\"), block.chainid, address(this))\n        );\n\n        VM3 = vm3;\n\n        //initialize payment token\n        paymentTokenMap[usdt] = true;\n        paymentTokenMap[busd] = true;\n    }\n\n    modifier onlyAssetExist(address user, uint256 saleNumber) {\n        require(userAssetInfos[user][saleNumber].saleNumber > 0, \"PrivateSale: Asset is not exist\");\n        _;\n    }\n    modifier onlySaleExist(uint256 saleNumber) {\n        require(saleInfoMap[saleNumber].number > 0, \"PrivateSale: Sale is not exist\");\n        _;\n    }\n    modifier onlySupportedPaymentToken(address paymentToken) {\n        require(paymentTokenMap[paymentToken], \"PrivateSale:PaymentToken is not supported\");\n        _;\n    }\n    modifier onlySaleInProgress(uint256 saleNumber) {\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\n        require(\n            saleInfo.startTime > block.timestamp && saleInfo.endTime < block.timestamp,\n            \"PrivateSale: Sale is not in progress\"\n        );\n        _;\n    }\n    modifier onlyInWhiteList(uint256 saleNumber) {\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\n        require(saleInfo.whiteList[msg.sender] || !enableWhiteList, \"PrivateSale:user not in whiteList\");\n        _;\n    }\n    modifier onlySaleNotPuased(uint256 saleNumber) {\n        require(!saleInfoMap[saleNumber].paused, \"PrivateSale:sale paused\");\n        _;\n    }\n    modifier onlyUserReleaseNotPaused(address user, uint256 saleNumber) {\n        require(!userAssetInfos[user][saleNumber].paused, \"PrivateSale:user asset paused\");\n        _;\n    }\n\n    function createSale(\n        uint256 saleNumber,\n        uint256 limitAmount,\n        uint256 price,\n        uint256 maxBuy,\n        uint256 minBuy,\n        uint64[3] memory times, // startTime, endTime, releaseStartTime\n        uint32 releaseTotalMonths,\n        bytes[] memory sigs\n    )\n        external\n        onlyMultipleOwner(\n            _hashToSign(\n                keccak256(\n                    abi.encodePacked(\n                        DOMAIN,\n                        keccak256(\n                            \"createSale(uint256 saleNumber,uint256 limitAmount,uint256 price,uint64 startTime,uint64 endTime,uint256 maxBuy,uint256 minBuy,uint64 releaseStartTime,uint32 releaseTotalMonths)\"\n                        ),\n                        saleNumber,\n                        limitAmount,\n                        price,\n                        times[0],\n                        times[1],\n                        maxBuy,\n                        minBuy,\n                        times[2],\n                        releaseTotalMonths,\n                        nonce\n                    )\n                )\n            ),\n            sigs\n        )\n    {\n        require(saleNumber > 0 && saleInfoMap[saleNumber].number == 0);\n\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\n        saleInfo.number = saleNumber;\n        saleInfo.limitAmount = limitAmount;\n        saleInfo.price = price;\n        saleInfo.maxBuy = maxBuy;\n        saleInfo.minBuy = minBuy;\n        saleInfo.startTime = times[0];\n        saleInfo.endTime = times[1];\n        saleInfo.releaseStartTime = times[2];\n        saleInfo.releaseTotalMonths = releaseTotalMonths;\n\n        saleNumberList.push(saleNumber);\n        emit SaleCreated(msg.sender, saleNumber, limitAmount, price);\n    }\n\n    ///@dev buy VM3\n    ///@param saleNumber number of sale\n    ///@param paymentToken which token user want to pay\n    ///@param amount amount of token you pay to buy VM3\n    function buy(\n        uint256 saleNumber,\n        address paymentToken,\n        uint256 amount\n    )\n        external\n        payable\n        nonReentrant\n        onlySaleExist(saleNumber)\n        onlyInWhiteList(saleNumber)\n        onlySaleInProgress(saleNumber)\n        onlySupportedPaymentToken(paymentToken)\n        onlySaleNotPuased(saleNumber)\n    {\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\n        if (paymentToken == address(0)) {\n            amount = msg.value;\n        } else {\n            IERC20(paymentToken).transferFrom(msg.sender, address(this), amount);\n        }\n\n        uint256 gotVM3 = _canGotVM3(paymentToken, amount, saleInfo.price);\n        require(gotVM3 + saleInfo.soldAmount < saleInfo.limitAmount, \"PrivateSale: Exceed sale limit\");\n        require(gotVM3 > saleInfo.minBuy);\n        saleInfo.soldAmount += gotVM3;\n\n        //modify user asset\n        AssetInfo storage assetInfo = userAssetInfos[msg.sender][saleNumber];\n        if (assetInfo.saleNumber == 0) {\n            assetInfo.saleNumber = saleNumber;\n            assetInfo.releaseTotalMonths = saleInfo.releaseTotalMonths;\n        }\n        assetInfo.amount += gotVM3;\n        require(assetInfo.amount < saleInfo.maxBuy);\n        emit BuyVM3(msg.sender, saleNumber, paymentToken, amount, gotVM3);\n    }\n\n    ///@dev user take out VM3\n    function withdrawVM3(uint64[] memory saleNumbers) external nonReentrant {\n        for (uint64 i = 0; i < saleNumbers.length; i++) {\n            _witdrawVM3(saleNumbers[i], msg.sender);\n        }\n    }\n\n    function withdrawVM3(uint64[] memory saleNumbers, address recipient) external nonReentrant {\n        for (uint64 i = 0; i < saleNumbers.length; i++) {\n            _witdrawVM3(saleNumbers[i], recipient);\n        }\n    }\n\n    ///@dev manager take out VM3\n    function withdrawAllSaleVM3(\n        bytes[] memory sigs\n    )\n        external\n        onlyMultipleOwner(\n            _hashToSign(keccak256(abi.encodePacked(DOMAIN, keccak256(\"withdrawAllSaleVM3()\"), nonce))),\n            sigs\n        )\n    {\n        uint256 amount = IERC20(VM3).balanceOf(address(this));\n        IERC20(VM3).transferFrom(address(this), msg.sender, amount);\n    }\n\n    ///@dev manager take out sale volume\n    function withdrawSaleVolume(\n        address receipt,\n        address tokenAddress,\n        bytes[] memory sigs\n    )\n        external\n        onlyMultipleOwner(\n            _hashToSign(\n                keccak256(\n                    abi.encodePacked(DOMAIN, keccak256(\"withdrawSaleVolume(address receipt,address token)\"), nonce)\n                )\n            ),\n            sigs\n        )\n    {\n        if (tokenAddress == address(0)) {\n            (bool sent, ) = receipt.call{value: address(this).balance}(\"\");\n            require(sent);\n            return;\n        }\n\n        IERC20 token = IERC20(tokenAddress);\n        token.transferFrom(address(this), receipt, token.balanceOf(address(this)));\n    }\n\n    //settings\n    function setSaleReleaseStatus(\n        uint256 saleNumber,\n        bool paused, // true pused; false not paused\n        bytes[] memory sigs\n    )\n        external\n        onlyMultipleOwner(\n            _hashToSign(\n                keccak256(\n                    abi.encodePacked(\n                        DOMAIN,\n                        keccak256(\"setSaleReleaseStatus(uint256 saleNumber,bool paused)\"),\n                        saleNumber,\n                        paused,\n                        nonce\n                    )\n                )\n            ),\n            sigs\n        )\n        onlySaleExist(saleNumber)\n    {\n        saleInfoMap[saleNumber].paused = paused;\n    }\n\n    function setUserReleaseStatus(\n        uint256 saleNumber,\n        bool paused // true pused; false not paused\n    ) external onlyAssetExist(msg.sender, saleNumber) {\n        userAssetInfos[msg.sender][saleNumber].paused = paused;\n    }\n\n    function setWhiteList(\n        uint256 saleNumber,\n        address[] memory users,\n        bool added, // true add; false remove\n        bytes[] memory sigs\n    )\n        external\n        onlySaleExist(saleNumber)\n        onlyMultipleOwner(\n            _hashToSign(\n                keccak256(\n                    abi.encodePacked(\n                        DOMAIN,\n                        keccak256(\"setWhiteList(uint256 saleNumber,address[] users,bool added)\"),\n                        saleNumber,\n                        users,\n                        added,\n                        nonce\n                    )\n                )\n            ),\n            sigs\n        )\n    {\n        SaleInfo storage saleInfo = saleInfoMap[saleNumber];\n        for (uint256 i = 0; i < users.length; i++) {\n            saleInfo.whiteList[users[i]] = added;\n        }\n        emit SetWhiteList(saleNumber, users, added);\n    }\n\n    function setUserReleaseMonths(\n        address user,\n        uint256 saleNumber,\n        uint32 releaseTotalMonths,\n        bytes[] memory sigs\n    )\n        external\n        onlyMultipleOwner(\n            _hashToSign(\n                keccak256(\n                    abi.encodePacked(\n                        DOMAIN,\n                        keccak256(\"setUserReleaseMonths(address user,uint256 saleNumber,uint32 releaseTotalMonths)\"),\n                        user,\n                        saleNumber,\n                        releaseTotalMonths,\n                        nonce\n                    )\n                )\n            ),\n            sigs\n        )\n        onlyAssetExist(user, saleNumber)\n    {\n        require(userAssetInfos[user][saleNumber].withdrawnMonths < releaseTotalMonths);\n        userAssetInfos[user][saleNumber].releaseTotalMonths = releaseTotalMonths;\n    }\n\n    function setEnableWhiteList(\n        bool enable,\n        bytes[] memory sigs\n    )\n        external\n        onlyMultipleOwner(\n            _hashToSign(\n                keccak256(abi.encodePacked(DOMAIN, keccak256(\"setEnableWhiteList(bool enable)\"), enable, nonce))\n            ),\n            sigs\n        )\n    {\n        enableWhiteList = enable;\n    }\n\n    /// dev calculate how many VM3 user can got if he pay amount paymentToken.\n    function _canGotVM3(address paymentToken, uint256 payAmount, uint256 vm3Price) internal view returns (uint256) {\n        uint8 paymentTokenDecimals = 18;\n        if (paymentToken != address(0)) {\n            paymentTokenDecimals = IERC20(paymentToken).decimals();\n        }\n\n        if (paymentTokenDecimals < 18) {\n            payAmount *= 10 ** (18 - paymentTokenDecimals);\n        } else if (paymentTokenDecimals > 18) {\n            payAmount /= 10 ** (paymentTokenDecimals - 18);\n        }\n\n        uint256 gotVM3 = (payAmount * 10 ** 18) / vm3Price;\n        require(gotVM3 > 0, \"PrivateSale: buy zero VM3\");\n\n        return gotVM3;\n    }\n\n    ///@dev user release VM3 to his account\n    function _witdrawVM3(\n        uint256 saleNumber,\n        address recipient\n    )\n        internal\n        onlyAssetExist(recipient, saleNumber)\n        onlySaleNotPuased(saleNumber)\n        onlyUserReleaseNotPaused(recipient, saleNumber)\n    {\n        AssetInfo memory assetInfo = userAssetInfos[recipient][saleNumber];\n        require(_blockTimestamp() - assetInfo.latestWithdrawTime > MONTH, \"PrivateSale: has withdraw recently\");\n\n        if (assetInfo.latestWithdrawTime == 0) {\n            assetInfo.latestWithdrawTime = saleInfoMap[assetInfo.saleNumber].releaseStartTime;\n        }\n        uint16 canWithdrawMonths = uint16((_blockTimestamp() - assetInfo.latestWithdrawTime) / MONTH);\n\n        uint256 withdrawAmount = ((assetInfo.amount - assetInfo.amountWithdrawn) /\n            (assetInfo.releaseTotalMonths - assetInfo.withdrawnMonths)) * canWithdrawMonths;\n        IERC20(VM3).transferFrom(address(this), recipient, withdrawAmount);\n\n        assetInfo.amountWithdrawn += withdrawAmount;\n        assetInfo.latestWithdrawTime = _blockTimestamp();\n        assetInfo.withdrawnMonths += canWithdrawMonths;\n    }\n\n    function _hashToSign(bytes32 data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", data));\n    }\n\n    /// @dev Returns the block timestamp truncated to 64 bits, i.e. mod 2**64. This method is overridden in tests.\n    function _blockTimestamp() internal view virtual returns (uint64) {\n        return uint64(block.timestamp); // truncation is desired\n    }\n\n    /*\n     * query\n     */\n    function totalSale() external view returns (uint256) {\n        return (saleNumberList.length);\n    }\n\n    function canGotVM3(address paymentToken, uint256 payAmount, uint256 vm3Price) external view returns (uint256) {\n        return _canGotVM3(paymentToken, payAmount, vm3Price);\n    }\n}\n"
    },
    "contracts/Abstract/SafeOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// support multiple owners to manager\nabstract contract SafeOwnable is Context {\n    using ECDSA for bytes32;\n    enum OpStatus {\n        OpDefault,\n        OpPending,\n        OpExecuted,\n        OpCancel\n    }\n\n    address[6] private _owners;\n    mapping(address => uint8) private _ownersIndex; // from 1\n    uint8 private _numOwners;\n    uint8 public constant maxNumOwners = 5;\n    // the number of owners that must confirm before operation run.\n    uint8 public immutable signRequired;\n    mapping(bytes32 => OpStatus) public operationsStatus;\n\n    uint256 public nonce; //avoid operation hash being the same\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event OperationAdded(bytes32 indexed opHash);\n\n    constructor(address[] memory ownerList, uint8 signRequired_) {\n        require(ownerList.length <= maxNumOwners, \"SafeOwnable:exceed maximum number owners\");\n        require(signRequired_ != 0, \"SafeOwnable: signRequired is zero\");\n\n        signRequired = signRequired_;\n        for (uint256 i = 0; i < ownerList.length; i++) {\n            address owner = ownerList[i];\n            require(_ownersIndex[owner] == 0, \"SafeOwnable: owner already exists\");\n            _owners[++_numOwners] = owner;\n            _ownersIndex[owner] = _numOwners;\n\n            emit OwnershipTransferred(address(0), owner);\n        }\n\n        require(signRequired <= _numOwners, \"SafeOwnable: owners less than signRequired\");\n    }\n\n    modifier onlyOwner() {\n        require(_ownersIndex[_msgSender()] > 0, \"SafeOwnable: caller is not the owner\");\n        _;\n    }\n\n    modifier onlyMultipleOwner(bytes32 dataHash, bytes[] memory sigs) {\n        uint8 confirmed = 0;\n        bool[maxNumOwners + 1] memory mark;\n        if (_ownersIndex[_msgSender()] > 0) {\n            confirmed++;\n            mark[_ownersIndex[_msgSender()]] = true;\n        }\n        for (uint8 i = 0; i < sigs.length; i++) {\n            address owner = dataHash.recover(sigs[i]);\n            uint8 ownerIndex = _ownersIndex[owner];\n            require(ownerIndex > 0, \"SafeOwnable: signer is not owner\");\n            if (mark[ownerIndex] == true) {\n                continue;\n            }\n            mark[ownerIndex] = true;\n            confirmed++;\n        }\n\n        require(confirmed >= signRequired, \"SafeOwnable: no enough confirms\");\n        nonce++;\n        _;\n    }\n\n    modifier onlyOperationPendding(bytes32 opHash) {\n        require(operationsStatus[opHash] == OpStatus.OpPending, \"SafeOwnable: operation not in pending\");\n        operationsStatus[opHash] = OpStatus.OpExecuted;\n        _;\n    }\n\n    function AddOpHashToPending(bytes32 opHash, bytes[] memory sigs) public onlyMultipleOwner(opHash, sigs) {\n        require(operationsStatus[opHash] == OpStatus.OpDefault, \"SafeOwnable: operation was not submitted yet\");\n        operationsStatus[opHash] = OpStatus.OpPending;\n        emit OperationAdded(opHash);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"SafeOwnable: new owner is the zero address\");\n        require(_ownersIndex[newOwner] == 0, \"SafeOwnable: new owner already exists\");\n\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _msgSender();\n        uint8 oldOwnerIndex = _ownersIndex[oldOwner];\n        _owners[oldOwnerIndex] = newOwner;\n        _ownersIndex[oldOwner] = 0;\n        _ownersIndex[newOwner] = oldOwnerIndex;\n\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function owners() public view returns (address[6] memory) {\n        return _owners;\n    }\n}\n"
    },
    "contracts/Library/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n\n    /// @notice Cast a uint256 to a uint64, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type uint64\n    function toUint64(uint256 y) internal pure returns (uint64 z) {\n        require(y < 2**64);\n        z = uint64(y);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
{
  "address": "0xbC08c2847F0D252d26C81C17c8b39E9d54Bfc5e4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "signRequired_",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "ParameterError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum PromotionV1.ReceiveMethod",
          "name": "receiveMethod",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "opHash",
          "type": "bytes32"
        }
      ],
      "name": "OperationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ReleasePromotion",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "opHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "sigs",
          "type": "bytes[]"
        }
      ],
      "name": "AddOpHashToPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "HashToSign",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "List",
      "outputs": [
        {
          "internalType": "address",
          "name": "publisher",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "time_frame",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tasks",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "conditions",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "enum PromotionV1.OpenMethod",
              "name": "open_method",
              "type": "uint8"
            },
            {
              "internalType": "enum PromotionV1.ReceiveMethod",
              "name": "receive_method",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "chain_id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "chain_name",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "addr",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "number",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct PromotionV1.Prize20SAME",
              "name": "prizes_erc20_same",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "addr",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "min",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "max",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct PromotionV1.Prize20SEPARATE",
              "name": "prizes_erc20_separate",
              "type": "tuple"
            }
          ],
          "internalType": "struct PromotionV1.Rewards",
          "name": "rewards",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "current",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "getPromotion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "publisher",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name_",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description_",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "time_frame",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tasks",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "conditions",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "enum PromotionV1.OpenMethod",
                  "name": "open_method",
                  "type": "uint8"
                },
                {
                  "internalType": "enum PromotionV1.ReceiveMethod",
                  "name": "receive_method",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "chain_id",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "chain_name",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "address[]",
                      "name": "addr",
                      "type": "address[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "number",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct PromotionV1.Prize20SAME",
                  "name": "prizes_erc20_same",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address[]",
                      "name": "addr",
                      "type": "address[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "min",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "max",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct PromotionV1.Prize20SEPARATE",
                  "name": "prizes_erc20_separate",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PromotionV1.Rewards",
              "name": "rewards",
              "type": "tuple"
            }
          ],
          "internalType": "struct PromotionV1.Promotion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce_",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "signs",
          "type": "bytes[]"
        }
      ],
      "name": "getRewardSame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "getRewardSameHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "num_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "nonce_",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "signs",
          "type": "bytes[]"
        }
      ],
      "name": "getRewardSeparate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "num_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "nonce_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "getRewardSeparateHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumOwners",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "operationsStatus",
      "outputs": [
        {
          "internalType": "enum SafeOwnable.OpStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address[6]",
          "name": "",
          "type": "address[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "publisher",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name_",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description_",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "time_frame",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tasks",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "conditions",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "enum PromotionV1.OpenMethod",
                  "name": "open_method",
                  "type": "uint8"
                },
                {
                  "internalType": "enum PromotionV1.ReceiveMethod",
                  "name": "receive_method",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "chain_id",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "chain_name",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "address[]",
                      "name": "addr",
                      "type": "address[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "number",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct PromotionV1.Prize20SAME",
                  "name": "prizes_erc20_same",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address[]",
                      "name": "addr",
                      "type": "address[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "min",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "max",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct PromotionV1.Prize20SEPARATE",
                  "name": "prizes_erc20_separate",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PromotionV1.Rewards",
              "name": "rewards",
              "type": "tuple"
            }
          ],
          "internalType": "struct PromotionV1.Promotion",
          "name": "promotion_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "addr",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "number",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PromotionV1.Prize20SAME",
          "name": "prizes_",
          "type": "tuple"
        }
      ],
      "name": "releasePromotion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signRequired",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebc3f754091a33196f2d66c72fda083267a156b236bdef996ace9c3aad4e1c57",
  "receipt": {
    "to": null,
    "from": "0x9e106Dcc42703038CEA04Bf76F5e049B2aFa06Ea",
    "contractAddress": "0xbC08c2847F0D252d26C81C17c8b39E9d54Bfc5e4",
    "transactionIndex": 111,
    "gasUsed": "3502160",
    "logsBloom": "0x4000000000000000000000800000000000000000040000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000100000000000000001000000000000000000002000000000000010000088000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000002000000000000000010000000000000000000000000000010000000000a000000000",
    "blockHash": "0x21aaef7e446cad4fb933c66c06c0291a00cff745080fdc93e649afbe1fff01bd",
    "transactionHash": "0xebc3f754091a33196f2d66c72fda083267a156b236bdef996ace9c3aad4e1c57",
    "logs": [
      {
        "transactionIndex": 111,
        "blockNumber": 9500251,
        "transactionHash": "0xebc3f754091a33196f2d66c72fda083267a156b236bdef996ace9c3aad4e1c57",
        "address": "0xbC08c2847F0D252d26C81C17c8b39E9d54Bfc5e4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000045a6f2ffe661b85128c2b49e8f861ecbfe23f1c8"
        ],
        "data": "0x",
        "logIndex": 341,
        "blockHash": "0x21aaef7e446cad4fb933c66c06c0291a00cff745080fdc93e649afbe1fff01bd"
      },
      {
        "transactionIndex": 111,
        "blockNumber": 9500251,
        "transactionHash": "0xebc3f754091a33196f2d66c72fda083267a156b236bdef996ace9c3aad4e1c57",
        "address": "0xbC08c2847F0D252d26C81C17c8b39E9d54Bfc5e4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5c20dca171c504662f3a58ddfe692bf3d56ae61"
        ],
        "data": "0x",
        "logIndex": 342,
        "blockHash": "0x21aaef7e446cad4fb933c66c06c0291a00cff745080fdc93e649afbe1fff01bd"
      },
      {
        "transactionIndex": 111,
        "blockNumber": 9500251,
        "transactionHash": "0xebc3f754091a33196f2d66c72fda083267a156b236bdef996ace9c3aad4e1c57",
        "address": "0xbC08c2847F0D252d26C81C17c8b39E9d54Bfc5e4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e759ab36819aade0d8e8c428bd1dd2438e9dfead"
        ],
        "data": "0x",
        "logIndex": 343,
        "blockHash": "0x21aaef7e446cad4fb933c66c06c0291a00cff745080fdc93e649afbe1fff01bd"
      }
    ],
    "blockNumber": 9500251,
    "cumulativeGasUsed": "19653465",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x45A6F2ffe661B85128c2b49E8f861ecBFe23f1c8",
      "0xb5C20dCa171c504662F3A58DdfE692Bf3d56Ae61",
      "0xe759Ab36819Aade0d8E8C428BD1dD2438e9dFEAd"
    ],
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "332eea3358f9c0c58562f4bc17582c44",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"signRequired_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ParameterError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum PromotionV1.ReceiveMethod\",\"name\":\"receiveMethod\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"opHash\",\"type\":\"bytes32\"}],\"name\":\"OperationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ReleasePromotion\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"opHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"AddOpHashToPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"HashToSign\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"List\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"time_frame\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tasks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"conditions\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"enum PromotionV1.OpenMethod\",\"name\":\"open_method\",\"type\":\"uint8\"},{\"internalType\":\"enum PromotionV1.ReceiveMethod\",\"name\":\"receive_method\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"chain_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain_name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"number\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PromotionV1.Prize20SAME\",\"name\":\"prizes_erc20_same\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"min\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"max\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PromotionV1.Prize20SEPARATE\",\"name\":\"prizes_erc20_separate\",\"type\":\"tuple\"}],\"internalType\":\"struct PromotionV1.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getPromotion\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"time_frame\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tasks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"conditions\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"enum PromotionV1.OpenMethod\",\"name\":\"open_method\",\"type\":\"uint8\"},{\"internalType\":\"enum PromotionV1.ReceiveMethod\",\"name\":\"receive_method\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"chain_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain_name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"number\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PromotionV1.Prize20SAME\",\"name\":\"prizes_erc20_same\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"min\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"max\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PromotionV1.Prize20SEPARATE\",\"name\":\"prizes_erc20_separate\",\"type\":\"tuple\"}],\"internalType\":\"struct PromotionV1.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"}],\"internalType\":\"struct PromotionV1.Promotion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signs\",\"type\":\"bytes[]\"}],\"name\":\"getRewardSame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getRewardSameHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"num_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signs\",\"type\":\"bytes[]\"}],\"name\":\"getRewardSeparate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"num_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getRewardSeparateHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumOwners\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"operationsStatus\",\"outputs\":[{\"internalType\":\"enum SafeOwnable.OpStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address[6]\",\"name\":\"\",\"type\":\"address[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"time_frame\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tasks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"conditions\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"enum PromotionV1.OpenMethod\",\"name\":\"open_method\",\"type\":\"uint8\"},{\"internalType\":\"enum PromotionV1.ReceiveMethod\",\"name\":\"receive_method\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"chain_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain_name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"number\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PromotionV1.Prize20SAME\",\"name\":\"prizes_erc20_same\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"min\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"max\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PromotionV1.Prize20SEPARATE\",\"name\":\"prizes_erc20_separate\",\"type\":\"tuple\"}],\"internalType\":\"struct PromotionV1.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"}],\"internalType\":\"struct PromotionV1.Promotion\",\"name\":\"promotion_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"number\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PromotionV1.Prize20SAME\",\"name\":\"prizes_\",\"type\":\"tuple\"}],\"name\":\"releasePromotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signRequired\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Promotion/PromotionV1.sol\":\"PromotionV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Abstract/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// support multiple owners to manager\\nabstract contract SafeOwnable is Context {\\n    using ECDSA for bytes32;\\n    enum OpStatus {\\n        OpDefault,\\n        OpPending,\\n        OpExecuted,\\n        OpCancel\\n    }\\n\\n    address[6] private _owners;\\n    mapping(address => uint8) private _ownersIndex; // from 1\\n    uint8 private _numOwners;\\n    uint8 public constant maxNumOwners = 5;\\n    // the number of owners that must confirm before operation run.\\n    uint8 public immutable signRequired;\\n    mapping(bytes32 => OpStatus) public operationsStatus;\\n\\n    uint256 public nonce; //avoid operation hash being the same\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OperationAdded(bytes32 indexed opHash);\\n\\n    constructor(address[] memory ownerList, uint8 signRequired_) {\\n        require(ownerList.length <= maxNumOwners, \\\"SafeOwnable:exceed maximum number owners\\\");\\n        require(signRequired_ != 0, \\\"SafeOwnable: signRequired is zero\\\");\\n\\n        signRequired = signRequired_;\\n        for (uint256 i = 0; i < ownerList.length; i++) {\\n            address owner = ownerList[i];\\n            require(_ownersIndex[owner] == 0, \\\"SafeOwnable: owner already exists\\\");\\n            _owners[++_numOwners] = owner;\\n            _ownersIndex[owner] = _numOwners;\\n\\n            emit OwnershipTransferred(address(0), owner);\\n        }\\n\\n        require(signRequired <= _numOwners, \\\"SafeOwnable: owners less than signRequired\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_ownersIndex[_msgSender()] > 0, \\\"SafeOwnable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyMultipleOwner(bytes32 dataHash, bytes[] memory sigs) {\\n        uint8 confirmed = 0;\\n        bool[maxNumOwners + 1] memory mark;\\n        if (_ownersIndex[_msgSender()] > 0) {\\n            confirmed++;\\n            mark[_ownersIndex[_msgSender()]] = true;\\n        }\\n        for (uint8 i = 0; i < sigs.length; i++) {\\n            address owner = dataHash.recover(sigs[i]);\\n            uint8 ownerIndex = _ownersIndex[owner];\\n            require(ownerIndex > 0, \\\"SafeOwnable: signer is not owner\\\");\\n            if (mark[ownerIndex] == true) {\\n                continue;\\n            }\\n            mark[ownerIndex] = true;\\n            confirmed++;\\n        }\\n\\n        require(confirmed >= signRequired, \\\"SafeOwnable: no enough confirms\\\");\\n        nonce++;\\n        _;\\n    }\\n\\n    modifier onlyOperationPendding(bytes32 opHash) {\\n        require(operationsStatus[opHash] == OpStatus.OpPending, \\\"SafeOwnable: operation not in pending\\\");\\n        operationsStatus[opHash] = OpStatus.OpExecuted;\\n        _;\\n    }\\n\\n    function AddOpHashToPending(bytes32 opHash, bytes[] memory sigs) public onlyMultipleOwner(opHash, sigs) {\\n        require(operationsStatus[opHash] == OpStatus.OpDefault, \\\"SafeOwnable: operation was not submitted yet\\\");\\n        operationsStatus[opHash] = OpStatus.OpPending;\\n        emit OperationAdded(opHash);\\n    }\\n\\n    modifier onlyMultipleOwnerIndependent(bytes32 dataHash, bytes[] memory sigs) {\\n        require(operationsStatus[dataHash] == OpStatus.OpDefault, \\\"SafeOwnable: repetitive operation\\\");\\n        uint8 confirmed = 0;\\n        bool[maxNumOwners + 1] memory mark;\\n        if (_ownersIndex[_msgSender()] > 0) {\\n            confirmed++;\\n            mark[_ownersIndex[_msgSender()]] = true;\\n        }\\n        for (uint8 i = 0; i < sigs.length; i++) {\\n            address owner = dataHash.recover(sigs[i]);\\n            uint8 ownerIndex = _ownersIndex[owner];\\n            require(ownerIndex > 0, \\\"SafeOwnable: signer is not owner\\\");\\n            if (mark[ownerIndex] == true) {\\n                continue;\\n            }\\n            mark[ownerIndex] = true;\\n            confirmed++;\\n        }\\n        require(confirmed >= signRequired, \\\"SafeOwnable: no enough confirms\\\");\\n        operationsStatus[dataHash] = OpStatus.OpExecuted;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"SafeOwnable: new owner is the zero address\\\");\\n        require(_ownersIndex[newOwner] == 0, \\\"SafeOwnable: new owner already exists\\\");\\n\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _msgSender();\\n        uint8 oldOwnerIndex = _ownersIndex[oldOwner];\\n        _owners[oldOwnerIndex] = newOwner;\\n        _ownersIndex[oldOwner] = 0;\\n        _ownersIndex[newOwner] = oldOwnerIndex;\\n\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    function owners() public view returns (address[6] memory) {\\n        return _owners;\\n    }\\n\\n    function HashToSign(bytes32 data) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", data));\\n    }\\n}\\n\",\"keccak256\":\"0xa72bfa390b7382c396cb77481d31007002ee7be4b77d4ba659b93700887f759e\",\"license\":\"MIT\"},\"contracts/Error/Error.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nerror ParameterError(string);\\n\",\"keccak256\":\"0x9a70ae47a4d482e427a6f0cefdd0926856a43704452d7562127ee8666fb60d10\",\"license\":\"MIT\"},\"contracts/Promotion/PromotionV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {SafeOwnable} from \\\"../Abstract/SafeOwnable.sol\\\";\\nimport {ParameterError} from \\\"../Error/Error.sol\\\";\\n\\ncontract PromotionV1 is SafeOwnable {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 private DOMAIN;\\n    enum OpenMethod {\\n        FCFS,\\n        LuckyDraw\\n    }\\n    enum ReceiveMethod {\\n        SAME,\\n        SEPARATE\\n    }\\n\\n    uint256 private _id;\\n    struct Promotion {\\n        address publisher;\\n        string name_;\\n        string description_;\\n        string time_frame;\\n        string tasks;\\n        string conditions;\\n        Rewards rewards;\\n    }\\n\\n    struct Rewards {\\n        OpenMethod open_method;\\n        ReceiveMethod receive_method;\\n        string chain_id;\\n        string chain_name;\\n        Prize20SAME prizes_erc20_same;\\n        Prize20SEPARATE prizes_erc20_separate;\\n    }\\n    struct Prize20SAME {\\n        address[] addr;\\n        uint256[] number;\\n    }\\n    struct Prize20SEPARATE {\\n        address[] addr;\\n        uint256[] min;\\n        uint256[] max;\\n    }\\n    mapping(uint256 => Promotion) public List;\\n\\n    // ERC20 Prize Pool\\n    mapping(uint256 => mapping(address => uint256)) private _prizesPoolsErc20;\\n\\n    // Event log\\n    event ReleasePromotion(address indexed user, uint256 id);\\n    event ClaimReward(address indexed user, uint256 id, ReceiveMethod receiveMethod, uint256 amount);\\n\\n    modifier DataCheck() {\\n        _;\\n    }\\n\\n    constructor(address[] memory owners, uint8 signRequired_) SafeOwnable(owners, signRequired_) {\\n        _id = 1;\\n        DOMAIN = keccak256(\\n            abi.encode(keccak256(\\\"Domain(uint256 chainId,address verifyingContract)\\\"), block.chainid, _this())\\n        );\\n    }\\n\\n    function current() public view returns (uint256) {\\n        return _id;\\n    }\\n\\n    function releasePromotion(Promotion memory promotion_, Prize20SAME memory prizes_) public {\\n        depositPrizesErc20(prizes_);\\n        promotion_.publisher = _msgSender();\\n        List[_id] = promotion_;\\n        emit ReleasePromotion(_msgSender(), _id);\\n        ++_id;\\n    }\\n\\n    function getPromotion(uint256 id_) public view returns (Promotion memory) {\\n        return List[id_];\\n    }\\n\\n    function _this() private view returns (address) {\\n        return address(this);\\n    }\\n\\n    function depositPrizesErc20(Prize20SAME memory prize) private {\\n        // In the most reasonable case, verify that the amount of each currency stored is sufficient for the activity\\n        uint256 len = prize.addr.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            IERC20(prize.addr[i]).transferFrom(_msgSender(), _this(), prize.number[i]);\\n            injectionPool(_id, prize.addr[i], prize.number[i]);\\n        }\\n    }\\n\\n    function injectionPool(\\n        uint256 id,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        _prizesPoolsErc20[id][token] += amount;\\n    }\\n\\n    function deductionPool(\\n        uint256 id,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        _prizesPoolsErc20[id][token] -= amount;\\n    }\\n\\n    function getRewardSameHash(\\n        uint256 id_,\\n        uint256 nonce_,\\n        address who\\n    ) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(DOMAIN, keccak256(\\\"getRewardSame(uint256, uint256)\\\"), id_, nonce_, who));\\n    }\\n\\n    function getRewardSame(\\n        uint256 id_,\\n        uint256 nonce_,\\n        bytes[] memory signs\\n    ) external onlyMultipleOwnerIndependent(HashToSign(getRewardSameHash(id_, nonce_, _msgSender())), signs) {\\n        Rewards memory reward = getPromotion(id_).rewards;\\n        if (reward.receive_method != ReceiveMethod.SAME) revert ParameterError(\\\"not have the same type of prize\\\");\\n        Prize20SAME memory list = reward.prizes_erc20_same;\\n        if (list.addr.length == 0) revert ParameterError(\\\"reward data is incorrect. Please contact the administrator\\\");\\n        for (uint256 i = 0; i < list.addr.length; ++i) {\\n            if (_prizesPoolsErc20[id_][list.addr[i]] <= 0) revert ParameterError(\\\"reward has been claimed\\\");\\n            IERC20 token = IERC20(list.addr[i]);\\n            token.transfer(_msgSender(), list.number[i]);\\n            deductionPool(id_, list.addr[i], list.number[i]);\\n            emit ClaimReward(_msgSender(), id_, ReceiveMethod.SAME, list.number[i]);\\n        }\\n    }\\n\\n    function getRewardSeparateHash(\\n        uint256 id_,\\n        uint256[] calldata num_,\\n        uint256 nonce_,\\n        address who\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    DOMAIN,\\n                    keccak256(\\\"getRewardSeparate(uint256, uint256[], uint256)\\\"),\\n                    id_,\\n                    num_,\\n                    nonce_,\\n                    who\\n                )\\n            );\\n    }\\n\\n    function getRewardSeparate(\\n        uint256 id_,\\n        uint256[] calldata num_,\\n        uint256 nonce_,\\n        bytes[] memory signs\\n    ) external onlyMultipleOwnerIndependent(HashToSign(getRewardSeparateHash(id_, num_, nonce_, _msgSender())), signs) {\\n        uint256 id = id_;\\n        Rewards memory reward = getPromotion(id).rewards;\\n        if (reward.receive_method != ReceiveMethod.SEPARATE) {\\n            revert ParameterError(\\\"not have the separate type of prize\\\");\\n        }\\n        Prize20SEPARATE memory list = reward.prizes_erc20_separate;\\n        if (list.addr.length == 0) {\\n            revert ParameterError(\\\"reward data is incorrect. Please contact the administrator\\\");\\n        }\\n        for (uint256 i = 0; i < list.addr.length; ++i) {\\n            uint256 remaining = _prizesPoolsErc20[id][list.addr[i]];\\n            uint256 num = num_[i];\\n            if (num < remaining) {\\n                if (num < list.min[i] || num > list.max[i]) revert ParameterError(\\\"reward amount does not match\\\");\\n            } else {\\n                num = remaining;\\n            }\\n            IERC20 token = IERC20(list.addr[i]);\\n            token.transfer(_msgSender(), num);\\n            deductionPool(id, list.addr[i], num);\\n            emit ClaimReward(_msgSender(), id, ReceiveMethod.SEPARATE, num);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xde1a6f3079ab03022968c82820b8cbc4de5d27b94f561cc352427ef401c3353a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003f7138038062003f7183398101604081905262000034916200039f565b8181600560ff1682511115620000a25760405162461bcd60e51b815260206004820152602860248201527f536166654f776e61626c653a657863656564206d6178696d756d206e756d626560448201526772206f776e65727360c01b60648201526084015b60405180910390fd5b60ff8116620000fe5760405162461bcd60e51b815260206004820152602160248201527f536166654f776e61626c653a207369676e5265717569726564206973207a65726044820152606f60f81b606482015260840162000099565b60ff811660805260005b82518110156200027857600083828151811062000129576200012962000485565b6020908102919091018101516001600160a01b0381166000908152600690925260409091205490915060ff1615620001ae5760405162461bcd60e51b815260206004820152602160248201527f536166654f776e61626c653a206f776e657220616c72656164792065786973746044820152607360f81b606482015260840162000099565b6007805482916000918290620001c79060ff16620004b1565b91906101000a81548160ff021916908360ff160217905560ff1660068110620001f457620001f462000485565b0180546001600160a01b039283166001600160a01b0319909116179055600754908216600081815260066020526040808220805460ff191660ff9095169490941790935591519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350806200026f81620004d4565b91505062000108565b5060075460805160ff91821691161115620002e95760405162461bcd60e51b815260206004820152602a60248201527f536166654f776e61626c653a206f776e657273206c657373207468616e20736960448201526919db94995c5d5a5c995960b21b606482015260840162000099565b50506001600b557f20a714382505729b6977051cb17e2cd66b3149e150240124aa4917fe7f21899046306040805160208101949094528301919091526001600160a01b0316606082015260800160405160208183030381529060405280519060200120600a819055505050620004f2565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200038857600080fd5b919050565b805160ff811681146200038857600080fd5b60008060408385031215620003b357600080fd5b82516001600160401b0380821115620003cb57600080fd5b818501915085601f830112620003e057600080fd5b8151602082821115620003f757620003f76200035a565b8160051b604051601f19603f830116810181811086821117156200041f576200041f6200035a565b6040529283528183019350848101820192898411156200043e57600080fd5b948201945b838610156200046757620004578662000370565b8552948201949382019362000443565b96506200047890508782016200038d565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff811415620004cb57620004cb6200049b565b60010192915050565b6000600019821415620004eb57620004eb6200049b565b5060010190565b608051613a4e620005236000396000818161026d01528181610c3a0152818161145001526118a70152613a4e6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639670e56911610097578063affed0e011610066578063affed0e0146102e5578063ce0d0ca0146102ee578063dd11eaf21461031e578063f2fde38b1461034457600080fd5b80639670e569146102a25780639fa6a6e3146102b5578063a6af817d146102bd578063affe39c1146102d057600080fd5b80636f3f5772116100d35780636f3f5772146101f457806375f3958c146102075780637a29349d146102685780638b5a21431461028f57600080fd5b80630c3515ba1461010557806314fdecca146101245780634b8bce6c1461014457806353b69ea5146101df575b600080fd5b61010d600581565b60405160ff90911681526020015b60405180910390f35b610137610132366004612c8d565b610357565b60405161011b9190612e8d565b6101d1610152366004612f72565b600a546040805160208101929092527f021a828111e321f5363ceef5bb16dafb5662909dc426bcbde4fb22a7c4cd434e9082015260608082018590526080820184905282901b6bffffffffffffffffffffffff191660a082015260009060b4016040516020818303038152906040528051906020012090509392505050565b60405190815260200161011b565b6101f26101ed3660046131a0565b6109fb565b005b6101f2610202366004613524565b611060565b6101d1610215366004612c8d565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b61010d7f000000000000000000000000000000000000000000000000000000000000000081565b6101f261029d36600461367b565b6112d3565b6101d16102b03660046136b8565b6115b7565b600b546101d1565b6101f26102cb36600461371f565b611619565b6102d8611c6c565b60405161011b919061376f565b6101d160095481565b6103116102fc366004612c8d565b60086020526000908152604090205460ff1681565b60405161011b91906137a9565b61033161032c366004612c8d565b611cb1565b60405161011b97969594939291906137c3565b6101f2610352366004613855565b612326565b61035f612a81565b6000828152600c6020908152604091829020825160e0810190935280546001600160a01b03168352600181018054919284019161039b90613870565b80601f01602080910402602001604051908101604052809291908181526020018280546103c790613870565b80156104145780601f106103e957610100808354040283529160200191610414565b820191906000526020600020905b8154815290600101906020018083116103f757829003601f168201915b5050505050815260200160028201805461042d90613870565b80601f016020809104026020016040519081016040528092919081815260200182805461045990613870565b80156104a65780601f1061047b576101008083540402835291602001916104a6565b820191906000526020600020905b81548152906001019060200180831161048957829003601f168201915b505050505081526020016003820180546104bf90613870565b80601f01602080910402602001604051908101604052809291908181526020018280546104eb90613870565b80156105385780601f1061050d57610100808354040283529160200191610538565b820191906000526020600020905b81548152906001019060200180831161051b57829003601f168201915b5050505050815260200160048201805461055190613870565b80601f016020809104026020016040519081016040528092919081815260200182805461057d90613870565b80156105ca5780601f1061059f576101008083540402835291602001916105ca565b820191906000526020600020905b8154815290600101906020018083116105ad57829003601f168201915b505050505081526020016005820180546105e390613870565b80601f016020809104026020016040519081016040528092919081815260200182805461060f90613870565b801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b50505091835250506040805160c08101909152600683018054602090930192829060ff16600181111561069157610691612cf3565b60018111156106a2576106a2612cf3565b81528154602090910190610100900460ff1660018111156106c5576106c5612cf3565b60018111156106d6576106d6612cf3565b81526020016001820180546106ea90613870565b80601f016020809104026020016040519081016040528092919081815260200182805461071690613870565b80156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b5050505050815260200160028201805461077c90613870565b80601f01602080910402602001604051908101604052809291908181526020018280546107a890613870565b80156107f55780601f106107ca576101008083540402835291602001916107f5565b820191906000526020600020905b8154815290600101906020018083116107d857829003601f168201915b50505050508152602001600382016040518060400160405290816000820180548060200260200160405190810160405280929190818152602001828054801561086757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610849575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191906000526020600020905b8154815260200190600101908083116108ab575b5050505050815250508152602001600582016040518060600160405290816000820180548060200260200160405190810160405280929190818152602001828054801561093557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610917575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561098d57602002820191906000526020600020905b815481526020019060010190808311610979575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156109e557602002820191906000526020600020905b8154815260200190600101908083116109d1575b5050509190925250505090525090525092915050565b610a0b61021586868686336115b7565b816000808381526008602052604090205460ff166003811115610a3057610a30612cf3565b14610aa85760405162461bcd60e51b815260206004820152602160248201527f536166654f776e61626c653a2072657065746974697665206f7065726174696f60448201527f6e0000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000610ab2612acc565b3360009081526006602052604090205460ff1615610b1d5781610ad4816138c1565b92505060018160066000610ae53390565b6001600160a01b0316815260208101919091526040016000205460ff1660068110610b1257610b126138e1565b911515602090920201525b60005b83518160ff161015610c37576000610b5d858360ff1681518110610b4657610b466138e1565b6020026020010151876124c190919063ffffffff16565b6001600160a01b03811660009081526006602052604090205490915060ff1680610bc95760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a9f565b838160ff1660068110610bde57610bde6138e1565b6020020151151560011415610bf4575050610c25565b6001848260ff1660068110610c0b57610c0b6138e1565b9115156020909202015284610c1f816138c1565b95505050505b80610c2f816138c1565b915050610b20565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff161015610cae5760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a9f565b6000848152600860205260408120805460ff191660021790558990610cd282610357565b60c001519050600181602001516001811115610cf057610cf0612cf3565b14610d645760405163d71b1e0560e01b815260206004820152602360248201527f6e6f742068617665207468652073657061726174652074797065206f6620707260448201527f697a6500000000000000000000000000000000000000000000000000000000006064820152608401610a9f565b60a0810151805151610ddf5760405163d71b1e0560e01b815260206004820152603a60248201527f726577617264206461746120697320696e636f72726563742e20506c6561736560448201527f20636f6e74616374207468652061646d696e6973747261746f720000000000006064820152608401610a9f565b60005b815151811015611051576000848152600d602052604081208351805183919085908110610e1157610e116138e1565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054905060008d8d84818110610e5057610e506138e1565b90506020020135905081811015610efb5783602001518381518110610e7757610e776138e1565b6020026020010151811080610ea8575083604001518381518110610e9d57610e9d6138e1565b602002602001015181115b15610ef65760405163d71b1e0560e01b815260206004820152601c60248201527f72657761726420616d6f756e7420646f6573206e6f74206d61746368000000006044820152606401610a9f565b610efe565b50805b600084600001518481518110610f1657610f166138e1565b60200260200101519050806001600160a01b031663a9059cbb610f363390565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b158015610f9657600080fd5b505af1158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce91906138f7565b50610ff78786600001518681518110610fe957610fe96138e1565b6020026020010151846124e5565b336001600160a01b03167f44e6fbe8eb88c5919c29bedee22525c4697d319e64173a9aaaecdee85d7bab7b8860018560405161103593929190613919565b60405180910390a25050508061104a9061393a565b9050610de2565b50505050505050505050505050565b61106981612521565b338252600b546000908152600c602090815260409091208351815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617815581840151805185936110c2926001850192910190612aea565b50604082015180516110de916002840191602090910190612aea565b50606082015180516110fa916003840191602090910190612aea565b5060808201518051611116916004840191602090910190612aea565b5060a08201518051611132916005840191602090910190612aea565b5060c08201518051600683018054909190829060ff19166001838181111561115c5761115c612cf3565b02179055506020820151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101008360018111156111a1576111a1612cf3565b0217905550604082015180516111c1916001840191602090910190612aea565b50606082015180516111dd916002840191602090910190612aea565b5060808201518051805160038401916111fb91839160200190612b6e565b5060208281015180516112149260018501920190612bd0565b50505060a082015180518051600584019161123491839160200190612b6e565b50602082810151805161124d9260018501920190612bd0565b5060408201518051611269916002840191602090910190612bd0565b50505050509050506112783390565b6001600160a01b03167f508b33eb456cc8fa655cf3030ef0f19cb5acde250543229a965168c0ee77586d600b546040516112b491815260200190565b60405180910390a2600b600081546112cb9061393a565b909155505050565b818160006112df612acc565b3360009081526006602052604090205460ff161561134a5781611301816138c1565b925050600181600660006113123390565b6001600160a01b0316815260208101919091526040016000205460ff166006811061133f5761133f6138e1565b911515602090920201525b60005b83518160ff16101561144d576000611373858360ff1681518110610b4657610b466138e1565b6001600160a01b03811660009081526006602052604090205490915060ff16806113df5760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a9f565b838160ff16600681106113f4576113f46138e1565b602002015115156001141561140a57505061143b565b6001848260ff1660068110611421576114216138e1565b9115156020909202015284611435816138c1565b95505050505b80611445816138c1565b91505061134d565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff1610156114c45760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a9f565b600980549060006114d48361393a565b909155505060008681526008602052604081205460ff1660038111156114fc576114fc612cf3565b1461156f5760405162461bcd60e51b815260206004820152602c60248201527f536166654f776e61626c653a206f7065726174696f6e20776173206e6f74207360448201527f75626d69747465642079657400000000000000000000000000000000000000006064820152608401610a9f565b600086815260086020526040808220805460ff191660011790555187917f33775024b20f211f019e50305c897b2105edc4642384143897ac170fb37f54a191a2505050505050565b6000600a547f236bb74c476734b424d2bab617f79aad5056a45717dcce699d4599af8406b61f87878787876040516020016115f89796959493929190613973565b60405160208183030381529060405280519060200120905095945050505050565b600a54604080516020808201939093527f021a828111e321f5363ceef5bb16dafb5662909dc426bcbde4fb22a7c4cd434e8183015260608082018790526080820186905233901b6bffffffffffffffffffffffff191660a08201528151808203609401815260b4909101909152805191012061169490610215565b816000808381526008602052604090205460ff1660038111156116b9576116b9612cf3565b1461172c5760405162461bcd60e51b815260206004820152602160248201527f536166654f776e61626c653a2072657065746974697665206f7065726174696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152608401610a9f565b6000611736612acc565b3360009081526006602052604090205460ff16156117a15781611758816138c1565b925050600181600660006117693390565b6001600160a01b0316815260208101919091526040016000205460ff1660068110611796576117966138e1565b911515602090920201525b60005b83518160ff1610156118a45760006117ca858360ff1681518110610b4657610b466138e1565b6001600160a01b03811660009081526006602052604090205490915060ff16806118365760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a9f565b838160ff166006811061184b5761184b6138e1565b6020020151151560011415611861575050611892565b6001848260ff1660068110611878576118786138e1565b911515602090920201528461188c816138c1565b95505050505b8061189c816138c1565b9150506117a4565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff16101561191b5760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a9f565b6000848152600860205260408120805460ff1916600217905561193d88610357565b60c00151905060008160200151600181111561195b5761195b612cf3565b146119a95760405163d71b1e0560e01b815260206004820152601f60248201527f6e6f742068617665207468652073616d652074797065206f66207072697a65006044820152606401610a9f565b6080810151805151611a245760405163d71b1e0560e01b815260206004820152603a60248201527f726577617264206461746120697320696e636f72726563742e20506c6561736560448201527f20636f6e74616374207468652061646d696e6973747261746f720000000000006064820152608401610a9f565b60005b815151811015611c605760008a8152600d602052604081208351805183919085908110611a5657611a566138e1565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205411611acd5760405163d71b1e0560e01b815260206004820152601760248201527f72657761726420686173206265656e20636c61696d65640000000000000000006044820152606401610a9f565b600082600001518281518110611ae557611ae56138e1565b60200260200101519050806001600160a01b031663a9059cbb611b053390565b85602001518581518110611b1b57611b1b6138e1565b60200260200101516040518363ffffffff1660e01b8152600401611b549291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b158015611b6e57600080fd5b505af1158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba691906138f7565b50611bec8b84600001518481518110611bc157611bc16138e1565b602002602001015185602001518581518110611bdf57611bdf6138e1565b60200260200101516124e5565b336001600160a01b03167f44e6fbe8eb88c5919c29bedee22525c4697d319e64173a9aaaecdee85d7bab7b8c600086602001518681518110611c3057611c306138e1565b6020026020010151604051611c4793929190613919565b60405180910390a250611c598161393a565b9050611a27565b50505050505050505050565b611c74612acc565b6040805160c08101918290529060009060069082845b81546001600160a01b03168152600190910190602001808311611c8a575050505050905090565b600c60205260009081526040902080546001820180546001600160a01b039092169291611cdd90613870565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0990613870565b8015611d565780601f10611d2b57610100808354040283529160200191611d56565b820191906000526020600020905b815481529060010190602001808311611d3957829003601f168201915b505050505090806002018054611d6b90613870565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9790613870565b8015611de45780601f10611db957610100808354040283529160200191611de4565b820191906000526020600020905b815481529060010190602001808311611dc757829003601f168201915b505050505090806003018054611df990613870565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2590613870565b8015611e725780601f10611e4757610100808354040283529160200191611e72565b820191906000526020600020905b815481529060010190602001808311611e5557829003601f168201915b505050505090806004018054611e8790613870565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb390613870565b8015611f005780601f10611ed557610100808354040283529160200191611f00565b820191906000526020600020905b815481529060010190602001808311611ee357829003601f168201915b505050505090806005018054611f1590613870565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4190613870565b8015611f8e5780601f10611f6357610100808354040283529160200191611f8e565b820191906000526020600020905b815481529060010190602001808311611f7157829003601f168201915b50506040805160c08101909152600686018054959695919450925083915060ff166001811115611fc057611fc0612cf3565b6001811115611fd157611fd1612cf3565b81528154602090910190610100900460ff166001811115611ff457611ff4612cf3565b600181111561200557612005612cf3565b815260200160018201805461201990613870565b80601f016020809104026020016040519081016040528092919081815260200182805461204590613870565b80156120925780601f1061206757610100808354040283529160200191612092565b820191906000526020600020905b81548152906001019060200180831161207557829003601f168201915b505050505081526020016002820180546120ab90613870565b80601f01602080910402602001604051908101604052809291908181526020018280546120d790613870565b80156121245780601f106120f957610100808354040283529160200191612124565b820191906000526020600020905b81548152906001019060200180831161210757829003601f168201915b50505050508152602001600382016040518060400160405290816000820180548060200260200160405190810160405280929190818152602001828054801561219657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612178575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156121ee57602002820191906000526020600020905b8154815260200190600101908083116121da575b5050505050815250508152602001600582016040518060600160405290816000820180548060200260200160405190810160405280929190818152602001828054801561226457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612246575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156122bc57602002820191906000526020600020905b8154815260200190600101908083116122a8575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561231457602002820191906000526020600020905b815481526020019060010190808311612300575b50505050508152505081525050905087565b3360009081526006602052604090205460ff166123aa5760405162461bcd60e51b8152602060048201526024808201527f536166654f776e61626c653a2063616c6c6572206973206e6f7420746865206f60448201527f776e6572000000000000000000000000000000000000000000000000000000006064820152608401610a9f565b6001600160a01b0381166124265760405162461bcd60e51b815260206004820152602a60248201527f536166654f776e61626c653a206e6577206f776e657220697320746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610a9f565b6001600160a01b03811660009081526006602052604090205460ff16156124b55760405162461bcd60e51b815260206004820152602560248201527f536166654f776e61626c653a206e6577206f776e657220616c7265616479206560448201527f78697374730000000000000000000000000000000000000000000000000000006064820152608401610a9f565b6124be8161267e565b50565b60008060006124d0858561272b565b915091506124dd81612771565b509392505050565b6000838152600d602090815260408083206001600160a01b0386168452909152812080548392906125179084906139e9565b9091555050505050565b80515160005b81811015612679578251805182908110612543576125436138e1565b60200260200101516001600160a01b03166323b872dd6125603390565b3086602001518581518110612577576125776138e1565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b1580156125e957600080fd5b505af11580156125fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262191906138f7565b50612669600b548460000151838151811061263e5761263e6138e1565b60200260200101518560200151848151811061265c5761265c6138e1565b6020026020010151612962565b6126728161393a565b9050612527565b505050565b33600081815260066020819052604082205460ff16918491839081106126a6576126a66138e1565b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055828116600081815260066020526040808220805460ff19908116909155938716808352818320805490951660ff871617909455517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a3505050565b6000808251604114156127625760208301516040840151606085015160001a61275687828585612994565b9450945050505061276a565b506000905060025b9250929050565b600081600481111561278557612785612cf3565b141561278e5750565b60018160048111156127a2576127a2612cf3565b14156127f05760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a9f565b600281600481111561280457612804612cf3565b14156128525760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a9f565b600381600481111561286657612866612cf3565b14156128da5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610a9f565b60048160048111156128ee576128ee612cf3565b14156124be5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610a9f565b6000838152600d602090815260408083206001600160a01b038616845290915281208054839290612517908490613a00565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156129cb5750600090506003612a78565b8460ff16601b141580156129e357508460ff16601c14155b156129f45750600090506004612a78565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612a48573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612a7157600060019250925050612a78565b9150600090505b94509492505050565b6040518060e0016040528060006001600160a01b031681526020016060815260200160608152602001606081526020016060815260200160608152602001612ac7612c0a565b905290565b6040518060c001604052806006906020820280368337509192915050565b828054612af690613870565b90600052602060002090601f016020900481019282612b185760008555612b5e565b82601f10612b3157805160ff1916838001178555612b5e565b82800160010185558215612b5e579182015b82811115612b5e578251825591602001919060010190612b43565b50612b6a929150612c78565b5090565b828054828255906000526020600020908101928215612b5e579160200282015b82811115612b5e578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190612b8e565b828054828255906000526020600020908101928215612b5e5791602002820182811115612b5e578251825591602001919060010190612b43565b6040805160c081019091528060008152602001600081526020016060815260200160608152602001612c4f604051806040016040528060608152602001606081525090565b8152602001612ac760405180606001604052806060815260200160608152602001606081525090565b5b80821115612b6a5760008155600101612c79565b600060208284031215612c9f57600080fd5b5035919050565b6000815180845260005b81811015612ccc57602081850181015186830182015201612cb0565b81811115612cde576000602083870101525b50601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b600281106124be576124be612cf3565b600081518084526020808501945080840160005b83811015612d525781516001600160a01b031687529582019590820190600101612d2d565b509495945050505050565b600081518084526020808501945080840160005b83811015612d5257815187529582019590820190600101612d71565b6000815160608452612da26060850182612d19565b905060208301518482036020860152612dbb8282612d5d565b91505060408301518482036040860152612dd58282612d5d565b95945050505050565b60008151612deb81612d09565b83526020820151612dfb81612d09565b80602085015250604082015160c06040850152612e1b60c0850182612ca6565b905060608301518482036060860152612e348282612ca6565b91505060808301518482036080860152805160408352612e576040840182612d19565b9050602082015191508281036020840152612e728183612d5d565b9250505060a083015184820360a0860152612dd58282612d8d565b60208152612ea76020820183516001600160a01b03169052565b6000602083015160e06040840152612ec3610100840182612ca6565b90506040840151601f1980858403016060860152612ee18383612ca6565b92506060860151915080858403016080860152612efe8383612ca6565b925060808601519150808584030160a0860152612f1b8383612ca6565b925060a08601519150808584030160c0860152612f388383612ca6565b925060c08601519150808584030160e086015250612dd58282612dde565b80356001600160a01b0381168114612f6d57600080fd5b919050565b600080600060608486031215612f8757600080fd5b8335925060208401359150612f9e60408501612f56565b90509250925092565b60008083601f840112612fb957600080fd5b50813567ffffffffffffffff811115612fd157600080fd5b6020830191508360208260051b850101111561276a57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561302557613025612fec565b60405290565b60405160e0810167ffffffffffffffff8111828210171561302557613025612fec565b604051601f8201601f1916810167ffffffffffffffff8111828210171561307757613077612fec565b604052919050565b600067ffffffffffffffff82111561309957613099612fec565b5060051b60200190565b600067ffffffffffffffff8311156130bd576130bd612fec565b6130d06020601f19601f8601160161304e565b90508281528383830111156130e457600080fd5b828260208301376000602084830101529392505050565b600082601f83011261310c57600080fd5b8135602061312161311c8361307f565b61304e565b82815260059290921b8401810191818101908684111561314057600080fd5b8286015b8481101561319557803567ffffffffffffffff8111156131645760008081fd5b8701603f810189136131765760008081fd5b6131878986830135604084016130a3565b845250918301918301613144565b509695505050505050565b6000806000806000608086880312156131b857600080fd5b85359450602086013567ffffffffffffffff808211156131d757600080fd5b6131e389838a01612fa7565b909650945060408801359350606088013591508082111561320357600080fd5b50613210888289016130fb565b9150509295509295909350565b600082601f83011261322e57600080fd5b61323d838335602085016130a3565b9392505050565b803560028110612f6d57600080fd5b600082601f83011261326457600080fd5b8135602061327461311c8361307f565b82815260059290921b8401810191818101908684111561329357600080fd5b8286015b84811015613195576132a881612f56565b8352918301918301613297565b600082601f8301126132c657600080fd5b813560206132d661311c8361307f565b82815260059290921b840181019181810190868411156132f557600080fd5b8286015b8481101561319557803583529183019183016132f9565b60006040828403121561332257600080fd5b6040516040810167ffffffffffffffff828210818311171561334657613346612fec565b81604052829350843591508082111561335e57600080fd5b61336a86838701613253565b8352602085013591508082111561338057600080fd5b5061338d858286016132b5565b6020830152505092915050565b6000606082840312156133ac57600080fd5b6040516060810167ffffffffffffffff82821081831117156133d0576133d0612fec565b8160405282935084359150808211156133e857600080fd5b6133f486838701613253565b8352602085013591508082111561340a57600080fd5b613416868387016132b5565b6020840152604085013591508082111561342f57600080fd5b5061343c858286016132b5565b6040830152505092915050565b600060c0828403121561345b57600080fd5b613463613002565b905061346e82613244565b815261347c60208301613244565b6020820152604082013567ffffffffffffffff8082111561349c57600080fd5b6134a88583860161321d565b604084015260608401359150808211156134c157600080fd5b6134cd8583860161321d565b606084015260808401359150808211156134e657600080fd5b6134f285838601613310565b608084015260a084013591508082111561350b57600080fd5b506135188482850161339a565b60a08301525092915050565b6000806040838503121561353757600080fd5b823567ffffffffffffffff8082111561354f57600080fd5b9084019060e0828703121561356357600080fd5b61356b61302b565b61357483612f56565b815260208301358281111561358857600080fd5b6135948882860161321d565b6020830152506040830135828111156135ac57600080fd5b6135b88882860161321d565b6040830152506060830135828111156135d057600080fd5b6135dc8882860161321d565b6060830152506080830135828111156135f457600080fd5b6136008882860161321d565b60808301525060a08301358281111561361857600080fd5b6136248882860161321d565b60a08301525060c08301358281111561363c57600080fd5b61364888828601613449565b60c0830152509350602085013591508082111561366457600080fd5b5061367185828601613310565b9150509250929050565b6000806040838503121561368e57600080fd5b82359150602083013567ffffffffffffffff8111156136ac57600080fd5b613671858286016130fb565b6000806000806000608086880312156136d057600080fd5b85359450602086013567ffffffffffffffff8111156136ee57600080fd5b6136fa88828901612fa7565b9095509350506040860135915061371360608701612f56565b90509295509295909350565b60008060006060848603121561373457600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561375957600080fd5b613765868287016130fb565b9150509250925092565b60c08101818360005b60068110156137a05781516001600160a01b0316835260209283019290910190600101613778565b50505092915050565b60208101600483106137bd576137bd612cf3565b91905290565b6001600160a01b038816815260e0602082015260006137e560e0830189612ca6565b82810360408401526137f78189612ca6565b9050828103606084015261380b8188612ca6565b9050828103608084015261381f8187612ca6565b905082810360a08401526138338186612ca6565b905082810360c08401526138478185612dde565b9a9950505050505050505050565b60006020828403121561386757600080fd5b61323d82612f56565b600181811c9082168061388457607f821691505b602082108114156138a557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8114156138d8576138d86138ab565b60010192915050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561390957600080fd5b8151801515811461323d57600080fd5b8381526060810161392984612d09565b602082019390935260400152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561396c5761396c6138ab565b5060010190565b87815286602082015285604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8511156139b157600080fd5b8460051b808760608501376060920182810194909452501b6bffffffffffffffffffffffff1916608082015260940195945050505050565b6000828210156139fb576139fb6138ab565b500390565b60008219821115613a1357613a136138ab565b50019056fea2646970667358221220f4f0c30fbe684ff1c195796f0edff54393e4fe7496fa08efc4cd19b035e5e88864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80639670e56911610097578063affed0e011610066578063affed0e0146102e5578063ce0d0ca0146102ee578063dd11eaf21461031e578063f2fde38b1461034457600080fd5b80639670e569146102a25780639fa6a6e3146102b5578063a6af817d146102bd578063affe39c1146102d057600080fd5b80636f3f5772116100d35780636f3f5772146101f457806375f3958c146102075780637a29349d146102685780638b5a21431461028f57600080fd5b80630c3515ba1461010557806314fdecca146101245780634b8bce6c1461014457806353b69ea5146101df575b600080fd5b61010d600581565b60405160ff90911681526020015b60405180910390f35b610137610132366004612c8d565b610357565b60405161011b9190612e8d565b6101d1610152366004612f72565b600a546040805160208101929092527f021a828111e321f5363ceef5bb16dafb5662909dc426bcbde4fb22a7c4cd434e9082015260608082018590526080820184905282901b6bffffffffffffffffffffffff191660a082015260009060b4016040516020818303038152906040528051906020012090509392505050565b60405190815260200161011b565b6101f26101ed3660046131a0565b6109fb565b005b6101f2610202366004613524565b611060565b6101d1610215366004612c8d565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b61010d7f000000000000000000000000000000000000000000000000000000000000000081565b6101f261029d36600461367b565b6112d3565b6101d16102b03660046136b8565b6115b7565b600b546101d1565b6101f26102cb36600461371f565b611619565b6102d8611c6c565b60405161011b919061376f565b6101d160095481565b6103116102fc366004612c8d565b60086020526000908152604090205460ff1681565b60405161011b91906137a9565b61033161032c366004612c8d565b611cb1565b60405161011b97969594939291906137c3565b6101f2610352366004613855565b612326565b61035f612a81565b6000828152600c6020908152604091829020825160e0810190935280546001600160a01b03168352600181018054919284019161039b90613870565b80601f01602080910402602001604051908101604052809291908181526020018280546103c790613870565b80156104145780601f106103e957610100808354040283529160200191610414565b820191906000526020600020905b8154815290600101906020018083116103f757829003601f168201915b5050505050815260200160028201805461042d90613870565b80601f016020809104026020016040519081016040528092919081815260200182805461045990613870565b80156104a65780601f1061047b576101008083540402835291602001916104a6565b820191906000526020600020905b81548152906001019060200180831161048957829003601f168201915b505050505081526020016003820180546104bf90613870565b80601f01602080910402602001604051908101604052809291908181526020018280546104eb90613870565b80156105385780601f1061050d57610100808354040283529160200191610538565b820191906000526020600020905b81548152906001019060200180831161051b57829003601f168201915b5050505050815260200160048201805461055190613870565b80601f016020809104026020016040519081016040528092919081815260200182805461057d90613870565b80156105ca5780601f1061059f576101008083540402835291602001916105ca565b820191906000526020600020905b8154815290600101906020018083116105ad57829003601f168201915b505050505081526020016005820180546105e390613870565b80601f016020809104026020016040519081016040528092919081815260200182805461060f90613870565b801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b50505091835250506040805160c08101909152600683018054602090930192829060ff16600181111561069157610691612cf3565b60018111156106a2576106a2612cf3565b81528154602090910190610100900460ff1660018111156106c5576106c5612cf3565b60018111156106d6576106d6612cf3565b81526020016001820180546106ea90613870565b80601f016020809104026020016040519081016040528092919081815260200182805461071690613870565b80156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b5050505050815260200160028201805461077c90613870565b80601f01602080910402602001604051908101604052809291908181526020018280546107a890613870565b80156107f55780601f106107ca576101008083540402835291602001916107f5565b820191906000526020600020905b8154815290600101906020018083116107d857829003601f168201915b50505050508152602001600382016040518060400160405290816000820180548060200260200160405190810160405280929190818152602001828054801561086757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610849575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191906000526020600020905b8154815260200190600101908083116108ab575b5050505050815250508152602001600582016040518060600160405290816000820180548060200260200160405190810160405280929190818152602001828054801561093557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610917575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561098d57602002820191906000526020600020905b815481526020019060010190808311610979575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156109e557602002820191906000526020600020905b8154815260200190600101908083116109d1575b5050509190925250505090525090525092915050565b610a0b61021586868686336115b7565b816000808381526008602052604090205460ff166003811115610a3057610a30612cf3565b14610aa85760405162461bcd60e51b815260206004820152602160248201527f536166654f776e61626c653a2072657065746974697665206f7065726174696f60448201527f6e0000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000610ab2612acc565b3360009081526006602052604090205460ff1615610b1d5781610ad4816138c1565b92505060018160066000610ae53390565b6001600160a01b0316815260208101919091526040016000205460ff1660068110610b1257610b126138e1565b911515602090920201525b60005b83518160ff161015610c37576000610b5d858360ff1681518110610b4657610b466138e1565b6020026020010151876124c190919063ffffffff16565b6001600160a01b03811660009081526006602052604090205490915060ff1680610bc95760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a9f565b838160ff1660068110610bde57610bde6138e1565b6020020151151560011415610bf4575050610c25565b6001848260ff1660068110610c0b57610c0b6138e1565b9115156020909202015284610c1f816138c1565b95505050505b80610c2f816138c1565b915050610b20565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff161015610cae5760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a9f565b6000848152600860205260408120805460ff191660021790558990610cd282610357565b60c001519050600181602001516001811115610cf057610cf0612cf3565b14610d645760405163d71b1e0560e01b815260206004820152602360248201527f6e6f742068617665207468652073657061726174652074797065206f6620707260448201527f697a6500000000000000000000000000000000000000000000000000000000006064820152608401610a9f565b60a0810151805151610ddf5760405163d71b1e0560e01b815260206004820152603a60248201527f726577617264206461746120697320696e636f72726563742e20506c6561736560448201527f20636f6e74616374207468652061646d696e6973747261746f720000000000006064820152608401610a9f565b60005b815151811015611051576000848152600d602052604081208351805183919085908110610e1157610e116138e1565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054905060008d8d84818110610e5057610e506138e1565b90506020020135905081811015610efb5783602001518381518110610e7757610e776138e1565b6020026020010151811080610ea8575083604001518381518110610e9d57610e9d6138e1565b602002602001015181115b15610ef65760405163d71b1e0560e01b815260206004820152601c60248201527f72657761726420616d6f756e7420646f6573206e6f74206d61746368000000006044820152606401610a9f565b610efe565b50805b600084600001518481518110610f1657610f166138e1565b60200260200101519050806001600160a01b031663a9059cbb610f363390565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b158015610f9657600080fd5b505af1158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce91906138f7565b50610ff78786600001518681518110610fe957610fe96138e1565b6020026020010151846124e5565b336001600160a01b03167f44e6fbe8eb88c5919c29bedee22525c4697d319e64173a9aaaecdee85d7bab7b8860018560405161103593929190613919565b60405180910390a25050508061104a9061393a565b9050610de2565b50505050505050505050505050565b61106981612521565b338252600b546000908152600c602090815260409091208351815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617815581840151805185936110c2926001850192910190612aea565b50604082015180516110de916002840191602090910190612aea565b50606082015180516110fa916003840191602090910190612aea565b5060808201518051611116916004840191602090910190612aea565b5060a08201518051611132916005840191602090910190612aea565b5060c08201518051600683018054909190829060ff19166001838181111561115c5761115c612cf3565b02179055506020820151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101008360018111156111a1576111a1612cf3565b0217905550604082015180516111c1916001840191602090910190612aea565b50606082015180516111dd916002840191602090910190612aea565b5060808201518051805160038401916111fb91839160200190612b6e565b5060208281015180516112149260018501920190612bd0565b50505060a082015180518051600584019161123491839160200190612b6e565b50602082810151805161124d9260018501920190612bd0565b5060408201518051611269916002840191602090910190612bd0565b50505050509050506112783390565b6001600160a01b03167f508b33eb456cc8fa655cf3030ef0f19cb5acde250543229a965168c0ee77586d600b546040516112b491815260200190565b60405180910390a2600b600081546112cb9061393a565b909155505050565b818160006112df612acc565b3360009081526006602052604090205460ff161561134a5781611301816138c1565b925050600181600660006113123390565b6001600160a01b0316815260208101919091526040016000205460ff166006811061133f5761133f6138e1565b911515602090920201525b60005b83518160ff16101561144d576000611373858360ff1681518110610b4657610b466138e1565b6001600160a01b03811660009081526006602052604090205490915060ff16806113df5760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a9f565b838160ff16600681106113f4576113f46138e1565b602002015115156001141561140a57505061143b565b6001848260ff1660068110611421576114216138e1565b9115156020909202015284611435816138c1565b95505050505b80611445816138c1565b91505061134d565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff1610156114c45760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a9f565b600980549060006114d48361393a565b909155505060008681526008602052604081205460ff1660038111156114fc576114fc612cf3565b1461156f5760405162461bcd60e51b815260206004820152602c60248201527f536166654f776e61626c653a206f7065726174696f6e20776173206e6f74207360448201527f75626d69747465642079657400000000000000000000000000000000000000006064820152608401610a9f565b600086815260086020526040808220805460ff191660011790555187917f33775024b20f211f019e50305c897b2105edc4642384143897ac170fb37f54a191a2505050505050565b6000600a547f236bb74c476734b424d2bab617f79aad5056a45717dcce699d4599af8406b61f87878787876040516020016115f89796959493929190613973565b60405160208183030381529060405280519060200120905095945050505050565b600a54604080516020808201939093527f021a828111e321f5363ceef5bb16dafb5662909dc426bcbde4fb22a7c4cd434e8183015260608082018790526080820186905233901b6bffffffffffffffffffffffff191660a08201528151808203609401815260b4909101909152805191012061169490610215565b816000808381526008602052604090205460ff1660038111156116b9576116b9612cf3565b1461172c5760405162461bcd60e51b815260206004820152602160248201527f536166654f776e61626c653a2072657065746974697665206f7065726174696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152608401610a9f565b6000611736612acc565b3360009081526006602052604090205460ff16156117a15781611758816138c1565b925050600181600660006117693390565b6001600160a01b0316815260208101919091526040016000205460ff1660068110611796576117966138e1565b911515602090920201525b60005b83518160ff1610156118a45760006117ca858360ff1681518110610b4657610b466138e1565b6001600160a01b03811660009081526006602052604090205490915060ff16806118365760405162461bcd60e51b815260206004820181905260248201527f536166654f776e61626c653a207369676e6572206973206e6f74206f776e65726044820152606401610a9f565b838160ff166006811061184b5761184b6138e1565b6020020151151560011415611861575050611892565b6001848260ff1660068110611878576118786138e1565b911515602090920201528461188c816138c1565b95505050505b8061189c816138c1565b9150506117a4565b507f000000000000000000000000000000000000000000000000000000000000000060ff168260ff16101561191b5760405162461bcd60e51b815260206004820152601f60248201527f536166654f776e61626c653a206e6f20656e6f75676820636f6e6669726d73006044820152606401610a9f565b6000848152600860205260408120805460ff1916600217905561193d88610357565b60c00151905060008160200151600181111561195b5761195b612cf3565b146119a95760405163d71b1e0560e01b815260206004820152601f60248201527f6e6f742068617665207468652073616d652074797065206f66207072697a65006044820152606401610a9f565b6080810151805151611a245760405163d71b1e0560e01b815260206004820152603a60248201527f726577617264206461746120697320696e636f72726563742e20506c6561736560448201527f20636f6e74616374207468652061646d696e6973747261746f720000000000006064820152608401610a9f565b60005b815151811015611c605760008a8152600d602052604081208351805183919085908110611a5657611a566138e1565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205411611acd5760405163d71b1e0560e01b815260206004820152601760248201527f72657761726420686173206265656e20636c61696d65640000000000000000006044820152606401610a9f565b600082600001518281518110611ae557611ae56138e1565b60200260200101519050806001600160a01b031663a9059cbb611b053390565b85602001518581518110611b1b57611b1b6138e1565b60200260200101516040518363ffffffff1660e01b8152600401611b549291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b158015611b6e57600080fd5b505af1158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba691906138f7565b50611bec8b84600001518481518110611bc157611bc16138e1565b602002602001015185602001518581518110611bdf57611bdf6138e1565b60200260200101516124e5565b336001600160a01b03167f44e6fbe8eb88c5919c29bedee22525c4697d319e64173a9aaaecdee85d7bab7b8c600086602001518681518110611c3057611c306138e1565b6020026020010151604051611c4793929190613919565b60405180910390a250611c598161393a565b9050611a27565b50505050505050505050565b611c74612acc565b6040805160c08101918290529060009060069082845b81546001600160a01b03168152600190910190602001808311611c8a575050505050905090565b600c60205260009081526040902080546001820180546001600160a01b039092169291611cdd90613870565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0990613870565b8015611d565780601f10611d2b57610100808354040283529160200191611d56565b820191906000526020600020905b815481529060010190602001808311611d3957829003601f168201915b505050505090806002018054611d6b90613870565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9790613870565b8015611de45780601f10611db957610100808354040283529160200191611de4565b820191906000526020600020905b815481529060010190602001808311611dc757829003601f168201915b505050505090806003018054611df990613870565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2590613870565b8015611e725780601f10611e4757610100808354040283529160200191611e72565b820191906000526020600020905b815481529060010190602001808311611e5557829003601f168201915b505050505090806004018054611e8790613870565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb390613870565b8015611f005780601f10611ed557610100808354040283529160200191611f00565b820191906000526020600020905b815481529060010190602001808311611ee357829003601f168201915b505050505090806005018054611f1590613870565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4190613870565b8015611f8e5780601f10611f6357610100808354040283529160200191611f8e565b820191906000526020600020905b815481529060010190602001808311611f7157829003601f168201915b50506040805160c08101909152600686018054959695919450925083915060ff166001811115611fc057611fc0612cf3565b6001811115611fd157611fd1612cf3565b81528154602090910190610100900460ff166001811115611ff457611ff4612cf3565b600181111561200557612005612cf3565b815260200160018201805461201990613870565b80601f016020809104026020016040519081016040528092919081815260200182805461204590613870565b80156120925780601f1061206757610100808354040283529160200191612092565b820191906000526020600020905b81548152906001019060200180831161207557829003601f168201915b505050505081526020016002820180546120ab90613870565b80601f01602080910402602001604051908101604052809291908181526020018280546120d790613870565b80156121245780601f106120f957610100808354040283529160200191612124565b820191906000526020600020905b81548152906001019060200180831161210757829003601f168201915b50505050508152602001600382016040518060400160405290816000820180548060200260200160405190810160405280929190818152602001828054801561219657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612178575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156121ee57602002820191906000526020600020905b8154815260200190600101908083116121da575b5050505050815250508152602001600582016040518060600160405290816000820180548060200260200160405190810160405280929190818152602001828054801561226457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612246575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156122bc57602002820191906000526020600020905b8154815260200190600101908083116122a8575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561231457602002820191906000526020600020905b815481526020019060010190808311612300575b50505050508152505081525050905087565b3360009081526006602052604090205460ff166123aa5760405162461bcd60e51b8152602060048201526024808201527f536166654f776e61626c653a2063616c6c6572206973206e6f7420746865206f60448201527f776e6572000000000000000000000000000000000000000000000000000000006064820152608401610a9f565b6001600160a01b0381166124265760405162461bcd60e51b815260206004820152602a60248201527f536166654f776e61626c653a206e6577206f776e657220697320746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610a9f565b6001600160a01b03811660009081526006602052604090205460ff16156124b55760405162461bcd60e51b815260206004820152602560248201527f536166654f776e61626c653a206e6577206f776e657220616c7265616479206560448201527f78697374730000000000000000000000000000000000000000000000000000006064820152608401610a9f565b6124be8161267e565b50565b60008060006124d0858561272b565b915091506124dd81612771565b509392505050565b6000838152600d602090815260408083206001600160a01b0386168452909152812080548392906125179084906139e9565b9091555050505050565b80515160005b81811015612679578251805182908110612543576125436138e1565b60200260200101516001600160a01b03166323b872dd6125603390565b3086602001518581518110612577576125776138e1565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b1580156125e957600080fd5b505af11580156125fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262191906138f7565b50612669600b548460000151838151811061263e5761263e6138e1565b60200260200101518560200151848151811061265c5761265c6138e1565b6020026020010151612962565b6126728161393a565b9050612527565b505050565b33600081815260066020819052604082205460ff16918491839081106126a6576126a66138e1565b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055828116600081815260066020526040808220805460ff19908116909155938716808352818320805490951660ff871617909455517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a3505050565b6000808251604114156127625760208301516040840151606085015160001a61275687828585612994565b9450945050505061276a565b506000905060025b9250929050565b600081600481111561278557612785612cf3565b141561278e5750565b60018160048111156127a2576127a2612cf3565b14156127f05760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a9f565b600281600481111561280457612804612cf3565b14156128525760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a9f565b600381600481111561286657612866612cf3565b14156128da5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610a9f565b60048160048111156128ee576128ee612cf3565b14156124be5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610a9f565b6000838152600d602090815260408083206001600160a01b038616845290915281208054839290612517908490613a00565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156129cb5750600090506003612a78565b8460ff16601b141580156129e357508460ff16601c14155b156129f45750600090506004612a78565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612a48573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612a7157600060019250925050612a78565b9150600090505b94509492505050565b6040518060e0016040528060006001600160a01b031681526020016060815260200160608152602001606081526020016060815260200160608152602001612ac7612c0a565b905290565b6040518060c001604052806006906020820280368337509192915050565b828054612af690613870565b90600052602060002090601f016020900481019282612b185760008555612b5e565b82601f10612b3157805160ff1916838001178555612b5e565b82800160010185558215612b5e579182015b82811115612b5e578251825591602001919060010190612b43565b50612b6a929150612c78565b5090565b828054828255906000526020600020908101928215612b5e579160200282015b82811115612b5e578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190612b8e565b828054828255906000526020600020908101928215612b5e5791602002820182811115612b5e578251825591602001919060010190612b43565b6040805160c081019091528060008152602001600081526020016060815260200160608152602001612c4f604051806040016040528060608152602001606081525090565b8152602001612ac760405180606001604052806060815260200160608152602001606081525090565b5b80821115612b6a5760008155600101612c79565b600060208284031215612c9f57600080fd5b5035919050565b6000815180845260005b81811015612ccc57602081850181015186830182015201612cb0565b81811115612cde576000602083870101525b50601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b600281106124be576124be612cf3565b600081518084526020808501945080840160005b83811015612d525781516001600160a01b031687529582019590820190600101612d2d565b509495945050505050565b600081518084526020808501945080840160005b83811015612d5257815187529582019590820190600101612d71565b6000815160608452612da26060850182612d19565b905060208301518482036020860152612dbb8282612d5d565b91505060408301518482036040860152612dd58282612d5d565b95945050505050565b60008151612deb81612d09565b83526020820151612dfb81612d09565b80602085015250604082015160c06040850152612e1b60c0850182612ca6565b905060608301518482036060860152612e348282612ca6565b91505060808301518482036080860152805160408352612e576040840182612d19565b9050602082015191508281036020840152612e728183612d5d565b9250505060a083015184820360a0860152612dd58282612d8d565b60208152612ea76020820183516001600160a01b03169052565b6000602083015160e06040840152612ec3610100840182612ca6565b90506040840151601f1980858403016060860152612ee18383612ca6565b92506060860151915080858403016080860152612efe8383612ca6565b925060808601519150808584030160a0860152612f1b8383612ca6565b925060a08601519150808584030160c0860152612f388383612ca6565b925060c08601519150808584030160e086015250612dd58282612dde565b80356001600160a01b0381168114612f6d57600080fd5b919050565b600080600060608486031215612f8757600080fd5b8335925060208401359150612f9e60408501612f56565b90509250925092565b60008083601f840112612fb957600080fd5b50813567ffffffffffffffff811115612fd157600080fd5b6020830191508360208260051b850101111561276a57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561302557613025612fec565b60405290565b60405160e0810167ffffffffffffffff8111828210171561302557613025612fec565b604051601f8201601f1916810167ffffffffffffffff8111828210171561307757613077612fec565b604052919050565b600067ffffffffffffffff82111561309957613099612fec565b5060051b60200190565b600067ffffffffffffffff8311156130bd576130bd612fec565b6130d06020601f19601f8601160161304e565b90508281528383830111156130e457600080fd5b828260208301376000602084830101529392505050565b600082601f83011261310c57600080fd5b8135602061312161311c8361307f565b61304e565b82815260059290921b8401810191818101908684111561314057600080fd5b8286015b8481101561319557803567ffffffffffffffff8111156131645760008081fd5b8701603f810189136131765760008081fd5b6131878986830135604084016130a3565b845250918301918301613144565b509695505050505050565b6000806000806000608086880312156131b857600080fd5b85359450602086013567ffffffffffffffff808211156131d757600080fd5b6131e389838a01612fa7565b909650945060408801359350606088013591508082111561320357600080fd5b50613210888289016130fb565b9150509295509295909350565b600082601f83011261322e57600080fd5b61323d838335602085016130a3565b9392505050565b803560028110612f6d57600080fd5b600082601f83011261326457600080fd5b8135602061327461311c8361307f565b82815260059290921b8401810191818101908684111561329357600080fd5b8286015b84811015613195576132a881612f56565b8352918301918301613297565b600082601f8301126132c657600080fd5b813560206132d661311c8361307f565b82815260059290921b840181019181810190868411156132f557600080fd5b8286015b8481101561319557803583529183019183016132f9565b60006040828403121561332257600080fd5b6040516040810167ffffffffffffffff828210818311171561334657613346612fec565b81604052829350843591508082111561335e57600080fd5b61336a86838701613253565b8352602085013591508082111561338057600080fd5b5061338d858286016132b5565b6020830152505092915050565b6000606082840312156133ac57600080fd5b6040516060810167ffffffffffffffff82821081831117156133d0576133d0612fec565b8160405282935084359150808211156133e857600080fd5b6133f486838701613253565b8352602085013591508082111561340a57600080fd5b613416868387016132b5565b6020840152604085013591508082111561342f57600080fd5b5061343c858286016132b5565b6040830152505092915050565b600060c0828403121561345b57600080fd5b613463613002565b905061346e82613244565b815261347c60208301613244565b6020820152604082013567ffffffffffffffff8082111561349c57600080fd5b6134a88583860161321d565b604084015260608401359150808211156134c157600080fd5b6134cd8583860161321d565b606084015260808401359150808211156134e657600080fd5b6134f285838601613310565b608084015260a084013591508082111561350b57600080fd5b506135188482850161339a565b60a08301525092915050565b6000806040838503121561353757600080fd5b823567ffffffffffffffff8082111561354f57600080fd5b9084019060e0828703121561356357600080fd5b61356b61302b565b61357483612f56565b815260208301358281111561358857600080fd5b6135948882860161321d565b6020830152506040830135828111156135ac57600080fd5b6135b88882860161321d565b6040830152506060830135828111156135d057600080fd5b6135dc8882860161321d565b6060830152506080830135828111156135f457600080fd5b6136008882860161321d565b60808301525060a08301358281111561361857600080fd5b6136248882860161321d565b60a08301525060c08301358281111561363c57600080fd5b61364888828601613449565b60c0830152509350602085013591508082111561366457600080fd5b5061367185828601613310565b9150509250929050565b6000806040838503121561368e57600080fd5b82359150602083013567ffffffffffffffff8111156136ac57600080fd5b613671858286016130fb565b6000806000806000608086880312156136d057600080fd5b85359450602086013567ffffffffffffffff8111156136ee57600080fd5b6136fa88828901612fa7565b9095509350506040860135915061371360608701612f56565b90509295509295909350565b60008060006060848603121561373457600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561375957600080fd5b613765868287016130fb565b9150509250925092565b60c08101818360005b60068110156137a05781516001600160a01b0316835260209283019290910190600101613778565b50505092915050565b60208101600483106137bd576137bd612cf3565b91905290565b6001600160a01b038816815260e0602082015260006137e560e0830189612ca6565b82810360408401526137f78189612ca6565b9050828103606084015261380b8188612ca6565b9050828103608084015261381f8187612ca6565b905082810360a08401526138338186612ca6565b905082810360c08401526138478185612dde565b9a9950505050505050505050565b60006020828403121561386757600080fd5b61323d82612f56565b600181811c9082168061388457607f821691505b602082108114156138a557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8114156138d8576138d86138ab565b60010192915050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561390957600080fd5b8151801515811461323d57600080fd5b8381526060810161392984612d09565b602082019390935260400152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561396c5761396c6138ab565b5060010190565b87815286602082015285604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8511156139b157600080fd5b8460051b808760608501376060920182810194909452501b6bffffffffffffffffffffffff1916608082015260940195945050505050565b6000828210156139fb576139fb6138ab565b500390565b60008219821115613a1357613a136138ab565b50019056fea2646970667358221220f4f0c30fbe684ff1c195796f0edff54393e4fe7496fa08efc4cd19b035e5e88864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2127,
        "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)6_storage"
      },
      {
        "astId": 2131,
        "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
        "label": "_ownersIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 2133,
        "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
        "label": "_numOwners",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 2143,
        "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
        "label": "operationsStatus",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_enum(OpStatus)2123)"
      },
      {
        "astId": 2145,
        "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
        "label": "nonce",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2828,
        "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
        "label": "DOMAIN",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 2836,
        "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
        "label": "_id",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2891,
        "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
        "label": "List",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Promotion)2852_storage)"
      },
      {
        "astId": 2897,
        "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
        "label": "_prizesPoolsErc20",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)6_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(OpStatus)2123": {
        "encoding": "inplace",
        "label": "enum SafeOwnable.OpStatus",
        "numberOfBytes": "1"
      },
      "t_enum(OpenMethod)2831": {
        "encoding": "inplace",
        "label": "enum PromotionV1.OpenMethod",
        "numberOfBytes": "1"
      },
      "t_enum(ReceiveMethod)2834": {
        "encoding": "inplace",
        "label": "enum PromotionV1.ReceiveMethod",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_bytes32,t_enum(OpStatus)2123)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum SafeOwnable.OpStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(OpStatus)2123"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Promotion)2852_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PromotionV1.Promotion)",
        "numberOfBytes": "32",
        "value": "t_struct(Promotion)2852_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Prize20SAME)2876_storage": {
        "encoding": "inplace",
        "label": "struct PromotionV1.Prize20SAME",
        "members": [
          {
            "astId": 2872,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2875,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Prize20SEPARATE)2886_storage": {
        "encoding": "inplace",
        "label": "struct PromotionV1.Prize20SEPARATE",
        "members": [
          {
            "astId": 2879,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2882,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "min",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2885,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "max",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Promotion)2852_storage": {
        "encoding": "inplace",
        "label": "struct PromotionV1.Promotion",
        "members": [
          {
            "astId": 2838,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "publisher",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2840,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "name_",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2842,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "description_",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2844,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "time_frame",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2846,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "tasks",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2848,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "conditions",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2851,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "rewards",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Rewards)2869_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Rewards)2869_storage": {
        "encoding": "inplace",
        "label": "struct PromotionV1.Rewards",
        "members": [
          {
            "astId": 2855,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "open_method",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(OpenMethod)2831"
          },
          {
            "astId": 2858,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "receive_method",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(ReceiveMethod)2834"
          },
          {
            "astId": 2860,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "chain_id",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2862,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "chain_name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2865,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "prizes_erc20_same",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Prize20SAME)2876_storage"
          },
          {
            "astId": 2868,
            "contract": "contracts/Promotion/PromotionV1.sol:PromotionV1",
            "label": "prizes_erc20_separate",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Prize20SEPARATE)2886_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
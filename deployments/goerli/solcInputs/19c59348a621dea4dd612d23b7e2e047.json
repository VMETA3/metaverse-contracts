{
  "language": "Solidity",
  "sources": {
    "contracts/Abstract/Operators.sol": {
      "content": "// Lib/Prize.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract Operators {\n    using ECDSA for bytes32;\n\n    address[] operators;\n\n    constructor(address[] memory _operators) {\n        require(_operators.length <= 5, \"Too many operators\");\n        for (uint8 i = 0; i < _operators.length; i++) {\n            operators[i] = _operators[i];\n        }\n    }\n\n    function _checkSigs(\n        bytes32 txhash,\n        bytes[] memory sigs,\n        uint8 numSigs\n    ) private view returns (bool) {\n        uint8 c = 0;\n        //emit log_named_uint(\"sigs len\", sigs.length);\n        bool[] memory bops = new bool[](operators.length);\n        for (uint8 i = 0; i < sigs.length; i++) {\n            // emit log_named_bytes(\"txHash\", txHash);\n            if (!_findOpt(txhash.recover(sigs[i]), bops)) {\n                return false;\n            }\n            c++;\n        }\n        //emit log_named_uint(\"c\", c);\n        if (c > numSigs) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _findOpt(address sigaddr, bool[] memory bops) private view returns (bool) {\n        for (uint8 i = 0; i < operators.length; i++) {\n            //emit log_named_address(\"operators\", operators[i]);\n            if (operators[i] != address(0x0)) {\n                if (bops[i] == false) {\n                    if (operators[i] == sigaddr) {\n                        //emit log_named_address(\"find\", operators[i]);\n                        bops[i] = true;\n                        //emit log(\"set true\");\n                        return true;\n                    }\n                }\n            } else {\n                break;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "contracts/Test/GameItem.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract GameItem is ERC721URIStorage {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n\n    constructor() ERC721(\"GameItem\", \"ITM\") {}\n\n    function awardItem(address player, string memory tokenURI) public returns (uint256) {\n        uint256 newItemId = _tokenIds.current();\n        _mint(player, newItemId);\n        _setTokenURI(newItemId, tokenURI);\n\n        _tokenIds.increment();\n        return newItemId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/Advertise/ERC721Ticket.sol": {
      "content": "// contracts/Advertise.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract ERC721Ticket is ERC721URIStorage, Ownable {\n    event mint(address indexed from, uint256 tokenId);\n\n    // Control NFTIDs\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n    uint256 public total;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 total_\n    ) ERC721(name, symbol) {\n        total = total_ - 1;\n    }\n\n    function awardItem(address player, string memory tokenURI) public onlyOwner returns (uint256) {\n        uint256 newItemId = _tokenIds.current();\n        require(newItemId <= total, \"UpperLimit: the limit has been reached\");\n        _mint(player, newItemId);\n        _setTokenURI(newItemId, tokenURI);\n\n        _tokenIds.increment();\n        emit mint(player, newItemId);\n        return newItemId;\n    }\n\n    function batchAwardItem(\n        address player,\n        string memory tokenURI,\n        uint256 total_\n    ) public onlyOwner returns (bool) {\n        require(((_tokenIds.current() + total_) - 1) <= total, \"UpperLimit: the limit has been reached\");\n        for (uint256 i = 0; i < total_; i++) {\n            awardItem(player, tokenURI);\n        }\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/Promotion/PromotionV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {SafeOwnable} from \"../Abstract/SafeOwnable.sol\";\nimport {ParameterError} from \"../Error/Error.sol\";\n\ncontract PromotionV1 is SafeOwnable {\n    using SafeERC20 for IERC20;\n\n    bytes32 private DOMAIN;\n    enum OpenMethod {\n        FCFS,\n        LuckyDraw\n    }\n    enum ReceiveMethod {\n        SAME,\n        SEPARATE\n    }\n\n    uint256 private _id;\n    struct Promotion {\n        address publisher;\n        string name_;\n        string description_;\n        string time_frame;\n        string tasks;\n        string conditions;\n        Rewards rewards;\n    }\n\n    struct Rewards {\n        OpenMethod open_method;\n        ReceiveMethod receive_method;\n        string chain_id;\n        string chain_name;\n        Prize20SAME prizes_erc20_same;\n        Prize20SEPARATE prizes_erc20_separate;\n    }\n    struct Prize20SAME {\n        address[] addr;\n        uint256[] number;\n    }\n    struct Prize20SEPARATE {\n        address[] addr;\n        uint256[] min;\n        uint256[] max;\n    }\n    mapping(uint256 => Promotion) public List;\n\n    // ERC20 Prize Pool\n    mapping(uint256 => mapping(address => uint256)) private _prizesPoolsErc20;\n\n    // Event log\n    event ReleasePromotion(address indexed user, uint256 id);\n    event ClaimReward(address indexed user, uint256 id, ReceiveMethod receiveMethod, uint256 amount);\n\n    modifier DataCheck() {\n        _;\n    }\n\n    constructor(address[] memory owners, uint8 signRequired_) SafeOwnable(owners, signRequired_) {\n        _id = 1;\n        DOMAIN = keccak256(\n            abi.encode(keccak256(\"Domain(uint256 chainId,address verifyingContract)\"), block.chainid, _this())\n        );\n    }\n\n    function current() public view returns (uint256) {\n        return _id;\n    }\n\n    function releasePromotion(Promotion memory promotion_, Prize20SAME memory prizes_) public {\n        depositPrizesErc20(prizes_);\n        promotion_.publisher = _msgSender();\n        List[_id] = promotion_;\n        emit ReleasePromotion(_msgSender(), _id);\n        ++_id;\n    }\n\n    function getPromotion(uint256 id_) public view returns (Promotion memory) {\n        return List[id_];\n    }\n\n    function _this() private view returns (address) {\n        return address(this);\n    }\n\n    function depositPrizesErc20(Prize20SAME memory prize) private {\n        // In the most reasonable case, verify that the amount of each currency stored is sufficient for the activity\n        uint256 len = prize.addr.length;\n        for (uint256 i = 0; i < len; ++i) {\n            IERC20(prize.addr[i]).transferFrom(_msgSender(), _this(), prize.number[i]);\n            injectionPool(_id, prize.addr[i], prize.number[i]);\n        }\n    }\n\n    function injectionPool(\n        uint256 id,\n        address token,\n        uint256 amount\n    ) private {\n        _prizesPoolsErc20[id][token] += amount;\n    }\n\n    function deductionPool(\n        uint256 id,\n        address token,\n        uint256 amount\n    ) private {\n        _prizesPoolsErc20[id][token] -= amount;\n    }\n\n    function getRewardSameHash(\n        uint256 id_,\n        uint256 nonce_,\n        address who\n    ) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(DOMAIN, keccak256(\"getRewardSame(uint256, uint256)\"), id_, nonce_, who));\n    }\n\n    function getRewardSame(\n        uint256 id_,\n        uint256 nonce_,\n        bytes[] memory signs\n    ) external onlyMultipleOwnerIndependent(HashToSign(getRewardSameHash(id_, nonce_, _msgSender())), signs) {\n        Rewards memory reward = getPromotion(id_).rewards;\n        if (reward.receive_method != ReceiveMethod.SAME) revert ParameterError(\"not have the same type of prize\");\n        Prize20SAME memory list = reward.prizes_erc20_same;\n        if (list.addr.length == 0) revert ParameterError(\"reward data is incorrect. Please contact the administrator\");\n        for (uint256 i = 0; i < list.addr.length; ++i) {\n            if (_prizesPoolsErc20[id_][list.addr[i]] <= 0) revert ParameterError(\"reward has been claimed\");\n            IERC20 token = IERC20(list.addr[i]);\n            token.transfer(_msgSender(), list.number[i]);\n            deductionPool(id_, list.addr[i], list.number[i]);\n            emit ClaimReward(_msgSender(), id_, ReceiveMethod.SAME, list.number[i]);\n        }\n    }\n\n    function getRewardSeparateHash(\n        uint256 id_,\n        uint256[] calldata num_,\n        uint256 nonce_,\n        address who\n    ) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    DOMAIN,\n                    keccak256(\"getRewardSeparate(uint256, uint256[], uint256)\"),\n                    id_,\n                    num_,\n                    nonce_,\n                    who\n                )\n            );\n    }\n\n    function getRewardSeparate(\n        uint256 id_,\n        uint256[] calldata num_,\n        uint256 nonce_,\n        bytes[] memory signs\n    ) external onlyMultipleOwnerIndependent(HashToSign(getRewardSeparateHash(id_, num_, nonce_, _msgSender())), signs) {\n        uint256 id = id_;\n        Rewards memory reward = getPromotion(id).rewards;\n        if (reward.receive_method != ReceiveMethod.SEPARATE) {\n            revert ParameterError(\"not have the separate type of prize\");\n        }\n        Prize20SEPARATE memory list = reward.prizes_erc20_separate;\n        if (list.addr.length == 0) {\n            revert ParameterError(\"reward data is incorrect. Please contact the administrator\");\n        }\n        for (uint256 i = 0; i < list.addr.length; ++i) {\n            uint256 remaining = _prizesPoolsErc20[id][list.addr[i]];\n            uint256 num = num_[i];\n            if (num < remaining) {\n                if (num < list.min[i] || num > list.max[i]) revert ParameterError(\"reward amount does not match\");\n            } else {\n                num = remaining;\n            }\n            IERC20 token = IERC20(list.addr[i]);\n            token.transfer(_msgSender(), num);\n            deductionPool(id, list.addr[i], num);\n            emit ClaimReward(_msgSender(), id, ReceiveMethod.SEPARATE, num);\n        }\n    }\n}\n"
    },
    "contracts/Abstract/SafeOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// support multiple owners to manager\nabstract contract SafeOwnable is Context {\n    using ECDSA for bytes32;\n    enum OpStatus {\n        OpDefault,\n        OpPending,\n        OpExecuted,\n        OpCancel\n    }\n\n    address[6] private _owners;\n    mapping(address => uint8) private _ownersIndex; // from 1\n    uint8 private _numOwners;\n    uint8 public constant maxNumOwners = 5;\n    // the number of owners that must confirm before operation run.\n    uint8 public immutable signRequired;\n    mapping(bytes32 => OpStatus) public operationsStatus;\n\n    uint256 public nonce; //avoid operation hash being the same\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event OperationAdded(bytes32 indexed opHash);\n\n    constructor(address[] memory ownerList, uint8 signRequired_) {\n        require(ownerList.length <= maxNumOwners, \"SafeOwnable:exceed maximum number owners\");\n        require(signRequired_ != 0, \"SafeOwnable: signRequired is zero\");\n\n        signRequired = signRequired_;\n        for (uint256 i = 0; i < ownerList.length; i++) {\n            address owner = ownerList[i];\n            require(_ownersIndex[owner] == 0, \"SafeOwnable: owner already exists\");\n            _owners[++_numOwners] = owner;\n            _ownersIndex[owner] = _numOwners;\n\n            emit OwnershipTransferred(address(0), owner);\n        }\n\n        require(signRequired <= _numOwners, \"SafeOwnable: owners less than signRequired\");\n    }\n\n    modifier onlyOwner() {\n        require(_ownersIndex[_msgSender()] > 0, \"SafeOwnable: caller is not the owner\");\n        _;\n    }\n\n    modifier onlyMultipleOwner(bytes32 dataHash, bytes[] memory sigs) {\n        uint8 confirmed = 0;\n        bool[maxNumOwners + 1] memory mark;\n        if (_ownersIndex[_msgSender()] > 0) {\n            confirmed++;\n            mark[_ownersIndex[_msgSender()]] = true;\n        }\n        for (uint8 i = 0; i < sigs.length; i++) {\n            address owner = dataHash.recover(sigs[i]);\n            uint8 ownerIndex = _ownersIndex[owner];\n            require(ownerIndex > 0, \"SafeOwnable: signer is not owner\");\n            if (mark[ownerIndex] == true) {\n                continue;\n            }\n            mark[ownerIndex] = true;\n            confirmed++;\n        }\n\n        require(confirmed >= signRequired, \"SafeOwnable: no enough confirms\");\n        nonce++;\n        _;\n    }\n\n    modifier onlyOperationPendding(bytes32 opHash) {\n        require(operationsStatus[opHash] == OpStatus.OpPending, \"SafeOwnable: operation not in pending\");\n        operationsStatus[opHash] = OpStatus.OpExecuted;\n        _;\n    }\n\n    function AddOpHashToPending(bytes32 opHash, bytes[] memory sigs) public onlyMultipleOwner(opHash, sigs) {\n        require(operationsStatus[opHash] == OpStatus.OpDefault, \"SafeOwnable: operation was not submitted yet\");\n        operationsStatus[opHash] = OpStatus.OpPending;\n        emit OperationAdded(opHash);\n    }\n\n    modifier onlyMultipleOwnerIndependent(bytes32 dataHash, bytes[] memory sigs) {\n        require(operationsStatus[dataHash] == OpStatus.OpDefault, \"SafeOwnable: repetitive operation\");\n        uint8 confirmed = 0;\n        bool[maxNumOwners + 1] memory mark;\n        if (_ownersIndex[_msgSender()] > 0) {\n            confirmed++;\n            mark[_ownersIndex[_msgSender()]] = true;\n        }\n        for (uint8 i = 0; i < sigs.length; i++) {\n            address owner = dataHash.recover(sigs[i]);\n            uint8 ownerIndex = _ownersIndex[owner];\n            require(ownerIndex > 0, \"SafeOwnable: signer is not owner\");\n            if (mark[ownerIndex] == true) {\n                continue;\n            }\n            mark[ownerIndex] = true;\n            confirmed++;\n        }\n        require(confirmed >= signRequired, \"SafeOwnable: no enough confirms\");\n        operationsStatus[dataHash] = OpStatus.OpExecuted;\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"SafeOwnable: new owner is the zero address\");\n        require(_ownersIndex[newOwner] == 0, \"SafeOwnable: new owner already exists\");\n\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _msgSender();\n        uint8 oldOwnerIndex = _ownersIndex[oldOwner];\n        _owners[oldOwnerIndex] = newOwner;\n        _ownersIndex[oldOwner] = 0;\n        _ownersIndex[newOwner] = oldOwnerIndex;\n\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function owners() public view returns (address[6] memory) {\n        return _owners;\n    }\n\n    function HashToSign(bytes32 data) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", data));\n    }\n}\n"
    },
    "contracts/Error/Error.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nerror ParameterError(string);\n"
    },
    "contracts/Advertise/Settlement.sol": {
      "content": "// contracts/advertise/Settlement.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/* Interface Imports */\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {ISettlement} from \"./ISettlement.sol\";\nimport {Advertise} from \"./Advertise.sol\";\n\n/* Library Imports */\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Prize} from \"../Lib/Prize.sol\";\n\n/* Contract Imports */\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract Settlement is ISettlement, Ownable {\n    using SafeERC20 for IERC20;\n\n    Advertise public AD;\n    address public ERC20Reward;\n\n    struct PrizeClaimRecord {\n        bool isLucky;\n        bool Universal;\n        bool SurpriseToken;\n        bool SurpriseNFT;\n    }\n    mapping(uint256 => PrizeClaimRecord) private _prize_claim_status;\n\n    constructor(address ad_address_) {\n        AD = Advertise(ad_address_);\n    }\n\n    modifier isToken(address token) {\n        require((token == AD.getUniversalToken() || token == AD.getSurpriseToken()), \"isToken: invalid token\");\n        _;\n    }\n\n    function getUniversalToken() public view returns (address) {\n        return AD.getUniversalToken();\n    }\n\n    modifier isEnough(address token, uint256 num) {\n        uint256 total = 0;\n        address universal_token = AD.getUniversalToken();\n        address surprise_token = AD.getSurpriseToken();\n        if (universal_token == token) {\n            total += ((AD.total() + 1) * AD.getUniversalAmount());\n        }\n        if (surprise_token == token) {\n            total += AD.getSurpriseAmount();\n        }\n        require(total == num, \"isEnough: Not enough tokens\");\n        _;\n    }\n\n    modifier isEnded() {\n        require(AD.getEndTime() < AD.getCurrentTime(), \"Is not ended\");\n        require(AD.getSurpriseStatus(), \"The lucky man is not revealed\");\n        _;\n    }\n\n    bool internal locked;\n    modifier noReentrant() {\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    modifier isLucky(uint256 ticket_id) {\n        uint256 LuckyMan = AD.getSurpriseLuckyId();\n        require(ticket_id == LuckyMan, \"This Ticket did not win the grand prize\");\n        _;\n    }\n\n    function _recordPrizeAmount(uint256 ticket_id, bool is_lucky) private {\n        _prize_claim_status[ticket_id].Universal = true;\n        bool burn = true;\n        if (is_lucky) {\n            burn = false;\n            _prize_claim_status[ticket_id].SurpriseToken = true;\n            if (_prize_claim_status[ticket_id].SurpriseNFT) {\n                burn = true;\n            }\n        }\n        if (burn) {\n            AD.burn(ticket_id);\n        }\n    }\n\n    function _recordPrizeNFT(uint256 ticket_id) private {\n        _prize_claim_status[ticket_id].SurpriseNFT = true;\n        if (_prize_claim_status[ticket_id].SurpriseToken) {\n            AD.burn(ticket_id);\n        }\n    }\n\n    function _getPrize(uint256 ticket_id, address token) private view returns (address _to, uint256 amount) {\n        _to = payable(_to = AD.ownerOf(ticket_id));\n        uint256 LuckyMan = AD.getSurpriseLuckyId();\n        bool is_lucky = (ticket_id == LuckyMan);\n        amount = _getAmount(is_lucky, token);\n    }\n\n    function _getPrizeNFT(uint256 ticket_id)\n        private\n        view\n        returns (\n            address _to,\n            address nft_token,\n            uint256 nft_id\n        )\n    {\n        _to = AD.ownerOf(ticket_id);\n        nft_token = AD.getSurpriseNftToken();\n        nft_id = AD.getSurpriseNftId();\n    }\n\n    function _getUniversalAmount(address token) private view returns (uint256) {\n        address u_token = AD.getUniversalToken();\n        if (u_token != token) {\n            return 0;\n        }\n        return AD.getUniversalAmount();\n    }\n\n    function _getSurpriseAmount(address token) private view returns (uint256 total) {\n        address u_token = AD.getSurpriseToken();\n        if (u_token != token) {\n            return 0;\n        }\n        total += AD.getSurpriseAmount();\n        total += _getUniversalAmount(token);\n        return total;\n    }\n\n    function _getAmount(bool is_lucky, address token) private view returns (uint256 amount) {\n        if (is_lucky) {\n            amount = _getSurpriseAmount(token);\n        } else {\n            amount = _getUniversalAmount(token);\n        }\n    }\n\n    receive() external payable {\n        _VM3Deposit(msg.sender, 200_000, bytes(\"\"));\n    }\n\n    function depositVM3(bytes calldata data_)\n        external\n        payable\n        override\n        isToken(address(0))\n        isEnough(address(0), msg.value)\n    {\n        _VM3Deposit(msg.sender, msg.value, data_);\n    }\n\n    function depositERC20(address token, uint256 amount) external override isToken(token) isEnough(token, amount) {\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        emit ERC20Deposit(msg.sender, token, amount);\n    }\n\n    function _VM3Deposit(\n        address from,\n        uint256 amount,\n        bytes memory data_\n    ) internal {\n        emit VM3Deposit(from, amount, data_);\n    }\n\n    function settlementVM3(uint256 ticket_id) public payable noReentrant isEnded isToken(address(0)) {\n        (address _to, uint256 amount) = _getPrize(ticket_id, address(0));\n        if (amount > 0) {\n            bool sent = payable(_to).send(amount);\n            require(sent, \"Failed to send\");\n            _recordPrizeAmount(ticket_id, (ticket_id == AD.getSurpriseLuckyId()));\n        }\n    }\n\n    function settlementERC20(address token, uint256 ticket_id) public noReentrant isEnded isToken(token) {\n        (address _to, uint256 amount) = _getPrize(ticket_id, token);\n        if (amount > 0) {\n            IERC20(token).safeTransfer(_to, amount);\n            _recordPrizeAmount(ticket_id, (ticket_id == AD.getSurpriseLuckyId()));\n        }\n    }\n\n    function settlementERC721(uint256 ticket_id) public noReentrant isEnded isLucky(ticket_id) {\n        (address _to, address token, uint256 nft_id) = _getPrizeNFT(ticket_id);\n        IERC721(token).safeTransferFrom(address(this), _to, nft_id);\n        _recordPrizeNFT(ticket_id);\n    }\n}\n"
    },
    "contracts/Advertise/ISettlement.sol": {
      "content": "// contracts/advertise/Settlement.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface ISettlement {\n    /**********\n     * Events *\n     **********/\n    event VM3Deposit(address indexed from, uint256 amount, bytes data);\n\n    event ERC20Deposit(address indexed from, address token, uint256 amount);\n\n    /********************\n     * Public Functions *\n     ********************/\n    function depositVM3(bytes calldata data) external payable;\n\n    function depositERC20(address token, uint256 amount) external;\n}\n"
    },
    "contracts/Advertise/Advertise.sol": {
      "content": "// contracts/advertise/advertise.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/* Interface Imports */\nimport {IAdvertise} from \"./IAdvertise.sol\";\n\n/* Library Imports */\nimport {Time} from \"../Lib/Time.sol\";\nimport {Prize} from \"../Lib/Prize.sol\";\n\n/* Contract Imports */\nimport {ERC721Ticket} from \"./ERC721Ticket.sol\";\n\ncontract Advertise is IAdvertise, ERC721Ticket {\n    // Control timestamp\n    using Time for Time.Timestamp;\n    Time.Timestamp private _timestamp;\n\n    // Prizes for current ad\n    using Prize for Prize.Universal;\n    Prize.Universal private Universal;\n    using Prize for Prize.Surprise;\n    Prize.Surprise private Surprise;\n\n    // Used to manage NFT transactions and settlements\n    uint256 public starting_time;\n    uint256 public end_time;\n    uint256 public cap_per_person = 0; // Maximum amount of prizes held per account, 0 means no limit\n\n    address private settlement;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 total\n    ) ERC721Ticket(name, symbol, total) {}\n\n    modifier isActive() {\n        uint256 time = _timestamp._getCurrentTime();\n        require((time >= starting_time && time <= end_time), \"isActive: Not at the specified time\");\n        _;\n    }\n\n    modifier revealRewards() {\n        uint256 time = _timestamp._getCurrentTime();\n        require((time > end_time), \"revealRewards: It's not time to reveal the rewards\");\n        _;\n    }\n\n    modifier onlySettlement() {\n        require(msg.sender == settlement, \"onlySettlement: Permission denied\");\n        _;\n    }\n\n    function setSettlement(address addr_) external onlyOwner {\n        settlement = addr_;\n    }\n\n    function setTestTime(uint256 timestamp_) external override onlyOwner {\n        _timestamp._setCurrentTime(timestamp_);\n        emit SetTestTime(timestamp_);\n    }\n\n    function setAdTime(uint256 start_, uint256 end_) external override onlyOwner {\n        require(start_ < end_, \"invalid time\");\n        starting_time = start_;\n        end_time = end_;\n        emit SetAdTime(starting_time, end_time);\n    }\n\n    function setCapPerPerson(uint256 cap_per_person_) external override onlyOwner {\n        cap_per_person = cap_per_person_;\n        emit SetCapPerPerson(cap_per_person);\n    }\n\n    function setUniversal(address token, uint256 amount) external override onlyOwner {\n        Universal._setUniversal(token, amount);\n        emit SetUniversal(token, amount);\n    }\n\n    function setSurprise(\n        address token,\n        uint256 amount,\n        address nft_token,\n        uint256 nft_token_id\n    ) external override onlyOwner {\n        Surprise._setSurprise(token, amount, nft_token, nft_token_id);\n        emit SetSurprise(token, amount, nft_token, nft_token_id);\n    }\n\n    function superLuckyMan(uint256 nft_token_id) external override onlyOwner {\n        require(!Surprise.is_revealed, \"cannot be repeated\");\n        Surprise._superLuckyMan(nft_token_id);\n        emit SuperLuckyMan(nft_token_id);\n    }\n\n    // The transfer must be within the validity period\n    function _transfer(\n        address from,\n        address to,\n        uint256 ticket_id\n    ) internal virtual override onlyOwner isActive {\n        uint256 balance = super.balanceOf(to);\n        if (cap_per_person > 0) {\n            require(balance < cap_per_person, \"Transfer:The account holding has reached the upper limit\");\n        }\n        super._transfer(from, to, ticket_id);\n    }\n\n    function getCurrentTime() public view returns (uint256) {\n        return _timestamp._getCurrentTime();\n    }\n\n    function getEndTime() public view returns (uint256) {\n        return end_time;\n    }\n\n    function getUniversalToken() public view returns (address) {\n        return Universal.universal_token();\n    }\n\n    function getUniversalAmount() public view returns (uint256) {\n        return Universal.universal_amount();\n    }\n\n    function getSurpriseToken() public view returns (address) {\n        return Surprise.surprise_token();\n    }\n\n    function getSurpriseAmount() public view returns (uint256) {\n        return Surprise.surprise_amount();\n    }\n\n    function getSurpriseNftToken() public view returns (address) {\n        return Surprise.surprise_nft_token();\n    }\n\n    function getSurpriseNftId() public view returns (uint256) {\n        return Surprise.surprise_nft_id();\n    }\n\n    function getSurpriseLuckyId() public view returns (uint256) {\n        return Surprise.surprise_surprise_id();\n    }\n\n    function getSurpriseStatus() public view returns (bool) {\n        return Surprise.surprise_is_revealed();\n    }\n\n    function burn(uint256 token_id) public onlySettlement {\n        super._burn(token_id);\n    }\n}\n"
    },
    "contracts/Lib/Prize.sol": {
      "content": "// Lib/Prize.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nlibrary Prize {\n    // Rewards for every winner\n    struct Universal {\n        address token;\n        uint256 amount;\n    }\n    // Rewards only available to the luckiest winners\n    struct Surprise {\n        bool is_revealed;\n        address token;\n        uint256 amount;\n        address nft_token;\n        uint256 nft_token_id;\n        uint256 surprise_id;\n    }\n\n    // Public Functions\n    function universal_token(Universal storage _universal) public view returns (address) {\n        return _universal.token;\n    }\n\n    function universal_amount(Universal storage _universal) public view returns (uint256) {\n        return _universal.amount;\n    }\n\n    function surprise_token(Surprise storage _surprise) public view returns (address) {\n        return _surprise.token;\n    }\n\n    function surprise_amount(Surprise storage _surprise) public view returns (uint256) {\n        return _surprise.amount;\n    }\n\n    function surprise_nft_token(Surprise storage _surprise) public view returns (address) {\n        return _surprise.nft_token;\n    }\n\n    function surprise_nft_id(Surprise storage _surprise) public view returns (uint256) {\n        return _surprise.nft_token_id;\n    }\n\n    function surprise_surprise_id(Surprise storage _surprise) public view returns (uint256) {\n        return _surprise.surprise_id;\n    }\n\n    function surprise_is_revealed(Surprise storage _surprise) public view returns (bool) {\n        return _surprise.is_revealed;\n    }\n\n    //\n    function _setUniversal(\n        Universal storage _universal,\n        address token_,\n        uint256 amount_\n    ) internal {\n        _universal.token = token_;\n        _universal.amount = amount_;\n    }\n\n    function _setSurprise(\n        Surprise storage _surprise,\n        address token_,\n        uint256 amount_,\n        address nft_token_,\n        uint256 nft_token_id_\n    ) internal {\n        _surprise.token = token_;\n        _surprise.amount = amount_;\n        _surprise.nft_token = nft_token_;\n        _surprise.nft_token_id = nft_token_id_;\n    }\n\n    function _superLuckyMan(Surprise storage _surprise, uint256 surprise_id_) internal {\n        _surprise.is_revealed = true;\n        _surprise.surprise_id = surprise_id_;\n    }\n}\n"
    },
    "contracts/Advertise/IAdvertise.sol": {
      "content": "// contracts/advertise/advertise.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IAdvertise {\n    /**********\n     * Events *\n     **********/\n    event SetTestTime(uint256 _timestamp);\n\n    event SetAdTime(uint256 _starting_time, uint256 _end_time);\n\n    event SetCapPerPerson(uint256 _cap_per_person);\n\n    event SetUniversal(address token, uint256 amount);\n\n    event SetSurprise(address token, uint256 amount, address nft_token, uint256 nft_token_id);\n\n    event SuperLuckyMan(uint256 nft_token_id);\n\n    /********************\n     * Public Functions *\n     ********************/\n    function setTestTime(uint256 timestamp_) external;\n\n    function setAdTime(uint256 start_, uint256 end_) external;\n\n    function setCapPerPerson(uint256 cap_per_person_) external;\n\n    function setUniversal(address token, uint256 amount) external;\n\n    function setSurprise(\n        address token,\n        uint256 amount,\n        address nft_token,\n        uint256 nft_token_id\n    ) external;\n\n    function superLuckyMan(uint256 nft_token_id) external;\n}\n"
    },
    "contracts/Lib/Time.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/**\n * @title Control the current timestamp for easy debugging\n * @author Stone (@Vmeta3 Labs)\n * @dev If it is not in development mode, please do not modify the current time\n */\nlibrary Time {\n    struct Timestamp {\n        uint256 _current_time;\n    }\n\n    function _getCurrentTime(Timestamp storage timestamp) internal view returns (uint256) {\n        if (timestamp._current_time > 0) {\n            return timestamp._current_time;\n        } else {\n            return block.timestamp;\n        }\n    }\n\n    function _setCurrentTime(Timestamp storage timestamp, uint256 time_map) internal {\n        timestamp._current_time = time_map;\n    }\n}\n"
    },
    "contracts/Investment/Vip.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// Open Zeppelin libraries for controlling upgradability and access.\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"../Abstract/SafeOwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Time} from \"../Lib/Time.sol\";\n\ncontract Vip is Initializable, UUPSUpgradeable, SafeOwnableUpgradeable {\n    IERC20 public ERC20Token;\n    address public spender;\n    uint256 public activityStartTime;\n    uint256 public activityEndTime;\n    uint256 constant INTERVAL = 30 days;\n\n    bytes32 public DOMAIN;\n\n    // Control timestamp\n    using Time for Time.Timestamp;\n    Time.Timestamp private _timestamp;\n\n    struct VipInfo {\n        uint256 amount;\n        uint256 startTime;\n        uint8 level;\n    }\n    struct MapVip {\n        address[] keys;\n        mapping(address => VipInfo) values;\n        mapping(address => bool) inserted;\n    }\n    MapVip private mapVip;\n\n    struct Level {\n        uint8 level;\n        uint256 threshold;\n        uint256 numberLimit;\n        uint256 currentNumber;\n    }\n    Level[] private levelArray;\n\n    struct LatestList {\n        address addr;\n        uint8 level;\n    }\n\n    event Deposit(address account, uint256 amount);\n\n    function _authorizeUpgrade(address newImplementation) internal virtual override {}\n\n    function initialize(address[] memory owners, uint8 signRequred) public initializer {\n        __Ownable_init(owners, signRequred);\n        __UUPSUpgradeable_init();\n\n        DOMAIN = keccak256(\n            abi.encode(keccak256(\"Domain(uint256 chainId,address verifyingContract)\"), block.chainid, address(this))\n        );\n    }\n\n    function deposit(uint256 amount) external {\n        _deposit(msg.sender, amount);\n    }\n\n    function depositTo(address to, uint256 amount) external {\n        _deposit(to, amount);\n    }\n\n    function _deposit(address to, uint256 amount) internal {\n        uint256 time = _timestamp._getCurrentTime();\n        require(time > activityStartTime, \"Vip: The activity has not started\");\n        require(time < activityEndTime, \"Vip: The activity has ended\");\n\n        uint256 levelIndex;\n        if (mapVip.inserted[to]) {\n            VipInfo memory info = mapVip.values[to];\n            uint256 newAmount = info.amount + amount;\n            require(time - info.startTime < INTERVAL, \"Vip: Upgrade must be within 30 days\");\n\n            levelIndex = _handle(newAmount);\n            require(levelIndex > _get_level_index(info.level), \"Vip: level threshold not reached\");\n\n            info.amount = newAmount;\n            info.level = levelArray[levelIndex].level;\n            mapVip.values[to] = info;\n        } else {\n            levelIndex = _handle(amount);\n            mapVip.values[to] = VipInfo(amount, time, levelArray[levelIndex].level);\n            mapVip.inserted[to] = true;\n            mapVip.keys.push(to);\n        }\n        ERC20Token.transferFrom(to, spender, amount);\n        emit Deposit(to, amount);\n    }\n\n    function _handle(uint256 amount) internal returns (uint256 levelIndex) {\n        levelIndex = _calculation_level_index(amount);\n        Level memory currentLevel = levelArray[levelIndex];\n        require(currentLevel.currentNumber < currentLevel.numberLimit, \"Vip: exceed the number of people limit\");\n        levelArray[levelIndex].currentNumber += 1;\n    }\n\n    function _get_level_index(uint256 level) internal view returns (uint256 levelIndex) {\n        for (uint8 i = 0; i < levelArray.length; ++i) {\n            if (levelArray[i].level == level) {\n                levelIndex = i;\n                break;\n            }\n        }\n    }\n\n    function _calculation_level_index(uint256 amount) internal view returns (uint256 levelIndex) {\n        uint256 lv1Index;\n        uint256 lv2Index;\n        uint256 lv3Index;\n        for (uint8 i = 0; i < levelArray.length; ++i) {\n            if (levelArray[i].level == 1) {\n                lv1Index = i;\n            }\n            if (levelArray[i].level == 2) {\n                lv2Index = i;\n            }\n            if (levelArray[i].level == 3) {\n                lv3Index = i;\n            }\n        }\n\n        if (amount >= levelArray[lv3Index].threshold) {\n            return lv3Index;\n        } else if (amount >= levelArray[lv2Index].threshold && amount < levelArray[lv3Index].threshold) {\n            return lv2Index;\n        } else if (amount >= levelArray[lv1Index].threshold && amount < levelArray[lv2Index].threshold) {\n            return lv1Index;\n        } else {\n            require(false, \"Vip: level threshold not reached\");\n        }\n    }\n\n    function getLatestList() external view returns (LatestList[] memory) {\n        LatestList[] memory list = new LatestList[](mapVip.keys.length);\n        for (uint256 i = 0; i < mapVip.keys.length; ++i) {\n            address key = mapVip.keys[i];\n            list[i] = LatestList(key, mapVip.values[key].level);\n        }\n        return list;\n    }\n\n    function getLevel(address target) external view returns (uint8 level) {\n        return mapVip.values[target].level;\n    }\n\n    function setERC20(address token) public onlyOwner {\n        ERC20Token = IERC20(token);\n    }\n\n    function setSpender(address spender_) public onlyOwner {\n        spender = spender_;\n    }\n\n    function setActivityStartTime(uint256 time) external onlyOwner {\n        activityStartTime = time;\n    }\n\n    function setActivityEndTime(uint256 time) external onlyOwner {\n        activityEndTime = time;\n    }\n\n    function setCurrentTime(uint256 timestamp_) external onlyOwner {\n        _timestamp._setCurrentTime(timestamp_);\n    }\n\n    function getCurrentTime() external view returns (uint256) {\n        return _timestamp._getCurrentTime();\n    }\n\n    function setLevelArray(\n        uint8 level,\n        uint256 threshold,\n        uint256 numberLimit,\n        uint256 currentNumber\n    ) external onlyOwner {\n        _setLevelArray(level, threshold, numberLimit, currentNumber);\n    }\n\n    function setLevelArrayAll(\n        uint8[] memory levels_,\n        uint256[] memory thresholds_,\n        uint256[] memory numberLimits_,\n        uint256[] memory currentNumbers_\n    ) external onlyOwner {\n        uint256 len = levels_.length;\n        require(\n            (thresholds_.length == len && numberLimits_.length == len && currentNumbers_.length == len),\n            \"Vip: length of the data is different\"\n        );\n        for (uint256 i = 0; i < len; ++i) {\n            _setLevelArray(levels_[i], thresholds_[i], numberLimits_[i], currentNumbers_[i]);\n        }\n    }\n\n    function _setLevelArray(\n        uint8 level,\n        uint256 threshold,\n        uint256 numberLimit,\n        uint256 currentNumber\n    ) internal {\n        levelArray.push(Level(level, threshold, numberLimit, currentNumber));\n    }\n\n    function cleanLevelArray(uint256 number) external onlyOwner {\n        _cleanLevelArray(number);\n    }\n\n    function cleanLevelArrayAll() external onlyOwner {\n        delete levelArray;\n    }\n\n    function _cleanLevelArray(uint256 number) private {\n        uint256 last = levelArray.length - 1;\n        if (number != last) {\n            for (uint256 i = number; i < last; ++i) {\n                levelArray[i] = levelArray[i + 1];\n            }\n        }\n        levelArray.pop();\n    }\n\n    function getLevelArray() external view returns (Level[] memory) {\n        return levelArray;\n    }\n}\n"
    },
    "contracts/Abstract/SafeOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// support multiple owners to manager\nabstract contract SafeOwnableUpgradeable is Initializable, ContextUpgradeable {\n    using ECDSA for bytes32;\n    enum OpStatus {\n        OpDefault,\n        OpPending,\n        OpExecuted,\n        OpCancel\n    }\n\n    address[6] private _owners;\n    mapping(address => uint8) private _ownersIndex; // from 1\n    uint8 private _numOwners;\n    uint8 public constant maxNumOwners = 5;\n    // the number of owners that must confirm before operation run.\n    uint8 public signRequired;\n    mapping(bytes32 => OpStatus) public operationsStatus;\n\n    uint256 public nonce; //avoid operation hash being the same\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event OperationAdded(bytes32 indexed opHash);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init(address[] memory ownerList, uint8 signRequired_) internal onlyInitializing {\n        require(ownerList.length <= maxNumOwners, \"SafeOwnableUpgradeable:exceed maximum number owners\");\n        require(signRequired_ != 0, \"SafeOwnableUpgradeable: signRequired is zero\");\n\n        signRequired = signRequired_;\n        for (uint256 i = 0; i < ownerList.length; i++) {\n            address owner = ownerList[i];\n            require(_ownersIndex[owner] == 0, \"SafeOwnableUpgradeable: owner already exists\");\n            _owners[++_numOwners] = owner;\n            _ownersIndex[owner] = _numOwners;\n\n            emit OwnershipTransferred(address(0), owner);\n        }\n\n        require(signRequired <= _numOwners, \"SafeOwnableUpgradeable: owners less than signRequired\");\n    }\n\n    modifier onlyOwner() {\n        require(_ownersIndex[_msgSender()] > 0, \"SafeOwnableUpgradeable: caller is not the owner\");\n        _;\n    }\n\n    modifier onlyMultipleOwner(bytes32 dataHash, bytes[] memory sigs) {\n        uint8 confirmed = 0;\n        bool[maxNumOwners + 1] memory mark;\n        if (_ownersIndex[_msgSender()] > 0) {\n            confirmed++;\n            mark[_ownersIndex[_msgSender()]] = true;\n        }\n        for (uint8 i = 0; i < sigs.length; i++) {\n            address owner = dataHash.recover(sigs[i]);\n            uint8 ownerIndex = _ownersIndex[owner];\n            require(ownerIndex > 0, \"SafeOwnableUpgradeable: signer is not owner\");\n            if (mark[ownerIndex] == true) {\n                continue;\n            }\n            mark[ownerIndex] = true;\n            confirmed++;\n        }\n\n        require(confirmed >= signRequired, \"SafeOwnableUpgradeable: no enough confirms\");\n        nonce++;\n        _;\n    }\n\n    modifier onlyOperationPendding(bytes32 opHash) {\n        require(operationsStatus[opHash] == OpStatus.OpPending, \"SafeOwnableUpgradeable: operation not in pending\");\n        operationsStatus[opHash] = OpStatus.OpExecuted;\n        _;\n    }\n\n    function AddOpHashToPending(bytes32 opHash, bytes[] memory sigs) public onlyMultipleOwner(opHash, sigs) {\n        require(\n            operationsStatus[opHash] == OpStatus.OpDefault,\n            \"SafeOwnableUpgradeable: operation was not submitted yet\"\n        );\n        operationsStatus[opHash] = OpStatus.OpPending;\n        emit OperationAdded(opHash);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"SafeOwnableUpgradeable: new owner is the zero address\");\n        require(_ownersIndex[newOwner] == 0, \"SafeOwnableUpgradeable: new owner already exists\");\n\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _msgSender();\n        uint8 oldOwnerIndex = _ownersIndex[oldOwner];\n        _owners[oldOwnerIndex] = newOwner;\n        _ownersIndex[oldOwner] = 0;\n        _ownersIndex[newOwner] = oldOwnerIndex;\n\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function owners() public view returns (address[6] memory) {\n        return _owners;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/ERC721/VM3NFTV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// Open Zeppelin libraries for controlling upgradability and access.\nimport {ERC721Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {SafeERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../Abstract/SafeOwnableUpgradeable.sol\";\n\ncontract VM3NFTV1 is Initializable, ERC721Upgradeable, UUPSUpgradeable, SafeOwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20;\n\n    event Build(address indexed user, uint256 tokenId);\n    event Deposit(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n    event Refund(address indexed user, uint256 amount, bool Disposal);\n\n    IERC20 public ERC20Token;\n    bytes32 private DOMAIN;\n    uint256 private locked;\n    uint256 private _tokenIdCounter;\n    uint256 private totalERC20Token;\n    uint256 private _costs;\n    uint256 private atDisposal;\n    mapping(uint256 => string) private _tokenURIs;\n    mapping(address => uint256) private _depositAmounts;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    modifier lock() {\n        require(locked == 0, \"VM3NFT: LOCKED\");\n        locked = 1;\n        _;\n        locked = 0;\n    }\n\n    modifier deduct() {\n        require(_depositAmounts[_msgSender()] >= _costs, \"VM3NFT: Insufficient deposits\");\n        _depositAmounts[_msgSender()] -= _costs;\n        atDisposal += _costs;\n        _;\n    }\n\n    // Upgradeable contracts should have an initialize method in place of the constructor, and the initializer keyword ensures that the contract is initialized only once\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        address[] memory owners,\n        uint8 signRequred\n    ) public initializer {\n        __ERC721_init(name_, symbol_);\n\n        __Ownable_init(owners, signRequred);\n\n        __UUPSUpgradeable_init();\n\n        DOMAIN = keccak256(\n            abi.encode(\n                keccak256(\"Domain(string name,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name())),\n                block.chainid,\n                address(this)\n            )\n        );\n    }\n\n    // This approach is needed to prevent unauthorized upgrades because in UUPS mode, the upgrade is done from the implementation contract, while in the transparent proxy model, the upgrade is done through the proxy contract\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    function setERC20(address token) public onlyOwner {\n        ERC20Token = IERC20(token);\n    }\n\n    function setCosts(uint256 costs_) public onlyOwner {\n        _costs = costs_;\n    }\n\n    function getBuildHash(\n        address to,\n        string memory tokenURI_,\n        uint256 nonce_\n    ) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(DOMAIN, keccak256(\"build(string,bytes[])\"), to, tokenURI_, nonce_));\n    }\n\n    function getRefundHash(\n        address to,\n        uint256 amount,\n        uint256 nonce_\n    ) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(DOMAIN, keccak256(\"refund(address,uint256)\"), to, amount, nonce_));\n    }\n\n    function getrefundAtDisposalHash(\n        address to,\n        uint256 amount,\n        uint256 nonce_\n    ) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(DOMAIN, keccak256(\"refundAtDisposal(address,uint256)\"), to, amount, nonce_));\n    }\n\n    function build(string memory tokenURI_, uint256 nonce_) external deduct returns (uint256) {\n        return _build(_msgSender(), tokenURI_, nonce_);\n    }\n\n    function buildTo(\n        address to,\n        string memory tokenURI_,\n        uint256 nonce_\n    ) external deduct returns (uint256) {\n        return _build(to, tokenURI_, nonce_);\n    }\n\n    function _increment() private {\n        unchecked {\n            _tokenIdCounter += 1;\n        }\n    }\n\n    function _build(\n        address to,\n        string memory tokenURI_,\n        uint256 nonce_\n    ) private onlyOperationPendding(HashToSign(getBuildHash(to, tokenURI_, nonce_))) returns (uint256) {\n        uint256 newItemId = _tokenIdCounter;\n        _mint(to, newItemId);\n        _tokenURIs[newItemId] = tokenURI_;\n        _increment();\n        emit Build(to, newItemId);\n        return newItemId;\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n        return _tokenURIs[tokenId];\n    }\n\n    function deposit(uint256 amount) external lock {\n        _deposit(_msgSender(), amount);\n    }\n\n    function depositTo(address to, uint256 amount) external lock {\n        _deposit(to, amount);\n    }\n\n    function _deposit(address to, uint256 amount) private {\n        require(amount > 0, \"VM3NFT: Amount is zero\");\n        ERC20Token.transferFrom(_msgSender(), address(this), amount);\n        totalERC20Token += amount;\n        _depositAmounts[to] += amount;\n        emit Deposit(to, amount);\n    }\n\n    function withdraw(uint256 amount) external lock {\n        _withdraw(_msgSender(), _msgSender(), amount);\n    }\n\n    function withdrawTo(address to, uint256 amount) external lock {\n        _withdraw(_msgSender(), to, amount);\n    }\n\n    function _withdraw(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(amount > 0, \"VM3NFT: amount is zero\");\n        require(_depositAmounts[from] >= amount, \"VM3NFT: Insufficient balance\");\n        _depositAmounts[from] -= amount;\n        ERC20Token.transfer(to, amount);\n        emit Withdraw(to, amount);\n    }\n\n    function refund(\n        address to,\n        uint256 amount,\n        uint256 nonce_\n    ) public lock onlyOperationPendding(HashToSign(getRefundHash(to, amount, nonce_))) {\n        require(_depositAmounts[to] >= amount, \"VM3NFT: Insufficient user balance\");\n        _depositAmounts[to] -= amount;\n        _refund(to, amount, false);\n    }\n\n    function refundAtDisposal(\n        address to,\n        uint256 amount,\n        uint256 nonce_\n    ) public lock onlyOperationPendding(HashToSign(getrefundAtDisposalHash(to, amount, nonce_))) {\n        require(atDisposal >= amount, \"VM3NFT: Insufficient atDisposal\");\n        atDisposal -= amount;\n        _refund(to, amount, true);\n    }\n\n    function _refund(\n        address to,\n        uint256 amount,\n        bool disposal\n    ) private onlyOwner {\n        require(amount > 0, \"VM3NFT: amount is zero\");\n        require(ERC20Token.balanceOf(address(this)) >= amount, \"\");\n        ERC20Token.transfer(to, amount);\n        emit Refund(to, amount, disposal);\n    }\n\n    function HashToSign(bytes32 data) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", data));\n    }\n\n    function costs() public view returns (uint256) {\n        return _costs;\n    }\n\n    function balanceOfERC20(address account) public view returns (uint256) {\n        return _depositAmounts[account];\n    }\n}\n"
    },
    "contracts/Investment/Investment.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// Open Zeppelin libraries for controlling upgradability and access.\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"../Abstract/SafeOwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Time} from \"../Lib/Time.sol\";\n\ncontract Investment is Initializable, UUPSUpgradeable, SafeOwnableUpgradeable {\n    bytes32 public DOMAIN;\n    IERC20 interestToken;\n    address interestAddr;\n    uint256 private interestWarehouse;\n    uint256 private unreturnedInterest;\n\n    // Cumulative upper limit of individual investment\n    uint256 constant INDIVIDUAL_INVESTMENT_LIMIT = 50000 * 10**18;\n\n    uint256 constant INTERVAL = 30 days;\n\n    uint256 public activityStartTime;\n    uint256 public activityEndTime;\n\n    // Control timestamp\n    using Time for Time.Timestamp;\n    Time.Timestamp private _timestamp;\n\n    struct InvestorInfo {\n        uint256 amount;\n        uint256 startTime;\n        uint8 residualTimes;\n        uint8 level;\n    }\n\n    struct MapInvestor {\n        address[] keys;\n        mapping(address => InvestorInfo[]) values;\n        mapping(address => bool) inserted;\n    }\n    MapInvestor private mapInvestor;\n\n    struct LatestList {\n        address addr;\n        uint8 level;\n    }\n\n    event Deposit(address account, uint256 amount);\n    event Withdraw(address account, uint256 amount);\n\n    bool internal locked;\n    modifier lock() {\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    // This approach is needed to prevent unauthorized upgrades because in UUPS mode, the upgrade is done from the implementation contract, while in the transparent proxy model, the upgrade is done through the proxy contract\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    function initialize(\n        string memory name,\n        address[] memory owners,\n        uint8 signRequred,\n        address _interestToken,\n        address _interestAddr,\n        uint256 _activityStartTime,\n        uint256 _activityEndTime\n    ) public initializer {\n        __Ownable_init(owners, signRequred);\n\n        interestToken = IERC20(_interestToken);\n        interestAddr = _interestAddr;\n        activityStartTime = _activityStartTime;\n        activityEndTime = _activityEndTime;\n\n        DOMAIN = keccak256(\n            abi.encode(\n                keccak256(\"Domain(string name,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                block.chainid,\n                address(this)\n            )\n        );\n    }\n\n    function deposit(uint256 amount) public {\n        uint256 time = _timestamp._getCurrentTime();\n        require(time > activityStartTime, \"Investment: The activity has not started\");\n        require(time < activityEndTime, \"Investment: The activity has ended\");\n\n        if (mapInvestor.inserted[msg.sender]) {\n            uint256 len = mapInvestor.values[msg.sender].length;\n\n            uint256 total;\n            for (uint8 i = 0; i < len; i++) {\n                total += mapInvestor.values[msg.sender][i].amount;\n            }\n            require(total + amount < INDIVIDUAL_INVESTMENT_LIMIT, \"Investment: Exceeding investment limit (Inserted)\");\n\n            // Calculate the date before the last pledge, and increase the quantity within 30 days.\n            // If it exceeds, it will be regarded as a new round of investment.\n            if (len != 0 && time - mapInvestor.values[msg.sender][len - 1].startTime < INTERVAL) {\n                uint256 originalInterest = _calculation_interest(\n                    mapInvestor.values[msg.sender][len - 1].amount,\n                    mapInvestor.values[msg.sender][len - 1].residualTimes\n                );\n\n                uint256 newValue = mapInvestor.values[msg.sender][len - 1].amount + amount;\n                (uint8 level, uint8 times) = _calculation_level_and_times(newValue);\n                uint256 newInterest = _calculation_interest(newValue, times);\n\n                require(\n                    newInterest + unreturnedInterest < interestWarehouse,\n                    \"Investment: Insufficient interest warehouse (Inserted)\"\n                );\n\n                interestToken.transferFrom(msg.sender, address(this), amount);\n\n                mapInvestor.values[msg.sender][len - 1].amount = newValue;\n                mapInvestor.values[msg.sender][len - 1].level = level;\n                mapInvestor.values[msg.sender][len - 1].residualTimes = times;\n\n                unreturnedInterest += (newInterest - originalInterest);\n            } else {\n                _pushMapInvestor(amount);\n            }\n        } else {\n            _pushMapInvestor(amount);\n            mapInvestor.inserted[msg.sender] = true;\n            mapInvestor.keys.push(msg.sender);\n        }\n\n        emit Deposit(msg.sender, amount);\n    }\n\n    function _pushMapInvestor(uint256 amount) internal {\n        require(amount < INDIVIDUAL_INVESTMENT_LIMIT, \"Investment: Exceeding investment limit\");\n\n        (uint8 level, uint8 times) = _calculation_level_and_times(amount);\n        uint256 interest = _calculation_interest(amount, times);\n\n        require(interest + unreturnedInterest < interestWarehouse, \"Investment: Insufficient interest warehouse\");\n\n        interestToken.transferFrom(msg.sender, address(this), amount);\n\n        mapInvestor.values[msg.sender].push(InvestorInfo(amount, _timestamp._getCurrentTime(), times, level));\n        unreturnedInterest += interest;\n    }\n\n    function _calculation_interest(uint256 amount, uint8 times) internal pure returns (uint256) {\n        return (amount / 10) * times;\n    }\n\n    // Return `level` and `return times`\n    function _calculation_level_and_times(uint256 amount) internal pure returns (uint8 level, uint8 times) {\n        if (amount >= 100 * 10**18 && amount <= 999 * 10**18) {\n            return (1, 12);\n        } else if (amount >= 1000 * 10**18 && amount <= 9999 * 10**18) {\n            return (2, 15);\n        } else if (amount >= 10000 * 10**18 && amount <= 50000 * 10**18) {\n            return (3, 18);\n        } else {\n            return (0, 0);\n        }\n    }\n\n    function _calculation_times(uint8 level) internal pure returns (uint8) {\n        if (level == 1) {\n            return 12;\n        } else if (level == 2) {\n            return 15;\n        } else if (level == 3) {\n            return 18;\n        } else {\n            return 0;\n        }\n    }\n\n    function _calculation_can_return_times() internal view returns (uint8[] memory, uint256) {\n        uint8[] memory times = new uint8[](mapInvestor.values[msg.sender].length);\n        uint256 total;\n        uint256 time = _timestamp._getCurrentTime();\n        for (uint8 i = 0; i < mapInvestor.values[msg.sender].length; i++) {\n            // Less than 30 days, failing to meet the distribution conditions\n            if (time - mapInvestor.values[msg.sender][i].startTime <= INTERVAL) {\n                break;\n            }\n\n            uint8 totalTimes = _calculation_times(mapInvestor.values[msg.sender][i].level);\n            uint8 gotTimes = totalTimes - mapInvestor.values[msg.sender][i].residualTimes;\n            uint256 lastMonth = (time - mapInvestor.values[msg.sender][i].startTime) / INTERVAL;\n\n            if (mapInvestor.values[msg.sender][i].residualTimes == 0) {\n                times[i] = 0;\n            } else {\n                times[i] = uint8(lastMonth - gotTimes);\n            }\n            total += times[i] * (mapInvestor.values[msg.sender][i].amount / 10);\n        }\n        return (times, total);\n    }\n\n    function canWithdraw() public view returns (uint256 total) {\n        (, total) = _calculation_can_return_times();\n    }\n\n    function withdraw() public lock {\n        (uint8[] memory times, uint256 amount) = _calculation_can_return_times();\n        if (amount != 0) {\n            interestToken.transferFrom(interestAddr, msg.sender, amount);\n            interestWarehouse -= amount;\n            unreturnedInterest -= amount;\n            for (uint8 i = 0; i < times.length; i++) {\n                mapInvestor.values[msg.sender][i].residualTimes -= times[i];\n            }\n            emit Withdraw(msg.sender, amount);\n        }\n    }\n\n    //After approval, call this function\n    function updateInterestWarehouse() public onlyOwner {\n        interestWarehouse = interestToken.allowance(interestAddr, address(this));\n    }\n\n    function getLatestList() external view returns (LatestList[] memory) {\n        LatestList[] memory list = new LatestList[](mapInvestor.keys.length);\n        for (uint256 i = 0; i < mapInvestor.keys.length; i++) {\n            address key = mapInvestor.keys[i];\n            list[i] = LatestList(key, mapInvestor.values[key][mapInvestor.values[key].length - 1].level);\n        }\n        return list;\n    }\n\n    function getLevel(uint8 index) external view returns (uint8 level) {\n        if (mapInvestor.inserted[msg.sender] && index < mapInvestor.values[msg.sender].length) {\n            level = mapInvestor.values[msg.sender][index].level;\n        }\n    }\n\n    function setEndTime(uint256 timestamp_) external onlyOwner {\n        activityEndTime = timestamp_;\n    }\n\n    function setCurrentTime(uint256 timestamp_) external onlyOwner {\n        _timestamp._setCurrentTime(timestamp_);\n    }\n\n    function getCurrentTime() external view returns (uint256) {\n        return _timestamp._getCurrentTime();\n    }\n}\n"
    },
    "contracts/ERC721/Land/Land.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// Open Zeppelin libraries for controlling upgradability and access.\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {ERC721Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\n\nimport \"../../Abstract/SafeOwnableUpgradeable.sol\";\n\ncontract Land is Initializable, ERC721Upgradeable, UUPSUpgradeable, SafeOwnableUpgradeable {\n    event Activation(uint256 tokenId, uint256 active, bool status);\n\n    struct activeValue {\n        bool status;\n        uint256 conditions;\n        uint256 total;\n        mapping(address => uint256) injection_details;\n    }\n\n    uint256 public _tokenIdCounter;\n    mapping(uint256 => string) tokenURIs;\n    bytes32 private DOMAIN;\n    mapping(uint256 => activeValue) _active_value;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    // Upgradeable contracts should have an initialize method in place of the constructor, and the initializer keyword ensures that the contract is initialized only once\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        address[] memory owners,\n        uint8 signRequred\n    ) public initializer {\n        __ERC721_init(name_, symbol_);\n\n        __Ownable_init(owners, signRequred);\n\n        __UUPSUpgradeable_init();\n\n        DOMAIN = keccak256(\n            abi.encode(\n                keccak256(\"Domain(string name,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name())),\n                block.chainid,\n                address(this)\n            )\n        );\n    }\n\n    // This approach is needed to prevent unauthorized upgrades because in UUPS mode, the upgrade is done from the implementation contract, while in the transparent proxy model, the upgrade is done through the proxy contract\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    function awardItem(\n        address player,\n        uint256 conditions,\n        string memory tokenURI_\n    ) public onlyOwner returns (uint256) {\n        uint256 newItemId = _tokenIdCounter;\n        _mint(player, newItemId);\n        tokenURIs[newItemId] = tokenURI_;\n        _active_value[newItemId].conditions = conditions;\n        _active_value[newItemId].status = false;\n        _increment();\n        return newItemId;\n    }\n\n    function _increment() private onlyOwner {\n        unchecked {\n            _tokenIdCounter += 1;\n        }\n    }\n\n    function getInjectActiveHash(\n        uint256 tokenId,\n        uint256 active,\n        address to,\n        uint256 nonce_\n    ) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    DOMAIN,\n                    keccak256(\"injectActive(uint256,uint256,uint256)\"),\n                    tokenId,\n                    active,\n                    to,\n                    nonce_\n                )\n            );\n    }\n\n    function getInjectActiveHashToSign(\n        uint256 tokenId,\n        uint256 active,\n        address to,\n        uint256 nonce_\n    ) public view returns (bytes32) {\n        return _hashToSign(getInjectActiveHash(tokenId, active, to, nonce_));\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n        return tokenURIs[tokenId];\n    }\n\n    function getLandStatus(uint256 tokenId) public view returns (bool) {\n        return _active_value[tokenId].status;\n    }\n\n    function getLandConditions(uint256 tokenId) public view returns (uint256) {\n        return _active_value[tokenId].conditions;\n    }\n\n    function getLandTotal(uint256 tokenId) public view returns (uint256) {\n        return _active_value[tokenId].total;\n    }\n\n    function getLandInjectionDetails(uint256 tokenId, address account) public view returns (uint256) {\n        return _active_value[tokenId].injection_details[account];\n    }\n\n    function injectActive(\n        uint256 tokenId,\n        uint256 active,\n        uint256 nonce\n    ) public {\n        _injectActive(tokenId, active, _msgSender(), nonce);\n    }\n\n    function injectActiveTo(\n        uint256 tokenId,\n        uint256 active,\n        address to,\n        uint256 nonce\n    ) public {\n        _injectActive(tokenId, active, to, nonce);\n    }\n\n    function _injectActive(\n        uint256 tokenId,\n        uint256 active,\n        address account,\n        uint256 nonce\n    ) private onlyOperationPendding(_hashToSign(getInjectActiveHash(tokenId, active, account, nonce))) {\n        require(\n            _active_value[tokenId].total + active <= _active_value[tokenId].conditions,\n            \"Land: too many active values\"\n        );\n        _active_value[tokenId].total += active;\n        _active_value[tokenId].injection_details[account] += active;\n\n        if (_active_value[tokenId].total == _active_value[tokenId].conditions) _active_value[tokenId].status = true;\n\n        emit Activation(tokenId, active, _active_value[tokenId].status);\n    }\n\n    function _hashToSign(bytes32 data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", data));\n    }\n}\n"
    },
    "contracts/DrawingGame/RaffleBag.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"../Chainlink/VRFConsumerBaseV2Upgradeable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n// Open Zeppelin libraries for controlling upgradability and access.\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {SafeERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"../Abstract/SafeOwnableUpgradeable.sol\";\n\ncontract RaffleBag is Initializable, UUPSUpgradeable, SafeOwnableUpgradeable, VRFConsumerBaseV2Upgradeable {\n    using SafeERC20Upgradeable for IERC20;\n\n    event RequestSent(uint256 requestId, uint32 numWords);\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\n    event Draw(address to, PrizeKind prizeKind, uint256 value, uint256 requestId);\n\n    address public spender;\n    IERC20 public ERC20Token;\n    IERC721Upgradeable public ACard;\n    IERC721Upgradeable public BCard;\n    IERC721Upgradeable public CCard;\n    bytes32 public DOMAIN;\n\n    enum PrizeKind {\n        ACard,\n        BCard,\n        CCard,\n        DCard,\n        ERC20Token\n    }\n    struct Prize {\n        PrizeKind prizeKind;\n        uint256 amount;\n        uint256 weight;\n        uint256[] tokens;\n    }\n    Prize[] private prizePool;\n\n    //chainlink configure\n    VRFCoordinatorV2Interface COORDINATOR;\n    uint64 public subscriptionId;\n    uint32 public callbackGasLimit;\n    uint16 requestConfirmations;\n    bytes32 public keyHash;\n    struct RequestStatus {\n        address user;\n        uint256 randomWord;\n        bool fulfilled; // whether the request has been successfully fulfilled\n        bool exists; // whether a requestId exists\n    }\n    mapping(uint256 => RequestStatus) public requests; // requestId --> requestStatus\n\n    bool internal locked;\n    modifier lock() {\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    // This approach is needed to prevent unauthorized upgrades because in UUPS mode, the upgrade is done from the implementation contract, while in the transparent proxy model, the upgrade is done through the proxy contract\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    function initialize(\n        address[] memory owners,\n        uint8 signRequred,\n        address vrfCoordinatorAddress_\n    ) public initializer {\n        __Ownable_init(owners, signRequred);\n\n        __VRFConsumerBaseV2_init(vrfCoordinatorAddress_);\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinatorAddress_);\n\n        __UUPSUpgradeable_init();\n\n        DOMAIN = keccak256(\n            abi.encode(keccak256(\"Domain(uint256 chainId,address verifyingContract)\"), block.chainid, address(this))\n        );\n    }\n\n    function setSpender(address spender_) public onlyOwner {\n        spender = spender_;\n    }\n\n    function setERC20(address token) public onlyOwner {\n        ERC20Token = IERC20(token);\n    }\n\n    function setACard(address aCard_) public onlyOwner {\n        ACard = IERC721Upgradeable(aCard_);\n    }\n\n    function setBCard(address bCard_) public onlyOwner {\n        BCard = IERC721Upgradeable(bCard_);\n    }\n\n    function setCCard(address cCard_) public onlyOwner {\n        CCard = IERC721Upgradeable(cCard_);\n    }\n\n    function setAsset(\n        address spender_,\n        address token,\n        address aCard_,\n        address bCard_,\n        address cCard_\n    ) external onlyOwner {\n        setSpender(spender_);\n        setERC20(token);\n        setACard(aCard_);\n        setBCard(bCard_);\n        setCCard(cCard_);\n    }\n\n    function setPrize(\n        PrizeKind prizeKind_,\n        uint256 amount_,\n        uint256 weight_,\n        uint256[] memory tokens_\n    ) external onlyOwner {\n        _setPrizes(prizeKind_, amount_, weight_, tokens_);\n    }\n\n    function setPrizes(\n        PrizeKind[] memory prizeKinds_,\n        uint256[] memory amounts_,\n        uint256[] memory weights_,\n        uint256[][] memory tokensList_\n    ) external onlyOwner {\n        uint256 len = prizeKinds_.length;\n        require(\n            (prizeKinds_.length == len &&\n                amounts_.length == len &&\n                weights_.length == len &&\n                tokensList_.length == len),\n            \"RaffleBag: length of the data is different\"\n        );\n        for (uint256 i = 0; i < len; ++i) {\n            _setPrizes(prizeKinds_[i], amounts_[i], weights_[i], tokensList_[i]);\n        }\n    }\n\n    function _setPrizes(\n        PrizeKind prizeKind_,\n        uint256 amount_,\n        uint256 weight_,\n        uint256[] memory tokens_\n    ) private {\n        prizePool.push(Prize(prizeKind_, amount_, weight_, tokens_));\n    }\n\n    function setChainlink(\n        uint32 callbackGasLimit_,\n        uint64 subscribeId_,\n        bytes32 keyHash_,\n        uint16 requestConfirmations_\n    ) public onlyOwner {\n        callbackGasLimit = callbackGasLimit_;\n        subscriptionId = subscribeId_;\n        keyHash = keyHash_;\n        requestConfirmations = requestConfirmations_;\n    }\n\n    function HashToSign(bytes32 data) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", data));\n    }\n\n    function drawHash(address to, uint256 nonce_) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(DOMAIN, keccak256(\"drawHash(address,uint256)\"), to, nonce_));\n    }\n\n    function draw(uint256 nonce_) external {\n        _goDraw(_msgSender(), nonce_);\n    }\n\n    function drawTo(address to, uint256 nonce_) external {\n        _goDraw(to, nonce_);\n    }\n\n    function _goDraw(address to, uint256 nonce_) private onlyOperationPendding(HashToSign(drawHash(to, nonce_))) {\n        _randomNumber(to, 1);\n    }\n\n    // Active gift package rule\n    function _active_rule(uint256 random) internal view returns (uint256 number) {\n        uint256 totalWeight;\n        for (uint256 i = 0; i < prizePool.length; ++i) {\n            totalWeight += prizePool[i].weight;\n        }\n\n        // Set a default value, at least no longer reward ranges\n        number = prizePool.length + 1;\n\n        uint256 num = random % totalWeight;\n\n        uint256 minimum = 0;\n        for (uint256 i = 0; i < prizePool.length; ++i) {\n            if (i != 0) minimum += prizePool[i - 1].weight;\n            if (num >= minimum && num < prizePool[i].weight + minimum) number = i;\n        }\n        require(number < prizePool.length, \"RaffleBag: There is an error in taking random numbers\");\n        return number;\n    }\n\n    function _draw(uint256 requestId) internal lock {\n        require(requests[requestId].randomWord > 0, \"RaffleBag: The randomWords number cannot be 0\");\n        address to = requests[requestId].user;\n        uint256 number = _active_rule(requests[requestId].randomWord);\n        uint256 value;\n        if (prizePool[number].prizeKind == PrizeKind.ERC20Token) {\n            value = prizePool[number].amount;\n            ERC20Token.transferFrom(spender, to, value);\n        } else if (prizePool[number].prizeKind != PrizeKind.DCard) {\n            IERC721Upgradeable e;\n            if (prizePool[number].prizeKind == PrizeKind.ACard) {\n                e = ACard;\n            } else if (prizePool[number].prizeKind == PrizeKind.BCard) {\n                e = BCard;\n            } else {\n                e = CCard;\n            }\n\n            // Send the prize and remove it\n            value = prizePool[number].tokens[prizePool[number].tokens.length - 1];\n            e.safeTransferFrom(spender, to, value);\n            prizePool[number].tokens.pop();\n\n            // Remove null prize\n            if (prizePool[number].tokens.length == 0) _cleanPrizePool(number);\n        }\n        emit Draw(to, prizePool[number].prizeKind, value, requestId);\n    }\n\n    function _randomNumber(address user, uint32 numWords) private returns (uint256 requestId) {\n        // Will revert if subscription is not set and funded.\n        requestId = COORDINATOR.requestRandomWords(\n            keyHash,\n            subscriptionId,\n            requestConfirmations,\n            callbackGasLimit,\n            numWords\n        );\n        requests[requestId] = RequestStatus({randomWord: uint256(0), exists: true, fulfilled: false, user: user});\n        emit RequestSent(requestId, numWords);\n        return requestId;\n    }\n\n    function fulfillRandomWords(uint256 requestId_, uint256[] memory randomWords_) internal override {\n        require(requests[requestId_].exists, \"RaffleBag: request not found\");\n        require(!requests[requestId_].fulfilled, \"RaffleBag: request has been processed\");\n        requests[requestId_].fulfilled = true;\n        requests[requestId_].randomWord = randomWords_[0];\n        _draw(requestId_);\n        emit RequestFulfilled(requestId_, randomWords_);\n    }\n\n    function cleanPrizePool(uint256 number) external onlyOwner {\n        _cleanPrizePool(number);\n    }\n\n    function cleanPrizePoolAll() external onlyOwner {\n        delete prizePool;\n    }\n\n    function _cleanPrizePool(uint256 number) private {\n        uint256 last = prizePool.length - 1;\n        if (number != last) {\n            for (uint256 i = number; i < last; ++i) {\n                prizePool[i] = prizePool[i + 1];\n            }\n        }\n        prizePool.pop();\n    }\n\n    function getPrizePool() external view returns (Prize[] memory) {\n        return prizePool;\n    }\n}\n"
    },
    "contracts/Chainlink/VRFConsumerBaseV2Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2Upgradeable is Initializable {\n    error OnlyCoordinatorCanFulfill(address have, address want);\n    address private vrfCoordinator;\n\n    function __VRFConsumerBaseV2_init(address _vrfCoordinator) internal initializer {\n        vrfCoordinator = _vrfCoordinator;\n    }\n\n    /**\n     * @notice fulfillRandomness handles the VRF response. Your contract must\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n     * @notice principles to keep in mind when implementing your fulfillRandomness\n     * @notice method.\n     *\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n     * @dev signature, and will call it once it has verified the proof\n     * @dev associated with the randomness. (It is triggered via a call to\n     * @dev rawFulfillRandomness, below.)\n     *\n     * @param requestId The Id initially returned by requestRandomness\n     * @param randomWords the VRF output expanded to the requested number of words\n     */\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n    // the origin of the call\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n        if (msg.sender != vrfCoordinator) {\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n        }\n        fulfillRandomWords(requestId, randomWords);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "contracts/DrawingGame/DrawingGame.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"../Chainlink/VRFConsumerBaseV2Upgradeable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n// Open Zeppelin libraries for controlling upgradability and access.\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {Time} from \"../Lib/Time.sol\";\nimport \"../Abstract/SafeOwnableUpgradeable.sol\";\n\nstruct InvestmentAccount {\n    address addr;\n    uint8 level;\n}\n\ninterface IInvestment {\n    function getLatestList() external view returns (InvestmentAccount[] memory);\n}\n\ninterface IERC721 {\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n}\n\ncontract DrawingGame is Initializable, UUPSUpgradeable, SafeOwnableUpgradeable, VRFConsumerBaseV2Upgradeable {\n    uint256 public constant SECONDS_FOR_WEEK = 60 * 60 * 24 * 7;\n    uint256 public constant SECONDS_FOR_DAY = 60 * 60 * 24;\n\n    address public investmentAddress;\n    bytes32 public DOMAIN;\n\n    struct NFTInfo {\n        address contractAddress;\n        uint256 tokenId;\n    }\n    mapping(address => NFTInfo) public wonNFT;\n    mapping(address => bool) public won;\n    NFTInfo[] public nfts; //nft token id list\n    mapping(address => mapping(uint256 => bool)) nftExistPrizePool;\n\n    uint256 public distributedNFTs;\n    uint256 public drawRounds; // how many round draw\n    mapping(address => uint256) public addressWeightMap;\n\n    uint256 public startTime;\n    uint256 public endTime;\n\n    // Control timestamp\n    using Time for Time.Timestamp;\n    Time.Timestamp private _timestamp;\n\n    event Draw(\n        address indexed from,\n        address[] winners,\n        address[] contactAddressList,\n        uint256[] tokenIdList,\n        uint256 requestId\n    );\n\n    //chainlink configure\n    VRFCoordinatorV2Interface COORDINATOR;\n    bytes32 public keyHash;\n    uint32 public callbackGasLimit;\n    uint64 public subscriptionId;\n    uint16 requestConfirmations;\n    //chainlink related parameter\n    uint256 public lastRequestId;\n    event RequestSent(uint256 requestId, uint32 numWords);\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\n    struct RequestStatus {\n        bool fulfilled; // whether the request has been successfully fulfilled\n        bool exists; // whether a requestId exists\n        uint256[] randomWords;\n    }\n    mapping(uint256 => RequestStatus) public requests; // requestId --> requestStatus\n\n    // This approach is needed to prevent unauthorized upgrades because in UUPS mode, the upgrade is done from the implementation contract, while in the transparent proxy model, the upgrade is done through the proxy contract\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    function initialize(\n        address[] memory owners,\n        uint8 signRequred,\n        address vrfCoordinatorAddress_\n    ) public initializer {\n        //chainlink\n        __VRFConsumerBaseV2_init(vrfCoordinatorAddress_);\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinatorAddress_);\n\n        __Ownable_init(owners, signRequred);\n\n        DOMAIN = keccak256(\n            abi.encode(keccak256(\"Domain(uint256 chainId,address verifyingContract)\"), block.chainid, address(this))\n        );\n    }\n\n    modifier checkDrawTime() {\n        uint256 time = _timestamp._getCurrentTime();\n        require(startTime > 0 && time > startTime, \"DrawingGame: activity not start\");\n        require(time < endTime, \"DrawingGame: activity ended\");\n        //require(getWeekday(time) == 0, \"DrawingGame: only sunday can draw\");\n        //require(getHourInDay(time) == 9, \"DrawingGame: only nince am can draw\");\n        //require(time - startTime > 3 * SECONDS_FOR_DAY, \"DrawingGame: wait for next week\");\n        //require(time - lastDrawTime >= SECONDS_FOR_WEEK, \"DrawingGame: has been drawn recently\");\n        _;\n    }\n\n    function setChainlink(\n        uint32 callbackGasLimit_,\n        uint64 subscribeId_,\n        bytes32 keyHash_,\n        uint16 requestConfirmations_\n    ) public onlyOwner {\n        callbackGasLimit = callbackGasLimit_;\n        subscriptionId = subscribeId_;\n        keyHash = keyHash_;\n        requestConfirmations = requestConfirmations_;\n    }\n\n    function setInvestment(address investmentAddress_) public onlyOwner {\n        investmentAddress = investmentAddress_;\n    }\n\n    function depositNFTs(address[] memory contractAddresses, uint256[] memory tokenIds) external onlyOwner {\n        require(contractAddresses.length == tokenIds.length);\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\n            NFTInfo memory nftInfo = NFTInfo(contractAddresses[i], tokenIds[i]);\n            require(nftExistPrizePool[contractAddresses[i]][tokenIds[i]] == false, \"DrawingGame: NFT added\");\n\n            IERC721(contractAddresses[i]).transferFrom(msg.sender, address(this), tokenIds[i]);\n            nftExistPrizePool[contractAddresses[i]][tokenIds[i]] = true;\n\n            nfts.push(nftInfo);\n        }\n    }\n\n    function withdrawNFTs(uint256 amount, address recipient) external onlyOwner {\n        require(nfts.length > distributedNFTs, \"DrawingGame:no nfts left\");\n\n        uint256 count = 0;\n        while (nfts.length > distributedNFTs && count < amount) {\n            NFTInfo storage nftInfo = nfts[nfts.length - 1];\n            IERC721(nftInfo.contractAddress).transferFrom(address(this), recipient, nftInfo.tokenId);\n            nfts.pop();\n            nftExistPrizePool[nftInfo.contractAddress][nftInfo.tokenId] = false;\n            count++;\n        }\n    }\n\n    function _draw(uint256 requestId, uint256[] memory randomNumbers) internal checkDrawTime {\n        (address[] memory participants, uint256 totalWeight) = getParticipants();\n\n        address[] memory contractAddressList = new address[](randomNumbers.length);\n        uint256[] memory tokenIdList = new uint256[](randomNumbers.length);\n        address[] memory winners = new address[](randomNumbers.length);\n        for (uint256 i = 0; i < randomNumbers.length && nfts.length > distributedNFTs; i++) {\n            if (totalWeight == 0) {\n                break;\n            }\n\n            uint256 num = randomNumbers[i] % totalWeight;\n            address winner = whoWin(participants, num);\n            totalWeight -= addressWeightMap[winner];\n\n            NFTInfo memory nft = nfts[distributedNFTs];\n            IERC721(nft.contractAddress).transferFrom(address(this), winner, nft.tokenId);\n            won[winner] = true;\n            winners[i] = winner;\n\n            contractAddressList[i] = nfts[distributedNFTs].contractAddress;\n            tokenIdList[i] = nfts[distributedNFTs].tokenId;\n            distributedNFTs++;\n        }\n\n        drawRounds++;\n        emit Draw(msg.sender, winners, contractAddressList, tokenIdList, requestId);\n    }\n\n    function getParticipants() internal returns (address[] memory, uint256) {\n        InvestmentAccount[] memory accounts = IInvestment(investmentAddress).getLatestList();\n        uint256 totalWeight = 0;\n        uint256 totalParticipants = 0;\n        for (uint256 i = 0; i < accounts.length; i++) {\n            if (won[accounts[i].addr]) {\n                continue;\n            }\n            totalParticipants++;\n            addressWeightMap[accounts[i].addr] = calculteWeight(accounts[i].level);\n            totalWeight += calculteWeight(accounts[i].level);\n        }\n\n        address[] memory addressList = new address[](totalParticipants);\n        uint256 j = 0;\n        for (uint256 i = 0; i < accounts.length; i++) {\n            if (won[accounts[i].addr]) {\n                continue;\n            }\n\n            addressList[j] = accounts[i].addr;\n            j++;\n        }\n\n        return (addressList, totalWeight);\n    }\n\n    function getTotalNFT() public view returns (uint256) {\n        return nfts.length;\n    }\n\n    function whoWin(address[] memory accounts, uint256 num) internal view returns (address) {\n        uint256 count = 0;\n        for (uint256 i = 0; i < accounts.length; i++) {\n            if (accounts[i] == address(0)) {\n                continue;\n            }\n\n            count += addressWeightMap[accounts[i]];\n            if (count >= num) {\n                address winner = accounts[i];\n                delete accounts[i];\n                return (winner);\n            }\n        }\n\n        return (address(0));\n    }\n\n    function calculteWeight(uint8 level) internal pure returns (uint256) {\n        if (level == 3) {\n            return 15;\n        }\n\n        if (level == 2) {\n            return 5;\n        }\n\n        return 1;\n    }\n\n    function getWeekday(uint256 timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / SECONDS_FOR_DAY + 4) % 7);\n    }\n\n    function getHourInDay(uint256 timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / 60 / 60) % 24);\n    }\n\n    //general setting\n    function setStartTime(uint256 startTime_) external onlyOwner {\n        require(startTime_ <= endTime, \"DrawingGame: startTime must be less than endTime\");\n\n        startTime = startTime_;\n    }\n\n    function setEndTime(uint256 endTime_) external onlyOwner {\n        require(endTime_ > startTime, \"DrawingGame: endTime must be greater than startTime\");\n        endTime = endTime_;\n    }\n\n    // chainlink\n    function requestRandomWordsForDraw(uint32 numWords) external checkDrawTime onlyOwner returns (uint256 requestId) {\n        // Will revert if subscription is not set and funded.\n        requestId = COORDINATOR.requestRandomWords(\n            keyHash,\n            subscriptionId,\n            requestConfirmations,\n            callbackGasLimit,\n            numWords\n        );\n        requests[requestId] = RequestStatus({randomWords: new uint256[](0), exists: true, fulfilled: false});\n        lastRequestId = requestId;\n        emit RequestSent(requestId, numWords);\n        return requestId;\n    }\n\n    function fulfillRandomWords(uint256 requestId_, uint256[] memory randomWords_) internal override {\n        require(requests[requestId_].exists, \"DrawingGame: request not found\");\n        requests[requestId_].fulfilled = true;\n        requests[requestId_].randomWords = randomWords_;\n        _draw(requestId_, randomWords_);\n        emit RequestFulfilled(requestId_, randomWords_);\n    }\n\n    function setCurrentTime(uint256 timestamp_) external onlyOwner {\n        _timestamp._setCurrentTime(timestamp_);\n    }\n\n    function getCurrentTime() external view returns (uint256) {\n        return _timestamp._getCurrentTime();\n    }\n}\n"
    },
    "contracts/ActivityReward/ActivityReward.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {VRFConsumerBaseV2Upgradeable} from \"../Chainlink/VRFConsumerBaseV2Upgradeable.sol\";\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../Abstract/SafeOwnableUpgradeable.sol\";\n\ncontract ActivityReward is Initializable, UUPSUpgradeable, SafeOwnableUpgradeable, VRFConsumerBaseV2Upgradeable {\n    event GetReward(address account, uint256 amount);\n    event WithdrawReleasedReward(address account, uint256 amount);\n    event InjectReleaseReward(address account, uint256 amount);\n    event RequestSent(uint256 requestId, uint32 numWords);\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\n\n    IERC20 public ERC20Token;\n    address private spender;\n    bytes32 private DOMAIN;\n    uint256 constant INTERVAL = 30 days;\n\n    //chainlink configure\n    uint64 public subscriptionId;\n    VRFCoordinatorV2Interface COORDINATOR;\n    bytes32 public keyHash;\n    uint32 public callbackGasLimit;\n    uint16 requestConfirmations;\n    struct RequestStatus {\n        address user;\n        uint256 randomWord;\n        bool fulfilled; // whether the request has been successfully fulfilled\n        bool exists; // whether a requestId exists\n    }\n    mapping(uint256 => RequestStatus) public requests; // requestId --> requestStatus\n\n    struct SlowlyReleaseReward {\n        uint256 firstInjectTime;\n        uint256 lastReleaseTime;\n        uint256 pool;\n    }\n\n    struct ReleaseReward {\n        mapping(address => SlowlyReleaseReward) record;\n        mapping(address => bool) inserted;\n    }\n    ReleaseReward private release_reward;\n\n    struct FutureReleaseData {\n        uint256 date;\n        uint256 amount;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    bool internal locked;\n    modifier lock() {\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    // Upgradeable contracts should have an initialize method in place of the constructor, and the initializer keyword ensures that the contract is initialized only once\n    function initialize(\n        address[] memory owners,\n        uint8 signRequred,\n        address vrfCoordinatorAddress_\n    ) public initializer {\n        __Ownable_init(owners, signRequred);\n\n        __VRFConsumerBaseV2_init(vrfCoordinatorAddress_);\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinatorAddress_);\n\n        __UUPSUpgradeable_init();\n\n        DOMAIN = keccak256(\n            abi.encode(keccak256(\"Domain(uint256 chainId,address verifyingContract)\"), block.chainid, address(this))\n        );\n    }\n\n    function setChainlink(\n        uint32 callbackGasLimit_,\n        uint64 subscribeId_,\n        bytes32 keyHash_,\n        uint16 requestConfirmations_\n    ) external onlyOwner {\n        callbackGasLimit = callbackGasLimit_;\n        subscriptionId = subscribeId_;\n        keyHash = keyHash_;\n        requestConfirmations = requestConfirmations_;\n    }\n\n    // This approach is needed to prevent unauthorized upgrades because in UUPS mode, the upgrade is done from the implementation contract, while in the transparent proxy model, the upgrade is done through the proxy contract\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    function getFreeReward(uint256 nonce_) external {\n        _freeReward(_msgSender(), nonce_);\n    }\n\n    function getFreeRewardTo(address to, uint256 nonce_) external {\n        _freeReward(to, nonce_);\n    }\n\n    function _freeReward(address to, uint256 nonce_)\n        private\n        onlyOperationPendding(HashToSign(getFreeRewardHash(to, nonce_)))\n    {\n        _rewardERC20(to, 5 * (10**17));\n    }\n\n    function getMultipleReward(uint256 nonce_) external {\n        _multipleReward(_msgSender(), nonce_);\n    }\n\n    function getMultipleRewardTo(address to, uint256 nonce_) external {\n        _multipleReward(to, nonce_);\n    }\n\n    function _multipleReward(address to, uint256 nonce_)\n        private\n        onlyOperationPendding(HashToSign(getMultipleRewardHash(to, nonce_)))\n    {\n        // ERC20Token.transferFrom(to, address(this), 5 * (10**16));\n        _randomNumber(to, 1);\n    }\n\n    function _multiple(uint256 requestId) private {\n        require(requests[requestId].randomWord > 0, \"ActivityReward: The randomWords number cannot be 0\");\n        uint256 num = requests[requestId].randomWord % 11170;\n        require(num > 0 && num <= 11170, \"ActivityReward: The remainder algorithm is wrong\");\n        uint256 radix = 1 * (10**17);\n        uint256 multiple = 0;\n        if (num < 2000) {\n            multiple = 2;\n        } else if (num < 4500) {\n            multiple = 5;\n        } else if (num < 7500) {\n            multiple = 8;\n        } else if (num < 9300) {\n            multiple = 10;\n        } else if (num < 10300) {\n            multiple = 15;\n        } else if (num < 10800) {\n            multiple = 20;\n        } else if (num < 11000) {\n            multiple = 40;\n        } else if (num < 11100) {\n            multiple = 100;\n        } else {\n            multiple = 150;\n        }\n        uint256 reward = radix * multiple;\n        _rewardERC20(requests[requestId].user, reward);\n    }\n\n    function _rewardERC20(address to, uint256 reward) private lock {\n        ERC20Token.transferFrom(spender, to, reward);\n        emit GetReward(to, reward);\n    }\n\n    function checkReleased(address receiver) public view returns (uint256) {\n        if (\n            !release_reward.inserted[receiver] ||\n            block.timestamp - release_reward.record[receiver].firstInjectTime <= INTERVAL\n        ) {\n            return 0;\n        }\n\n        uint256 result;\n        FutureReleaseData[] memory data = _futureReleaseData(receiver);\n\n        for (uint256 i = 0; i < data.length; ++i) {\n            if (data[i].date > block.timestamp || data[i].date == 0) {\n                break;\n            }\n            result += data[i].amount;\n        }\n        return result;\n    }\n\n    function _withdrawReleasedReward(address receiver) internal {\n        uint256 amount = checkReleased(receiver);\n        ERC20Token.transferFrom(spender, receiver, amount);\n        release_reward.record[receiver].lastReleaseTime = block.timestamp;\n        release_reward.record[receiver].pool -= amount;\n        emit WithdrawReleasedReward(receiver, amount);\n    }\n\n    function withdrawReleasedReward() public {\n        _withdrawReleasedReward(msg.sender);\n    }\n\n    function withdrawReleasedRewardTo(address to) public onlyOwner {\n        _withdrawReleasedReward(to);\n    }\n\n    function injectionIncomeAndPool(address receiver, uint256 amount)\n        public\n        view\n        returns (uint256 income, uint256 pool)\n    {\n        if (release_reward.inserted[receiver]) {\n            amount = (release_reward.record[receiver].pool + amount);\n        }\n\n        income = amount / 20;\n        if (income < 5 * 10**17) {\n            income = 5 * 10**17;\n        }\n\n        if (amount - income < 0) {\n            return (pool, 0);\n        } else {\n            pool = amount - income;\n        }\n\n        return (income, pool);\n    }\n\n    function injectReleaseReward(\n        address receiver,\n        uint256 amount,\n        uint256 nonce\n    ) public onlyOperationPendding(HashToSign(injectReleaseRewardHash(receiver, amount, nonce))) {\n        (uint256 income, uint256 pool) = injectionIncomeAndPool(receiver, amount);\n\n        if (pool < 5 * 10**17) {\n            income = pool;\n            pool = 0;\n        } else if (income < 5 * 10**17) {\n            income = 5 * 10**17;\n        }\n\n        ERC20Token.transferFrom(spender, receiver, income);\n        emit WithdrawReleasedReward(receiver, income);\n\n        if (release_reward.inserted[receiver]) {\n            release_reward.record[receiver].pool = pool;\n        } else {\n            release_reward.record[receiver] = SlowlyReleaseReward(block.timestamp, block.timestamp, pool);\n            release_reward.inserted[receiver] = true;\n        }\n        emit InjectReleaseReward(receiver, amount);\n    }\n\n    function HashToSign(bytes32 data) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", data));\n    }\n\n    function getFreeRewardHash(address to, uint256 nonce_) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(DOMAIN, keccak256(\"getFreeReward(address, uint256)\"), to, nonce_));\n    }\n\n    function getMultipleRewardHash(address to, uint256 nonce_) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(DOMAIN, keccak256(\"getMultipleReward(address, uint256)\"), to, nonce_));\n    }\n\n    function injectReleaseRewardHash(\n        address receiver,\n        uint256 amount,\n        uint256 nonce_\n    ) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    DOMAIN,\n                    keccak256(\"injectReleaseReward(address,uint256,uint256)\"),\n                    receiver,\n                    amount,\n                    nonce_\n                )\n            );\n    }\n\n    function _randomNumber(address user, uint32 numWords) private returns (uint256 requestId) {\n        // Will revert if subscription is not set and funded.\n        requestId = COORDINATOR.requestRandomWords(\n            keyHash,\n            subscriptionId,\n            requestConfirmations,\n            callbackGasLimit,\n            numWords\n        );\n        requests[requestId] = RequestStatus({randomWord: uint256(0), exists: true, fulfilled: false, user: user});\n        emit RequestSent(requestId, numWords);\n        return requestId;\n    }\n\n    function fulfillRandomWords(uint256 requestId_, uint256[] memory randomWords_) internal override {\n        require(requests[requestId_].exists, \"ActivityReward: request not found\");\n        require(!requests[requestId_].fulfilled, \"ActivityReward: request has been processed\");\n        requests[requestId_].randomWord = randomWords_[0];\n        _multiple(requestId_);\n        requests[requestId_].fulfilled = true;\n        emit RequestFulfilled(requestId_, randomWords_);\n    }\n\n    function Spender() public view returns (address) {\n        return spender;\n    }\n\n    function setSpender(address newSpender) external onlyOwner {\n        spender = newSpender;\n    }\n\n    function setERC20(address token) public onlyOwner {\n        ERC20Token = IERC20(token);\n    }\n\n    function releaseRewardRecord(address user) public view returns (SlowlyReleaseReward memory) {\n        return release_reward.record[user];\n    }\n\n    function releaseRewardInserted(address user) public view returns (bool) {\n        return release_reward.inserted[user];\n    }\n\n    function setReleaseRewardRecord(\n        address user,\n        uint256 firstInjectTime,\n        uint256 lastReleaseTime,\n        uint256 pool\n    ) public onlyOwner {\n        release_reward.record[user] = SlowlyReleaseReward(firstInjectTime, lastReleaseTime, pool);\n    }\n\n    function setReleaseRewardInserted(address user, bool isInserted) public onlyOwner {\n        release_reward.inserted[user] = isInserted;\n    }\n\n    function releaseRewardInfo(address user) external view returns (uint256 firstInjectTime, uint256 pool) {\n        return (release_reward.record[user].firstInjectTime, release_reward.record[user].pool);\n    }\n\n    function _futureReleaseData(address user) internal view returns (FutureReleaseData[] memory) {\n        uint256 firstInjectTime = release_reward.record[user].firstInjectTime;\n        uint256 lastReleaseTime = release_reward.record[user].lastReleaseTime;\n        uint256 pool = release_reward.record[user].pool;\n\n        uint8 index;\n        FutureReleaseData[] memory result = new FutureReleaseData[](100);\n\n        while (true) {\n            firstInjectTime += INTERVAL;\n            if (firstInjectTime <= lastReleaseTime) {\n                continue;\n            }\n\n            if (pool < 2 * 10**18) {\n                result[index] = FutureReleaseData(firstInjectTime, pool);\n                break;\n            }\n\n            uint256 income = pool / 10;\n            if (income < 2 * 10**18) {\n                income = 2 * 10**18;\n            }\n            result[index] = FutureReleaseData(firstInjectTime, income);\n\n            pool -= income;\n            ++index;\n        }\n\n        return result;\n    }\n\n    function futureReleaseData(address user) external view returns (FutureReleaseData[] memory) {\n        return _futureReleaseData(user);\n    }\n}\n"
    },
    "contracts/Chainlink/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface {\n    uint96 public immutable BASE_FEE;\n    uint96 public immutable GAS_PRICE_LINK;\n    uint16 public immutable MAX_CONSUMERS = 100;\n\n    error InvalidSubscription();\n    error InsufficientBalance();\n    error MustBeSubOwner(address owner);\n    error TooManyConsumers();\n    error InvalidConsumer();\n    error InvalidRandomWords();\n\n    event RandomWordsRequested(\n        bytes32 indexed keyHash,\n        uint256 requestId,\n        uint256 preSeed,\n        uint64 indexed subId,\n        uint16 minimumRequestConfirmations,\n        uint32 callbackGasLimit,\n        uint32 numWords,\n        address indexed sender\n    );\n    event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\n    event SubscriptionCreated(uint64 indexed subId, address owner);\n    event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\n    event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\n    event ConsumerAdded(uint64 indexed subId, address consumer);\n    event ConsumerRemoved(uint64 indexed subId, address consumer);\n\n    uint64 s_currentSubId;\n    uint256 public s_nextRequestId = 1;\n    uint256 public s_nextPreSeed = 100;\n    struct Subscription {\n        address owner;\n        uint96 balance;\n    }\n    mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\n    mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\n\n    struct Request {\n        uint64 subId;\n        uint32 callbackGasLimit;\n        uint32 numWords;\n    }\n    mapping(uint256 => Request) s_requests; /* requestId */ /* request */\n\n    constructor(uint96 _baseFee, uint96 _gasPriceLink) {\n        BASE_FEE = _baseFee;\n        GAS_PRICE_LINK = _gasPriceLink;\n    }\n\n    function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\n        address[] memory consumers = s_consumers[_subId];\n        for (uint256 i = 0; i < consumers.length; i++) {\n            if (consumers[i] == _consumer) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    modifier onlyValidConsumer(uint64 _subId, address _consumer) {\n        if (!consumerIsAdded(_subId, _consumer)) {\n            revert InvalidConsumer();\n        }\n        _;\n    }\n\n    /**\n     * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n     * @notice consumer.\n     *\n     * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n     * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n     * @dev against the real coordinator a small amount of additional LINK is required.\n     *\n     * @param _requestId the request to fulfill\n     * @param _consumer the VRF randomness consumer to send the result to\n     */\n    function fulfillRandomWords(uint256 _requestId, address _consumer) external {\n        fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\n    }\n\n    /**\n     * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n     *\n     * @param _requestId the request to fulfill\n     * @param _consumer the VRF randomness consumer to send the result to\n     * @param _words user-provided random words\n     */\n    function fulfillRandomWordsWithOverride(\n        uint256 _requestId,\n        address _consumer,\n        uint256[] memory _words\n    ) public {\n        uint256 startGas = gasleft();\n        if (s_requests[_requestId].subId == 0) {\n            revert(\"nonexistent request\");\n        }\n        Request memory req = s_requests[_requestId];\n\n        if (_words.length == 0) {\n            _words = new uint256[](req.numWords);\n            for (uint256 i = 0; i < req.numWords; i++) {\n                _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\n            }\n        } else if (_words.length != req.numWords) {\n            revert InvalidRandomWords();\n        }\n\n        VRFConsumerBaseV2 v;\n        bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\n        (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\n\n        uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\n        if (s_subscriptions[req.subId].balance < payment) {\n            revert InsufficientBalance();\n        }\n        s_subscriptions[req.subId].balance -= payment;\n        delete (s_requests[_requestId]);\n        emit RandomWordsFulfilled(_requestId, _requestId, 0, success);\n    }\n\n    /**\n     * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n     *\n     * @param _subId the subscription to fund\n     * @param _amount the amount to fund\n     */\n    function fundSubscription(uint64 _subId, uint96 _amount) public {\n        if (s_subscriptions[_subId].owner == address(0)) {\n            revert InvalidSubscription();\n        }\n        uint96 oldBalance = s_subscriptions[_subId].balance;\n        s_subscriptions[_subId].balance += _amount;\n        emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\n    }\n\n    function requestRandomWords(\n        bytes32 _keyHash,\n        uint64 _subId,\n        uint16 _minimumRequestConfirmations,\n        uint32 _callbackGasLimit,\n        uint32 _numWords\n    ) external override onlyValidConsumer(_subId, msg.sender) returns (uint256) {\n        if (s_subscriptions[_subId].owner == address(0)) {\n            revert InvalidSubscription();\n        }\n\n        uint256 requestId = s_nextRequestId++;\n        uint256 preSeed = s_nextPreSeed++;\n\n        s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\n\n        emit RandomWordsRequested(\n            _keyHash,\n            requestId,\n            preSeed,\n            _subId,\n            _minimumRequestConfirmations,\n            _callbackGasLimit,\n            _numWords,\n            msg.sender\n        );\n        return requestId;\n    }\n\n    function createSubscription() external override returns (uint64 _subId) {\n        s_currentSubId++;\n        s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 10**27});\n        emit SubscriptionCreated(s_currentSubId, msg.sender);\n        return s_currentSubId;\n    }\n\n    function getSubscription(uint64 _subId)\n        external\n        view\n        override\n        returns (\n            uint96 balance,\n            uint64 reqCount,\n            address owner,\n            address[] memory consumers\n        )\n    {\n        if (s_subscriptions[_subId].owner == address(0)) {\n            revert InvalidSubscription();\n        }\n        return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\n    }\n\n    function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) {\n        emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\n        delete (s_subscriptions[_subId]);\n    }\n\n    modifier onlySubOwner(uint64 _subId) {\n        address owner = s_subscriptions[_subId].owner;\n        if (owner == address(0)) {\n            revert InvalidSubscription();\n        }\n        if (msg.sender != owner) {\n            revert MustBeSubOwner(owner);\n        }\n        _;\n    }\n\n    function getRequestConfig()\n        external\n        pure\n        override\n        returns (\n            uint16,\n            uint32,\n            bytes32[] memory\n        )\n    {\n        return (3, 2000000, new bytes32[](0));\n    }\n\n    function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\n        if (s_consumers[_subId].length == MAX_CONSUMERS) {\n            revert TooManyConsumers();\n        }\n\n        if (consumerIsAdded(_subId, _consumer)) {\n            return;\n        }\n\n        s_consumers[_subId].push(_consumer);\n        emit ConsumerAdded(_subId, _consumer);\n    }\n\n    function removeConsumer(uint64 _subId, address _consumer)\n        external\n        override\n        onlySubOwner(_subId)\n        onlyValidConsumer(_subId, _consumer)\n    {\n        address[] storage consumers = s_consumers[_subId];\n        for (uint256 i = 0; i < consumers.length; i++) {\n            if (consumers[i] == _consumer) {\n                address last = consumers[consumers.length - 1];\n                consumers[i] = last;\n                consumers.pop();\n                break;\n            }\n        }\n\n        emit ConsumerRemoved(_subId, _consumer);\n    }\n\n    function getConfig()\n        external\n        pure\n        returns (\n            uint16 minimumRequestConfirmations,\n            uint32 maxGasLimit,\n            uint32 stalenessSeconds,\n            uint32 gasAfterPaymentCalculation\n        )\n    {\n        return (4, 2_500_000, 2_700, 33285);\n    }\n\n    function getFeeConfig()\n        external\n        pure\n        returns (\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\n            uint32 fulfillmentFlatFeeLinkPPMTier2,\n            uint32 fulfillmentFlatFeeLinkPPMTier3,\n            uint32 fulfillmentFlatFeeLinkPPMTier4,\n            uint32 fulfillmentFlatFeeLinkPPMTier5,\n            uint24 reqsForTier2,\n            uint24 reqsForTier3,\n            uint24 reqsForTier4,\n            uint24 reqsForTier5\n        )\n    {\n        return (\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            0,\n            0,\n            0,\n            0\n        );\n    }\n\n    function getFallbackWeiPerUnitLink() external pure returns (int256) {\n        return 4000000000000000; // 0.004 Ether\n    }\n\n    function requestSubscriptionOwnerTransfer(uint64 _subId, address _newOwner) external pure override {\n        revert(\"not implemented\");\n    }\n\n    function acceptSubscriptionOwnerTransfer(uint64 _subId) external pure override {\n        revert(\"not implemented\");\n    }\n\n    function pendingRequestExists(uint64 subId) public view override returns (bool) {\n        revert(\"not implemented\");\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/ERC20/VM3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport {ERC20Burnable, ERC20} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport {SafeOwnable} from \"../Abstract/SafeOwnable.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract VM3 is SafeOwnable, ERC20Burnable {\n    using ECDSA for bytes32;\n    uint256 constant TotalAmout = 80000000000000000000000000;\n\n    bytes32 public immutable DOMAIN;\n\n    constructor(\n        uint256 initialSupply,\n        address mintAddr,\n        address[] memory owners,\n        uint8 signRequred\n    ) ERC20(\"VMeta3\", \"VM3\") SafeOwnable(owners, signRequred) {\n        _mint(mintAddr, initialSupply * (10**18));\n        DOMAIN = keccak256(\n            abi.encode(\n                keccak256(\"Domain(string name,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name())),\n                block.chainid,\n                address(this)\n            )\n        );\n    }\n\n    function getMintHash(\n        address to,\n        uint256 amount,\n        uint256 nonce_\n    ) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(DOMAIN, keccak256(\"mint(address,uint256,uint256)\"), to, amount, nonce_));\n    }\n\n    function _hashToSign(bytes32 data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", data));\n    }\n\n    function mint(\n        address to,\n        uint256 amount,\n        bytes[] memory sigs\n    ) external onlyMultipleOwner(_hashToSign(getMintHash(to, amount, nonce)), sigs) {\n        _mint(to, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(amount + totalSupply() <= TotalAmout, \"VMeta3: the total amount issued exceeded the TotalAmout\");\n        super._mint(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/ERC20/Test.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TestERC20 is ERC20Burnable, Ownable {\n    constructor() ERC20(\"TST\", \"Test Token\") {\n        _mint(msg.sender, 100000000000000000 * (10**18));\n        _transferOwnership(msg.sender);\n    }\n}\n"
    },
    "contracts/Test/InvestmentMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract InvestmentMock {\n    uint256 private interestWarehouse;\n    uint256 private unreturnedInterest;\n\n    // Cumulative upper limit of individual investment\n    uint256 constant INDIVIDUAL_INVESTMENT_LIMIT = 50000 * 10**18;\n    uint256 constant INTERVAL = 30 days;\n\n    uint256 public activityStartTime;\n    uint256 public activityEndTime;\n\n    struct InvestorInfo {\n        uint256 amount;\n        uint256 startTime;\n        uint8 residualTimes;\n        uint8 level;\n    }\n\n    struct MapInvestor {\n        address[] keys;\n        mapping(address => InvestorInfo[]) values;\n        mapping(address => bool) inserted;\n    }\n    MapInvestor private mapInvestor;\n\n    struct LatestList {\n        address addr;\n        uint8 level;\n    }\n\n    event Deposit(address account, uint256 amount);\n    event Withdraw(address account, uint256 amount);\n\n    constructor(\n        address _interestToken,\n        address _interestAddr,\n        uint256 _activityStartTime,\n        uint256 _activityEndTime\n    ) {\n        activityStartTime = _activityStartTime;\n        activityEndTime = _activityEndTime;\n    }\n\n    function deposit(uint256 amount) public {\n        _pushMapInvestor(amount);\n        mapInvestor.inserted[msg.sender] = true;\n        mapInvestor.keys.push(msg.sender);\n\n        emit Deposit(msg.sender, amount);\n    }\n\n    function _pushMapInvestor(uint256 amount) internal {\n        (uint8 level, uint8 times) = _calculation_level_and_times(amount);\n        uint256 interest = _calculation_interest(amount, times);\n\n        mapInvestor.values[msg.sender].push(InvestorInfo(amount, block.timestamp, times, level));\n        unreturnedInterest += interest;\n    }\n\n    function _calculation_interest(uint256 amount, uint8 times) internal pure returns (uint256) {\n        return (amount / 10) * times;\n    }\n\n    // Return `level` and `return times`\n    function _calculation_level_and_times(uint256 amount) internal pure returns (uint8 level, uint8 times) {\n        if (amount >= 100 * 10**18 && amount <= 999 * 10**18) {\n            return (1, 12);\n        } else if (amount >= 1000 * 10**18 && amount <= 9999 * 10**18) {\n            return (2, 15);\n        } else if (amount >= 10000 * 10**18 && amount <= 50000 * 10**18) {\n            return (3, 18);\n        } else {\n            return (0, 0);\n        }\n    }\n\n    function _calculation_times(uint8 level) internal pure returns (uint8) {\n        if (level == 1) {\n            return 12;\n        } else if (level == 2) {\n            return 15;\n        } else if (level == 3) {\n            return 18;\n        } else {\n            return 0;\n        }\n    }\n\n    function getLatestList() external view returns (LatestList[] memory) {\n        LatestList[] memory list = new LatestList[](mapInvestor.keys.length);\n        for (uint256 i = 0; i < mapInvestor.keys.length; i++) {\n            address key = mapInvestor.keys[i];\n            list[i] = LatestList(key, mapInvestor.values[key][mapInvestor.values[key].length - 1].level);\n        }\n        return list;\n    }\n\n    function getLevel(uint8 index) external view returns (uint8 level) {\n        if (mapInvestor.inserted[msg.sender] && index < mapInvestor.values[msg.sender].length) {\n            level = mapInvestor.values[msg.sender][index].level;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
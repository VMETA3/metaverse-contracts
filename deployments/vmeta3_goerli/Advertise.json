{
  "address": "0x087186D43Ae55Ddad1452E35737b4cbC47E49F3C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_starting_time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_end_time",
          "type": "uint256"
        }
      ],
      "name": "SetAdTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_cap_per_person",
          "type": "uint256"
        }
      ],
      "name": "SetCapPerPerson",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nft_token_id",
          "type": "uint256"
        }
      ],
      "name": "SetSurprise",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "SetTestTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SetUniversal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nft_token_id",
          "type": "uint256"
        }
      ],
      "name": "SuperLuckyMan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "awardItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "total_",
          "type": "uint256"
        }
      ],
      "name": "batchAwardItem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token_id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap_per_person",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "end_time",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSurpriseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSurpriseLuckyId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSurpriseNftId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSurpriseNftToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSurpriseStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSurpriseToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniversalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniversalToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end_",
          "type": "uint256"
        }
      ],
      "name": "setAdTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap_per_person_",
          "type": "uint256"
        }
      ],
      "name": "setCapPerPerson",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr_",
          "type": "address"
        }
      ],
      "name": "setSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nft_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nft_token_id",
          "type": "uint256"
        }
      ],
      "name": "setSurprise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp_",
          "type": "uint256"
        }
      ],
      "name": "setTestTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setUniversal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "starting_time",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft_token_id",
          "type": "uint256"
        }
      ],
      "name": "superLuckyMan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x459f113ee6bf515560ac4735e46e39685c1fa089c757f4489b2a34894a21fdbf",
  "receipt": {
    "to": null,
    "from": "0x573448a5E1a3550c29654E1d63DF95B2726E649E",
    "contractAddress": "0x087186D43Ae55Ddad1452E35737b4cbC47E49F3C",
    "transactionIndex": 0,
    "gasUsed": "2432775",
    "logsBloom": "0x
    "blockHash": "0x1dcc5106655876bf3f2b4224d5e4f22b57be4e12e383574b2b80ad8a7025e7a8",
    "transactionHash": "0x459f113ee6bf515560ac4735e46e39685c1fa089c757f4489b2a34894a21fdbf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 352,
        "transactionHash": "0x459f113ee6bf515560ac4735e46e39685c1fa089c757f4489b2a34894a21fdbf",
        "address": "0x087186D43Ae55Ddad1452E35737b4cbC47E49F3C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000573448a5e1a3550c29654e1d63df95b2726e649e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1dcc5106655876bf3f2b4224d5e4f22b57be4e12e383574b2b80ad8a7025e7a8"
      }
    ],
    "blockNumber": 352,
    "cumulativeGasUsed": "2432775",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Test AD",
    "TAD",
    1000
  ],
  "numDeployments": 1,
  "solcInputHash": "dfef3634e9ff937382408d71ccb64ada",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_starting_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_end_time\",\"type\":\"uint256\"}],\"name\":\"SetAdTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cap_per_person\",\"type\":\"uint256\"}],\"name\":\"SetCapPerPerson\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft_token_id\",\"type\":\"uint256\"}],\"name\":\"SetSurprise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SetTestTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetUniversal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft_token_id\",\"type\":\"uint256\"}],\"name\":\"SuperLuckyMan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"awardItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"}],\"name\":\"batchAwardItem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap_per_person\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSurpriseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSurpriseLuckyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSurpriseNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSurpriseNftToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSurpriseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSurpriseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniversalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniversalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_\",\"type\":\"uint256\"}],\"name\":\"setAdTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap_per_person_\",\"type\":\"uint256\"}],\"name\":\"setCapPerPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nft_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft_token_id\",\"type\":\"uint256\"}],\"name\":\"setSurprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp_\",\"type\":\"uint256\"}],\"name\":\"setTestTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setUniversal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starting_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_token_id\",\"type\":\"uint256\"}],\"name\":\"superLuckyMan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Advertise/Advertise.sol\":\"Advertise\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Advertise/Advertise.sol\":{\"content\":\"// contracts/advertise/advertise.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Interface Imports */\\nimport {IAdvertise} from \\\"./IAdvertise.sol\\\";\\n\\n/* Library Imports */\\nimport {Time} from \\\"../Lib/Time.sol\\\";\\nimport {Prize} from \\\"../Lib/Prize.sol\\\";\\n\\n/* Contract Imports */\\nimport {ERC721Ticket} from \\\"./ERC721Ticket.sol\\\";\\n\\ncontract Advertise is IAdvertise, ERC721Ticket {\\n    // Control timestamp\\n    using Time for Time.Timestamp;\\n    Time.Timestamp private _timestamp;\\n\\n    // Prizes for current ad\\n    using Prize for Prize.Universal;\\n    Prize.Universal private Universal;\\n    using Prize for Prize.Surprise;\\n    Prize.Surprise private Surprise;\\n\\n    // Used to manage NFT transactions and settlements\\n    uint256 public starting_time;\\n    uint256 public end_time;\\n    uint256 public cap_per_person = 0; // Maximum amount of prizes held per account, 0 means no limit\\n\\n    address private settlement;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 total\\n    ) ERC721Ticket(name, symbol, total) {}\\n\\n    modifier isActive() {\\n        uint256 time = _timestamp._getCurrentTime();\\n        require((time >= starting_time && time <= end_time), \\\"isActive: Not at the specified time\\\");\\n        _;\\n    }\\n\\n    modifier revealRewards() {\\n        uint256 time = _timestamp._getCurrentTime();\\n        require((time > end_time), \\\"revealRewards: It's not time to reveal the rewards\\\");\\n        _;\\n    }\\n\\n    modifier onlySettlement() {\\n        require(msg.sender == settlement, \\\"onlySettlement: Permission denied\\\");\\n        _;\\n    }\\n\\n    function setSettlement(address addr_) external onlyOwner {\\n        settlement = addr_;\\n    }\\n\\n    function setTestTime(uint256 timestamp_) external override onlyOwner {\\n        _timestamp._setCurrentTime(timestamp_);\\n        emit SetTestTime(timestamp_);\\n    }\\n\\n    function setAdTime(uint256 start_, uint256 end_) external override onlyOwner {\\n        require(start_ < end_, \\\"invalid time\\\");\\n        starting_time = start_;\\n        end_time = end_;\\n        emit SetAdTime(starting_time, end_time);\\n    }\\n\\n    function setCapPerPerson(uint256 cap_per_person_) external override onlyOwner {\\n        cap_per_person = cap_per_person_;\\n        emit SetCapPerPerson(cap_per_person);\\n    }\\n\\n    function setUniversal(address token, uint256 amount) external override onlyOwner {\\n        Universal._setUniversal(token, amount);\\n        emit SetUniversal(token, amount);\\n    }\\n\\n    function setSurprise(\\n        address token,\\n        uint256 amount,\\n        address nft_token,\\n        uint256 nft_token_id\\n    ) external override onlyOwner {\\n        Surprise._setSurprise(token, amount, nft_token, nft_token_id);\\n        emit SetSurprise(token, amount, nft_token, nft_token_id);\\n    }\\n\\n    function superLuckyMan(uint256 nft_token_id) external override onlyOwner {\\n        require(!Surprise.is_revealed, \\\"cannot be repeated\\\");\\n        Surprise._superLuckyMan(nft_token_id);\\n        emit SuperLuckyMan(nft_token_id);\\n    }\\n\\n    // The transfer must be within the validity period\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 ticket_id\\n    ) internal virtual override onlyOwner isActive {\\n        uint256 balance = super.balanceOf(to);\\n        if (cap_per_person > 0) {\\n            require(balance < cap_per_person, \\\"Transfer:The account holding has reached the upper limit\\\");\\n        }\\n        super._transfer(from, to, ticket_id);\\n    }\\n\\n    function getCurrentTime() public view returns (uint256) {\\n        return _timestamp._getCurrentTime();\\n    }\\n\\n    function getEndTime() public view returns (uint256) {\\n        return end_time;\\n    }\\n\\n    function getUniversalToken() public view returns (address) {\\n        return Universal.universal_token();\\n    }\\n\\n    function getUniversalAmount() public view returns (uint256) {\\n        return Universal.universal_amount();\\n    }\\n\\n    function getSurpriseToken() public view returns (address) {\\n        return Surprise.surprise_token();\\n    }\\n\\n    function getSurpriseAmount() public view returns (uint256) {\\n        return Surprise.surprise_amount();\\n    }\\n\\n    function getSurpriseNftToken() public view returns (address) {\\n        return Surprise.surprise_nft_token();\\n    }\\n\\n    function getSurpriseNftId() public view returns (uint256) {\\n        return Surprise.surprise_nft_id();\\n    }\\n\\n    function getSurpriseLuckyId() public view returns (uint256) {\\n        return Surprise.surprise_surprise_id();\\n    }\\n\\n    function getSurpriseStatus() public view returns (bool) {\\n        return Surprise.surprise_is_revealed();\\n    }\\n\\n    function burn(uint256 token_id) public onlySettlement {\\n        super._burn(token_id);\\n    }\\n}\\n\",\"keccak256\":\"0x345da6b8929f364bde98dbb7a03b9d1adceabcd6c9baa09ec8d6d2db34ebb29a\",\"license\":\"MIT\"},\"contracts/Advertise/ERC721Ticket.sol\":{\"content\":\"// contracts/Advertise.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract ERC721Ticket is ERC721URIStorage, Ownable {\\n    event mint(address indexed from, uint256 tokenId);\\n\\n    // Control NFTIDs\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    uint256 public total;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 total_\\n    ) ERC721(name, symbol) {\\n        total = total_ - 1;\\n    }\\n\\n    function awardItem(address player, string memory tokenURI) public onlyOwner returns (uint256) {\\n        uint256 newItemId = _tokenIds.current();\\n        require(newItemId <= total, \\\"UpperLimit: the limit has been reached\\\");\\n        _mint(player, newItemId);\\n        _setTokenURI(newItemId, tokenURI);\\n\\n        _tokenIds.increment();\\n        emit mint(player, newItemId);\\n        return newItemId;\\n    }\\n\\n    function batchAwardItem(\\n        address player,\\n        string memory tokenURI,\\n        uint256 total_\\n    ) public onlyOwner returns (bool) {\\n        require(((_tokenIds.current() + total_) - 1) <= total, \\\"UpperLimit: the limit has been reached\\\");\\n        for (uint256 i = 0; i < total_; i++) {\\n            awardItem(player, tokenURI);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x8b32e97d2899a8b17db1b6ec86d098bbc8d7ccd3deff5b84d1e5aafaf00f2934\",\"license\":\"MIT\"},\"contracts/Advertise/IAdvertise.sol\":{\"content\":\"// contracts/advertise/advertise.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAdvertise {\\n    /**********\\n     * Events *\\n     **********/\\n    event SetTestTime(uint256 _timestamp);\\n\\n    event SetAdTime(uint256 _starting_time, uint256 _end_time);\\n\\n    event SetCapPerPerson(uint256 _cap_per_person);\\n\\n    event SetUniversal(address token, uint256 amount);\\n\\n    event SetSurprise(address token, uint256 amount, address nft_token, uint256 nft_token_id);\\n\\n    event SuperLuckyMan(uint256 nft_token_id);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n    function setTestTime(uint256 timestamp_) external;\\n\\n    function setAdTime(uint256 start_, uint256 end_) external;\\n\\n    function setCapPerPerson(uint256 cap_per_person_) external;\\n\\n    function setUniversal(address token, uint256 amount) external;\\n\\n    function setSurprise(\\n        address token,\\n        uint256 amount,\\n        address nft_token,\\n        uint256 nft_token_id\\n    ) external;\\n\\n    function superLuckyMan(uint256 nft_token_id) external;\\n}\\n\",\"keccak256\":\"0xee5fb97a6eb2f50bc6a77ed22dbbf344248bd6a9c7f585d79167a3af0cc9c08a\",\"license\":\"MIT\"},\"contracts/Lib/Prize.sol\":{\"content\":\"// Lib/Prize.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Prize {\\n    // Rewards for every winner\\n    struct Universal {\\n        address token;\\n        uint256 amount;\\n    }\\n    // Rewards only available to the luckiest winners\\n    struct Surprise {\\n        bool is_revealed;\\n        address token;\\n        uint256 amount;\\n        address nft_token;\\n        uint256 nft_token_id;\\n        uint256 surprise_id;\\n    }\\n\\n    // Public Functions\\n    function universal_token(Universal storage _universal) public view returns (address) {\\n        return _universal.token;\\n    }\\n\\n    function universal_amount(Universal storage _universal) public view returns (uint256) {\\n        return _universal.amount;\\n    }\\n\\n    function surprise_token(Surprise storage _surprise) public view returns (address) {\\n        return _surprise.token;\\n    }\\n\\n    function surprise_amount(Surprise storage _surprise) public view returns (uint256) {\\n        return _surprise.amount;\\n    }\\n\\n    function surprise_nft_token(Surprise storage _surprise) public view returns (address) {\\n        return _surprise.nft_token;\\n    }\\n\\n    function surprise_nft_id(Surprise storage _surprise) public view returns (uint256) {\\n        return _surprise.nft_token_id;\\n    }\\n\\n    function surprise_surprise_id(Surprise storage _surprise) public view returns (uint256) {\\n        return _surprise.surprise_id;\\n    }\\n\\n    function surprise_is_revealed(Surprise storage _surprise) public view returns (bool) {\\n        return _surprise.is_revealed;\\n    }\\n\\n    //\\n    function _setUniversal(\\n        Universal storage _universal,\\n        address token_,\\n        uint256 amount_\\n    ) internal {\\n        _universal.token = token_;\\n        _universal.amount = amount_;\\n    }\\n\\n    function _setSurprise(\\n        Surprise storage _surprise,\\n        address token_,\\n        uint256 amount_,\\n        address nft_token_,\\n        uint256 nft_token_id_\\n    ) internal {\\n        _surprise.token = token_;\\n        _surprise.amount = amount_;\\n        _surprise.nft_token = nft_token_;\\n        _surprise.nft_token_id = nft_token_id_;\\n    }\\n\\n    function _superLuckyMan(Surprise storage _surprise, uint256 surprise_id_) internal {\\n        _surprise.is_revealed = true;\\n        _surprise.surprise_id = surprise_id_;\\n    }\\n}\\n\",\"keccak256\":\"0x44f65a56eb7edae4e6f14988e098d5ddaf96e727a8b48cc4c51f0d361346413d\",\"license\":\"MIT\"},\"contracts/Lib/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Control the current timestamp for easy debugging\\n * @author Stone (@Vmeta3 Labs)\\n * @dev If it is not in development mode, please do not modify the current time\\n */\\nlibrary Time {\\n    struct Timestamp {\\n        uint256 _current_time;\\n    }\\n\\n    function _getCurrentTime(Timestamp storage timestamp) internal view returns (uint256) {\\n        if (timestamp._current_time > 0) {\\n            return timestamp._current_time;\\n        } else {\\n            return block.timestamp;\\n        }\\n    }\\n\\n    function _setCurrentTime(Timestamp storage timestamp, uint256 time_map) internal {\\n        timestamp._current_time = time_map;\\n    }\\n}\\n\",\"keccak256\":\"0x9bc2a747c41f3366a6a908e8ebb52194b6b3b5ab159a646ea48bb8ae381adae8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006014553480156200001657600080fd5b5060405162002c9f38038062002c9f83398101604081905262000039916200026f565b8282828282816000908051906020019062000056929190620000fc565b5080516200006c906001906020840190620000fc565b5050506200008962000083620000a660201b60201c565b620000aa565b62000096600182620002e2565b6009555062000345945050505050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200010a9062000308565b90600052602060002090601f0160209004810192826200012e576000855562000179565b82601f106200014957805160ff191683800117855562000179565b8280016001018555821562000179579182015b82811115620001795782518255916020019190600101906200015c565b50620001879291506200018b565b5090565b5b808211156200018757600081556001016200018c565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001ca57600080fd5b81516001600160401b0380821115620001e757620001e7620001a2565b604051601f8301601f19908116603f01168101908282118183101715620002125762000212620001a2565b816040528381526020925086838588010111156200022f57600080fd5b600091505b8382101562000253578582018301518183018401529082019062000234565b83821115620002655760008385830101525b9695505050505050565b6000806000606084860312156200028557600080fd5b83516001600160401b03808211156200029d57600080fd5b620002ab87838801620001b8565b94506020860151915080821115620002c257600080fd5b50620002d186828701620001b8565b925050604084015190509250925092565b6000828210156200030357634e487b7160e01b600052601160045260246000fd5b500390565b600181811c908216806200031d57607f821691505b602082108114156200033f57634e487b7160e01b600052602260045260246000fd5b50919050565b61294a80620003556000396000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c80635d1b48b21161017b5780639ab6d0cf116100d8578063c9d1d7241161008c578063cf37834311610071578063cf3783431461051d578063e985e9c514610530578063f2fde38b1461056c57600080fd5b8063c9d1d72414610502578063cdc186c21461051557600080fd5b8063b88d4fde116100bd578063b88d4fde146104d4578063c87b56dd146104e7578063c995cf82146104fa57600080fd5b80639ab6d0cf146104ae578063a22cb465146104c157600080fd5b806389564be81161012f5780638f4e6f37116101145780638f4e6f371461048057806395d89b4114610493578063999434bc1461049b57600080fd5b806389564be8146104665780638da5cb5b1461046f57600080fd5b806370a082311161016057806370a0823114610438578063715018a61461044b5780637dda10021461045357600080fd5b80635d1b48b21461041d5780636352211e1461042557600080fd5b806329ee79791161022957806341dc9626116101dd57806342966c68116101c257806342966c68146103ef578063439f5ac2146104025780634f86a2ef1461040a57600080fd5b806341dc9626146103d457806342842e0e146103dc57600080fd5b80632f273a961161020e5780632f273a96146103bb5780633aa500f5146103c45780633b108d12146103cc57600080fd5b806329ee79791461039f5780632ddbd13a146103b257600080fd5b806312cec21f1161028057806323b872dd1161026557806323b872dd1461037c57806327115fd81461038f57806329cb924d1461039757600080fd5b806312cec21f1461035d578063162433561461037357600080fd5b8063081812fc116102b1578063081812fc1461030a578063095ea7b314610335578063097c74061461034a57600080fd5b806301ffc9a7146102cd57806306fdde03146102f5575b600080fd5b6102e06102db366004612338565b61057f565b60405190151581526020015b60405180910390f35b6102fd610664565b6040516102ec91906123ad565b61031d6103183660046123c0565b6106f6565b6040516001600160a01b0390911681526020016102ec565b6103486103433660046123ee565b61071d565b005b6103486103583660046123c0565b610854565b61036561089d565b6040519081526020016102ec565b61036560135481565b61034861038a36600461241a565b610942565b6103656109c9565b610365610a1d565b6103486103ad3660046123ee565b610a29565b61036560095481565b61036560125481565b610365610aa5565b61031d610af9565b610365610b99565b6103486103ea36600461241a565b610bed565b6103486103fd3660046123c0565b610c08565b601354610365565b6103486104183660046123c0565b610c94565b6102e0610d38565b61031d6104333660046123c0565b610dd7565b61036561044636600461245b565b610e3c565b610348610ed6565b610348610461366004612478565b610eea565b61036560145481565b6007546001600160a01b031661031d565b61034861048e36600461245b565b610f81565b6102fd610fb8565b6103486104a936600461249a565b610fc7565b6102e06104bc36600461258e565b611087565b6103486104cf3660046125f5565b61115b565b6103486104e236600461262e565b61116a565b6102fd6104f53660046123c0565b6111f8565b61031d611309565b6103486105103660046123c0565b61135d565b61031d61139a565b61036561052b3660046126ae565b6113ee565b6102e061053e3660046126fe565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61034861057a36600461245b565b6114e9565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061061257507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546106739061272c565b80601f016020809104026020016040519081016040528092919081815260200182805461069f9061272c565b80156106ec5780601f106106c1576101008083540402835291602001916106ec565b820191906000526020600020905b8154815290600101906020018083116106cf57829003601f168201915b5050505050905090565b600061070182611576565b506000908152600460205260409020546001600160a01b031690565b600061072882610dd7565b9050806001600160a01b0316836001600160a01b031614156107b75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107d357506107d3813361053e565b6108455760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016107ae565b61084f83836115da565b505050565b61085c611655565b610866600a829055565b6040518181527f8e71b95180bc7c28aed93371acbc7a4da0e5fdb66d60d2c138fe13b5290a8da2906020015b60405180910390a150565b6040517f52eee774000000000000000000000000000000000000000000000000000000008152600d60048201526000907375Fb33D81A965fD02DD64fac4f0463e42A1ef856906352eee774906024015b60206040518083038186803b15801561090557600080fd5b505af4158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190612767565b905090565b61094c33826116af565b6109be5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f76656400000000000000000000000000000000000060648201526084016107ae565b61084f83838361172d565b6040517f9dc5d3e3000000000000000000000000000000000000000000000000000000008152600b60048201526000907375Fb33D81A965fD02DD64fac4f0463e42A1ef85690639dc5d3e3906024016108ed565b600061093d600a611868565b610a31611655565b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055600c819055604080516001600160a01b0384168152602081018390527fe6fefa8502e78684d621f7cd79f7064782fe85fbb8696d85d1831157e64e9b0d91015b60405180910390a15050565b6040517ff88bd2e6000000000000000000000000000000000000000000000000000000008152600d60048201526000907375Fb33D81A965fD02DD64fac4f0463e42A1ef8569063f88bd2e6906024016108ed565b6040517fb28a6b5a000000000000000000000000000000000000000000000000000000008152600b60048201526000907375Fb33D81A965fD02DD64fac4f0463e42A1ef8569063b28a6b5a906024015b60206040518083038186803b158015610b6157600080fd5b505af4158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190612780565b6040517f691d76ef000000000000000000000000000000000000000000000000000000008152600d60048201526000907375Fb33D81A965fD02DD64fac4f0463e42A1ef8569063691d76ef906024016108ed565b61084f8383836040518060200160405280600081525061116a565b6015546001600160a01b03163314610c885760405162461bcd60e51b815260206004820152602160248201527f6f6e6c79536574746c656d656e743a205065726d697373696f6e2064656e696560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016107ae565b610c918161187e565b50565b610c9c611655565b600d5460ff1615610cef5760405162461bcd60e51b815260206004820152601260248201527f63616e6e6f74206265207265706561746564000000000000000000000000000060448201526064016107ae565b610d08600d82815460ff19166001178255600490910155565b6040518181527fda32d3220cbbd3f75c13672c4ca09f23ad567aafa3129708621f65985330eaaf90602001610892565b6040517f20efe87a000000000000000000000000000000000000000000000000000000008152600d60048201526000907375Fb33D81A965fD02DD64fac4f0463e42A1ef856906320efe87a9060240160206040518083038186803b158015610d9f57600080fd5b505af4158015610db3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d919061279d565b6000818152600260205260408120546001600160a01b03168061065e5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107ae565b60006001600160a01b038216610eba5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016107ae565b506001600160a01b031660009081526003602052604090205490565b610ede611655565b610ee860006118be565b565b610ef2611655565b808210610f415760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642074696d65000000000000000000000000000000000000000060448201526064016107ae565b6012829055601381905560408051838152602081018390527fe7754d427fa48e0fd514e205afc1230e2f209449de580d195a0393471a841a109101610a99565b610f89611655565b6015805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060600180546106739061272c565b610fcf611655565b600d80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b0387811691820292909217909255600e859055600f805473ffffffffffffffffffffffffffffffffffffffff19169185169182179055601083905560408051928352602083018690528281019190915260608201839052517fa25d9c516a746a27e71e24e075febf64c33bad776135eb1566446a8e4532b5a09181900360800190a150505050565b6000611091611655565b6009546001836110a060085490565b6110aa91906127d0565b6110b491906127e8565b11156111285760405162461bcd60e51b815260206004820152602660248201527f55707065724c696d69743a20746865206c696d697420686173206265656e207260448201527f656163686564000000000000000000000000000000000000000000000000000060648201526084016107ae565b60005b828110156111505761113d85856113ee565b5080611148816127ff565b91505061112b565b506001949350505050565b61116633838361191d565b5050565b61117433836116af565b6111e65760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f76656400000000000000000000000000000000000060648201526084016107ae565b6111f2848484846119ec565b50505050565b606061120382611576565b6000828152600660205260408120805461121c9061272c565b80601f01602080910402602001604051908101604052809291908181526020018280546112489061272c565b80156112955780601f1061126a57610100808354040283529160200191611295565b820191906000526020600020905b81548152906001019060200180831161127857829003601f168201915b5050505050905060006112b360408051602081019091526000815290565b90508051600014156112c6575092915050565b8151156112f85780826040516020016112e0929190612838565b60405160208183030381529060405292505050919050565b61130184611a75565b949350505050565b6040517f88575b23000000000000000000000000000000000000000000000000000000008152600d60048201526000907375Fb33D81A965fD02DD64fac4f0463e42A1ef856906388575b2390602401610b49565b611365611655565b60148190556040518181527faced56f82e5761c222bd79c5badff97dd1fd4657ca48391f2c675999949687ff90602001610892565b6040517fb5f91e71000000000000000000000000000000000000000000000000000000008152600d60048201526000907375Fb33D81A965fD02DD64fac4f0463e42A1ef8569063b5f91e7190602401610b49565b60006113f8611655565b600061140360085490565b905060095481111561147d5760405162461bcd60e51b815260206004820152602660248201527f55707065724c696d69743a20746865206c696d697420686173206265656e207260448201527f656163686564000000000000000000000000000000000000000000000000000060648201526084016107ae565b6114878482611ae9565b6114918184611c38565b61149f600880546001019055565b836001600160a01b03167f40c10f19c047ae7dfa66d6312b683d2ea3dfbcb4159e96b967c5f4b0a86f2842826040516114da91815260200190565b60405180910390a29392505050565b6114f1611655565b6001600160a01b03811661156d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107ae565b610c91816118be565b6000818152600260205260409020546001600160a01b0316610c915760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107ae565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061161c82610dd7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6007546001600160a01b03163314610ee85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ae565b6000806116bb83610dd7565b9050806001600160a01b0316846001600160a01b0316148061170257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113015750836001600160a01b031661171b846106f6565b6001600160a01b031614949350505050565b611735611655565b6000611741600a611868565b9050601254811015801561175757506013548111155b6117c95760405162461bcd60e51b815260206004820152602360248201527f69734163746976653a204e6f742061742074686520737065636966696564207460448201527f696d65000000000000000000000000000000000000000000000000000000000060648201526084016107ae565b60006117d484610e3c565b601454909150156118565760145481106118565760405162461bcd60e51b815260206004820152603860248201527f5472616e736665723a546865206163636f756e7420686f6c64696e672068617360448201527f207265616368656420746865207570706572206c696d6974000000000000000060648201526084016107ae565b611861858585611ce1565b5050505050565b80546000901561187757505490565b5042919050565b61188781611ebb565b600081815260066020526040902080546118a09061272c565b159050610c91576000818152600660205260408120610c9191612237565b600780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561197f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107ae565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6119f784848461172d565b611a0384848484611f63565b6111f25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107ae565b6060611a8082611576565b6000611a9760408051602081019091526000815290565b90506000815111611ab75760405180602001604052806000815250611ae2565b80611ac184612105565b604051602001611ad2929190612838565b6040516020818303038152906040525b9392505050565b6001600160a01b038216611b3f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107ae565b6000818152600260205260409020546001600160a01b031615611ba45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107ae565b6001600160a01b0382166000908152600360205260408120805460019290611bcd9084906127d0565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600260205260409020546001600160a01b0316611cc25760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e00000000000000000000000000000000000060648201526084016107ae565b6000828152600660209081526040909120825161084f92840190612271565b826001600160a01b0316611cf482610dd7565b6001600160a01b031614611d705760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016107ae565b6001600160a01b038216611deb5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107ae565b611df66000826115da565b6001600160a01b0383166000908152600360205260408120805460019290611e1f9084906127e8565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e4d9084906127d0565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611ec682610dd7565b9050611ed36000836115da565b6001600160a01b0381166000908152600360205260408120805460019290611efc9084906127e8565b9091555050600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160a01b0384163b15611150576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611fc0903390899088908890600401612867565b602060405180830381600087803b158015611fda57600080fd5b505af192505050801561200a575060408051601f3d908101601f19168201909252612007918101906128a3565b60015b6120ba573d808015612038576040519150601f19603f3d011682016040523d82523d6000602084013e61203d565b606091505b5080516120b25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107ae565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611301565b60608161214557505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561216f5780612159816127ff565b91506121689050600a836128d6565b9150612149565b60008167ffffffffffffffff81111561218a5761218a6124e2565b6040519080825280601f01601f1916602001820160405280156121b4576020820181803683370190505b5090505b8415611301576121c96001836127e8565b91506121d6600a866128ea565b6121e19060306127d0565b60f81b8183815181106121f6576121f66128fe565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612230600a866128d6565b94506121b8565b5080546122439061272c565b6000825580601f10612253575050565b601f016020900490600052602060002090810190610c9191906122f5565b82805461227d9061272c565b90600052602060002090601f01602090048101928261229f57600085556122e5565b82601f106122b857805160ff19168380011785556122e5565b828001600101855582156122e5579182015b828111156122e55782518255916020019190600101906122ca565b506122f19291506122f5565b5090565b5b808211156122f157600081556001016122f6565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610c9157600080fd5b60006020828403121561234a57600080fd5b8135611ae28161230a565b60005b83811015612370578181015183820152602001612358565b838111156111f25750506000910152565b60008151808452612399816020860160208601612355565b601f01601f19169290920160200192915050565b602081526000611ae26020830184612381565b6000602082840312156123d257600080fd5b5035919050565b6001600160a01b0381168114610c9157600080fd5b6000806040838503121561240157600080fd5b823561240c816123d9565b946020939093013593505050565b60008060006060848603121561242f57600080fd5b833561243a816123d9565b9250602084013561244a816123d9565b929592945050506040919091013590565b60006020828403121561246d57600080fd5b8135611ae2816123d9565b6000806040838503121561248b57600080fd5b50508035926020909101359150565b600080600080608085870312156124b057600080fd5b84356124bb816123d9565b93506020850135925060408501356124d2816123d9565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612513576125136124e2565b604051601f8501601f19908116603f0116810190828211818310171561253b5761253b6124e2565b8160405280935085815286868601111561255457600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261257f57600080fd5b611ae2838335602085016124f8565b6000806000606084860312156125a357600080fd5b83356125ae816123d9565b9250602084013567ffffffffffffffff8111156125ca57600080fd5b6125d68682870161256e565b925050604084013590509250925092565b8015158114610c9157600080fd5b6000806040838503121561260857600080fd5b8235612613816123d9565b91506020830135612623816125e7565b809150509250929050565b6000806000806080858703121561264457600080fd5b843561264f816123d9565b9350602085013561265f816123d9565b925060408501359150606085013567ffffffffffffffff81111561268257600080fd5b8501601f8101871361269357600080fd5b6126a2878235602084016124f8565b91505092959194509250565b600080604083850312156126c157600080fd5b82356126cc816123d9565b9150602083013567ffffffffffffffff8111156126e857600080fd5b6126f48582860161256e565b9150509250929050565b6000806040838503121561271157600080fd5b823561271c816123d9565b91506020830135612623816123d9565b600181811c9082168061274057607f821691505b6020821081141561276157634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561277957600080fd5b5051919050565b60006020828403121561279257600080fd5b8151611ae2816123d9565b6000602082840312156127af57600080fd5b8151611ae2816125e7565b634e487b7160e01b600052601160045260246000fd5b600082198211156127e3576127e36127ba565b500190565b6000828210156127fa576127fa6127ba565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612831576128316127ba565b5060010190565b6000835161284a818460208801612355565b83519083019061285e818360208801612355565b01949350505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526128996080830184612381565b9695505050505050565b6000602082840312156128b557600080fd5b8151611ae28161230a565b634e487b7160e01b600052601260045260246000fd5b6000826128e5576128e56128c0565b500490565b6000826128f9576128f96128c0565b500690565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203e86f2cd7b43cdb8b61f289f511a076215f5467a0456d52b241c253415b1246164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102c85760003560e01c80635d1b48b21161017b5780639ab6d0cf116100d8578063c9d1d7241161008c578063cf37834311610071578063cf3783431461051d578063e985e9c514610530578063f2fde38b1461056c57600080fd5b8063c9d1d72414610502578063cdc186c21461051557600080fd5b8063b88d4fde116100bd578063b88d4fde146104d4578063c87b56dd146104e7578063c995cf82146104fa57600080fd5b80639ab6d0cf146104ae578063a22cb465146104c157600080fd5b806389564be81161012f5780638f4e6f37116101145780638f4e6f371461048057806395d89b4114610493578063999434bc1461049b57600080fd5b806389564be8146104665780638da5cb5b1461046f57600080fd5b806370a082311161016057806370a0823114610438578063715018a61461044b5780637dda10021461045357600080fd5b80635d1b48b21461041d5780636352211e1461042557600080fd5b806329ee79791161022957806341dc9626116101dd57806342966c68116101c257806342966c68146103ef578063439f5ac2146104025780634f86a2ef1461040a57600080fd5b806341dc9626146103d457806342842e0e146103dc57600080fd5b80632f273a961161020e5780632f273a96146103bb5780633aa500f5146103c45780633b108d12146103cc57600080fd5b806329ee79791461039f5780632ddbd13a146103b257600080fd5b806312cec21f1161028057806323b872dd1161026557806323b872dd1461037c57806327115fd81461038f57806329cb924d1461039757600080fd5b806312cec21f1461035d578063162433561461037357600080fd5b8063081812fc116102b1578063081812fc1461030a578063095ea7b314610335578063097c74061461034a57600080fd5b806301ffc9a7146102cd57806306fdde03146102f5575b600080fd5b6102e06102db366004612338565b61057f565b60405190151581526020015b60405180910390f35b6102fd610664565b6040516102ec91906123ad565b61031d6103183660046123c0565b6106f6565b6040516001600160a01b0390911681526020016102ec565b6103486103433660046123ee565b61071d565b005b6103486103583660046123c0565b610854565b61036561089d565b6040519081526020016102ec565b61036560135481565b61034861038a36600461241a565b610942565b6103656109c9565b610365610a1d565b6103486103ad3660046123ee565b610a29565b61036560095481565b61036560125481565b610365610aa5565b61031d610af9565b610365610b99565b6103486103ea36600461241a565b610bed565b6103486103fd3660046123c0565b610c08565b601354610365565b6103486104183660046123c0565b610c94565b6102e0610d38565b61031d6104333660046123c0565b610dd7565b61036561044636600461245b565b610e3c565b610348610ed6565b610348610461366004612478565b610eea565b61036560145481565b6007546001600160a01b031661031d565b61034861048e36600461245b565b610f81565b6102fd610fb8565b6103486104a936600461249a565b610fc7565b6102e06104bc36600461258e565b611087565b6103486104cf3660046125f5565b61115b565b6103486104e236600461262e565b61116a565b6102fd6104f53660046123c0565b6111f8565b61031d611309565b6103486105103660046123c0565b61135d565b61031d61139a565b61036561052b3660046126ae565b6113ee565b6102e061053e3660046126fe565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61034861057a36600461245b565b6114e9565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061061257507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546106739061272c565b80601f016020809104026020016040519081016040528092919081815260200182805461069f9061272c565b80156106ec5780601f106106c1576101008083540402835291602001916106ec565b820191906000526020600020905b8154815290600101906020018083116106cf57829003601f168201915b5050505050905090565b600061070182611576565b506000908152600460205260409020546001600160a01b031690565b600061072882610dd7565b9050806001600160a01b0316836001600160a01b031614156107b75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107d357506107d3813361053e565b6108455760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016107ae565b61084f83836115da565b505050565b61085c611655565b610866600a829055565b6040518181527f8e71b95180bc7c28aed93371acbc7a4da0e5fdb66d60d2c138fe13b5290a8da2906020015b60405180910390a150565b6040517f52eee774000000000000000000000000000000000000000000000000000000008152600d600482015260009073__$d6a191c3751785fb495749248e1f7eeb69$__906352eee774906024015b60206040518083038186803b15801561090557600080fd5b505af4158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190612767565b905090565b61094c33826116af565b6109be5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f76656400000000000000000000000000000000000060648201526084016107ae565b61084f83838361172d565b6040517f9dc5d3e3000000000000000000000000000000000000000000000000000000008152600b600482015260009073__$d6a191c3751785fb495749248e1f7eeb69$__90639dc5d3e3906024016108ed565b600061093d600a611868565b610a31611655565b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055600c819055604080516001600160a01b0384168152602081018390527fe6fefa8502e78684d621f7cd79f7064782fe85fbb8696d85d1831157e64e9b0d91015b60405180910390a15050565b6040517ff88bd2e6000000000000000000000000000000000000000000000000000000008152600d600482015260009073__$d6a191c3751785fb495749248e1f7eeb69$__9063f88bd2e6906024016108ed565b6040517fb28a6b5a000000000000000000000000000000000000000000000000000000008152600b600482015260009073__$d6a191c3751785fb495749248e1f7eeb69$__9063b28a6b5a906024015b60206040518083038186803b158015610b6157600080fd5b505af4158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190612780565b6040517f691d76ef000000000000000000000000000000000000000000000000000000008152600d600482015260009073__$d6a191c3751785fb495749248e1f7eeb69$__9063691d76ef906024016108ed565b61084f8383836040518060200160405280600081525061116a565b6015546001600160a01b03163314610c885760405162461bcd60e51b815260206004820152602160248201527f6f6e6c79536574746c656d656e743a205065726d697373696f6e2064656e696560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016107ae565b610c918161187e565b50565b610c9c611655565b600d5460ff1615610cef5760405162461bcd60e51b815260206004820152601260248201527f63616e6e6f74206265207265706561746564000000000000000000000000000060448201526064016107ae565b610d08600d82815460ff19166001178255600490910155565b6040518181527fda32d3220cbbd3f75c13672c4ca09f23ad567aafa3129708621f65985330eaaf90602001610892565b6040517f20efe87a000000000000000000000000000000000000000000000000000000008152600d600482015260009073__$d6a191c3751785fb495749248e1f7eeb69$__906320efe87a9060240160206040518083038186803b158015610d9f57600080fd5b505af4158015610db3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d919061279d565b6000818152600260205260408120546001600160a01b03168061065e5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107ae565b60006001600160a01b038216610eba5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016107ae565b506001600160a01b031660009081526003602052604090205490565b610ede611655565b610ee860006118be565b565b610ef2611655565b808210610f415760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642074696d65000000000000000000000000000000000000000060448201526064016107ae565b6012829055601381905560408051838152602081018390527fe7754d427fa48e0fd514e205afc1230e2f209449de580d195a0393471a841a109101610a99565b610f89611655565b6015805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060600180546106739061272c565b610fcf611655565b600d80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b0387811691820292909217909255600e859055600f805473ffffffffffffffffffffffffffffffffffffffff19169185169182179055601083905560408051928352602083018690528281019190915260608201839052517fa25d9c516a746a27e71e24e075febf64c33bad776135eb1566446a8e4532b5a09181900360800190a150505050565b6000611091611655565b6009546001836110a060085490565b6110aa91906127d0565b6110b491906127e8565b11156111285760405162461bcd60e51b815260206004820152602660248201527f55707065724c696d69743a20746865206c696d697420686173206265656e207260448201527f656163686564000000000000000000000000000000000000000000000000000060648201526084016107ae565b60005b828110156111505761113d85856113ee565b5080611148816127ff565b91505061112b565b506001949350505050565b61116633838361191d565b5050565b61117433836116af565b6111e65760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f76656400000000000000000000000000000000000060648201526084016107ae565b6111f2848484846119ec565b50505050565b606061120382611576565b6000828152600660205260408120805461121c9061272c565b80601f01602080910402602001604051908101604052809291908181526020018280546112489061272c565b80156112955780601f1061126a57610100808354040283529160200191611295565b820191906000526020600020905b81548152906001019060200180831161127857829003601f168201915b5050505050905060006112b360408051602081019091526000815290565b90508051600014156112c6575092915050565b8151156112f85780826040516020016112e0929190612838565b60405160208183030381529060405292505050919050565b61130184611a75565b949350505050565b6040517f88575b23000000000000000000000000000000000000000000000000000000008152600d600482015260009073__$d6a191c3751785fb495749248e1f7eeb69$__906388575b2390602401610b49565b611365611655565b60148190556040518181527faced56f82e5761c222bd79c5badff97dd1fd4657ca48391f2c675999949687ff90602001610892565b6040517fb5f91e71000000000000000000000000000000000000000000000000000000008152600d600482015260009073__$d6a191c3751785fb495749248e1f7eeb69$__9063b5f91e7190602401610b49565b60006113f8611655565b600061140360085490565b905060095481111561147d5760405162461bcd60e51b815260206004820152602660248201527f55707065724c696d69743a20746865206c696d697420686173206265656e207260448201527f656163686564000000000000000000000000000000000000000000000000000060648201526084016107ae565b6114878482611ae9565b6114918184611c38565b61149f600880546001019055565b836001600160a01b03167f40c10f19c047ae7dfa66d6312b683d2ea3dfbcb4159e96b967c5f4b0a86f2842826040516114da91815260200190565b60405180910390a29392505050565b6114f1611655565b6001600160a01b03811661156d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107ae565b610c91816118be565b6000818152600260205260409020546001600160a01b0316610c915760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107ae565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061161c82610dd7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6007546001600160a01b03163314610ee85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ae565b6000806116bb83610dd7565b9050806001600160a01b0316846001600160a01b0316148061170257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113015750836001600160a01b031661171b846106f6565b6001600160a01b031614949350505050565b611735611655565b6000611741600a611868565b9050601254811015801561175757506013548111155b6117c95760405162461bcd60e51b815260206004820152602360248201527f69734163746976653a204e6f742061742074686520737065636966696564207460448201527f696d65000000000000000000000000000000000000000000000000000000000060648201526084016107ae565b60006117d484610e3c565b601454909150156118565760145481106118565760405162461bcd60e51b815260206004820152603860248201527f5472616e736665723a546865206163636f756e7420686f6c64696e672068617360448201527f207265616368656420746865207570706572206c696d6974000000000000000060648201526084016107ae565b611861858585611ce1565b5050505050565b80546000901561187757505490565b5042919050565b61188781611ebb565b600081815260066020526040902080546118a09061272c565b159050610c91576000818152600660205260408120610c9191612237565b600780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561197f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107ae565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6119f784848461172d565b611a0384848484611f63565b6111f25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107ae565b6060611a8082611576565b6000611a9760408051602081019091526000815290565b90506000815111611ab75760405180602001604052806000815250611ae2565b80611ac184612105565b604051602001611ad2929190612838565b6040516020818303038152906040525b9392505050565b6001600160a01b038216611b3f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107ae565b6000818152600260205260409020546001600160a01b031615611ba45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107ae565b6001600160a01b0382166000908152600360205260408120805460019290611bcd9084906127d0565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600260205260409020546001600160a01b0316611cc25760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e00000000000000000000000000000000000060648201526084016107ae565b6000828152600660209081526040909120825161084f92840190612271565b826001600160a01b0316611cf482610dd7565b6001600160a01b031614611d705760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016107ae565b6001600160a01b038216611deb5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107ae565b611df66000826115da565b6001600160a01b0383166000908152600360205260408120805460019290611e1f9084906127e8565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e4d9084906127d0565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611ec682610dd7565b9050611ed36000836115da565b6001600160a01b0381166000908152600360205260408120805460019290611efc9084906127e8565b9091555050600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160a01b0384163b15611150576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611fc0903390899088908890600401612867565b602060405180830381600087803b158015611fda57600080fd5b505af192505050801561200a575060408051601f3d908101601f19168201909252612007918101906128a3565b60015b6120ba573d808015612038576040519150601f19603f3d011682016040523d82523d6000602084013e61203d565b606091505b5080516120b25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107ae565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611301565b60608161214557505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561216f5780612159816127ff565b91506121689050600a836128d6565b9150612149565b60008167ffffffffffffffff81111561218a5761218a6124e2565b6040519080825280601f01601f1916602001820160405280156121b4576020820181803683370190505b5090505b8415611301576121c96001836127e8565b91506121d6600a866128ea565b6121e19060306127d0565b60f81b8183815181106121f6576121f66128fe565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612230600a866128d6565b94506121b8565b5080546122439061272c565b6000825580601f10612253575050565b601f016020900490600052602060002090810190610c9191906122f5565b82805461227d9061272c565b90600052602060002090601f01602090048101928261229f57600085556122e5565b82601f106122b857805160ff19168380011785556122e5565b828001600101855582156122e5579182015b828111156122e55782518255916020019190600101906122ca565b506122f19291506122f5565b5090565b5b808211156122f157600081556001016122f6565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610c9157600080fd5b60006020828403121561234a57600080fd5b8135611ae28161230a565b60005b83811015612370578181015183820152602001612358565b838111156111f25750506000910152565b60008151808452612399816020860160208601612355565b601f01601f19169290920160200192915050565b602081526000611ae26020830184612381565b6000602082840312156123d257600080fd5b5035919050565b6001600160a01b0381168114610c9157600080fd5b6000806040838503121561240157600080fd5b823561240c816123d9565b946020939093013593505050565b60008060006060848603121561242f57600080fd5b833561243a816123d9565b9250602084013561244a816123d9565b929592945050506040919091013590565b60006020828403121561246d57600080fd5b8135611ae2816123d9565b6000806040838503121561248b57600080fd5b50508035926020909101359150565b600080600080608085870312156124b057600080fd5b84356124bb816123d9565b93506020850135925060408501356124d2816123d9565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612513576125136124e2565b604051601f8501601f19908116603f0116810190828211818310171561253b5761253b6124e2565b8160405280935085815286868601111561255457600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261257f57600080fd5b611ae2838335602085016124f8565b6000806000606084860312156125a357600080fd5b83356125ae816123d9565b9250602084013567ffffffffffffffff8111156125ca57600080fd5b6125d68682870161256e565b925050604084013590509250925092565b8015158114610c9157600080fd5b6000806040838503121561260857600080fd5b8235612613816123d9565b91506020830135612623816125e7565b809150509250929050565b6000806000806080858703121561264457600080fd5b843561264f816123d9565b9350602085013561265f816123d9565b925060408501359150606085013567ffffffffffffffff81111561268257600080fd5b8501601f8101871361269357600080fd5b6126a2878235602084016124f8565b91505092959194509250565b600080604083850312156126c157600080fd5b82356126cc816123d9565b9150602083013567ffffffffffffffff8111156126e857600080fd5b6126f48582860161256e565b9150509250929050565b6000806040838503121561271157600080fd5b823561271c816123d9565b91506020830135612623816123d9565b600181811c9082168061274057607f821691505b6020821081141561276157634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561277957600080fd5b5051919050565b60006020828403121561279257600080fd5b8151611ae2816123d9565b6000602082840312156127af57600080fd5b8151611ae2816125e7565b634e487b7160e01b600052601160045260246000fd5b600082198211156127e3576127e36127ba565b500190565b6000828210156127fa576127fa6127ba565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612831576128316127ba565b5060010190565b6000835161284a818460208801612355565b83519083019061285e818360208801612355565b01949350505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526128996080830184612381565b9695505050505050565b6000602082840312156128b557600080fd5b8151611ae28161230a565b634e487b7160e01b600052601260045260246000fd5b6000826128e5576128e56128c0565b500490565b6000826128f9576128f96128c0565b500690565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203e86f2cd7b43cdb8b61f289f511a076215f5467a0456d52b241c253415b1246164736f6c63430008090033",
  "libraries": {
    "Time": "0x5bf49f3bc04BeBE6BC84CCb8dA3F3bA1efc759F5",
    "Prize": "0x75Fb33D81A965fD02DD64fac4f0463e42A1ef856"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3676,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3678,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3682,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3686,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3690,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3696,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4664,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2495,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 6467,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)5126_storage"
      },
      {
        "astId": 6469,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "total",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6041,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "_timestamp",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Timestamp)7800_storage"
      },
      {
        "astId": 6048,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "Universal",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Universal)7601_storage"
      },
      {
        "astId": 6055,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "Surprise",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Surprise)7614_storage"
      },
      {
        "astId": 6057,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "starting_time",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6059,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "end_time",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 6062,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "cap_per_person",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 6064,
        "contract": "contracts/Advertise/Advertise.sol:Advertise",
        "label": "settlement",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5126_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 5125,
            "contract": "contracts/Advertise/Advertise.sol:Advertise",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Surprise)7614_storage": {
        "encoding": "inplace",
        "label": "struct Prize.Surprise",
        "members": [
          {
            "astId": 7603,
            "contract": "contracts/Advertise/Advertise.sol:Advertise",
            "label": "is_revealed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7605,
            "contract": "contracts/Advertise/Advertise.sol:Advertise",
            "label": "token",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7607,
            "contract": "contracts/Advertise/Advertise.sol:Advertise",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7609,
            "contract": "contracts/Advertise/Advertise.sol:Advertise",
            "label": "nft_token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7611,
            "contract": "contracts/Advertise/Advertise.sol:Advertise",
            "label": "nft_token_id",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7613,
            "contract": "contracts/Advertise/Advertise.sol:Advertise",
            "label": "surprise_id",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Timestamp)7800_storage": {
        "encoding": "inplace",
        "label": "struct Time.Timestamp",
        "members": [
          {
            "astId": 7799,
            "contract": "contracts/Advertise/Advertise.sol:Advertise",
            "label": "_current_time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Universal)7601_storage": {
        "encoding": "inplace",
        "label": "struct Prize.Universal",
        "members": [
          {
            "astId": 7598,
            "contract": "contracts/Advertise/Advertise.sol:Advertise",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7600,
            "contract": "contracts/Advertise/Advertise.sol:Advertise",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}